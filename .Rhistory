# handle missing region values
mutate(cov_cat_region = replace_na(cov_cat_region, "Missing")) %>%
# Set the variables that should be factor variables as factor
mutate(across(any_of(factor_names), function(x) factor(x, ordered = FALSE))) %>%
# Re-code vars and specify references
mutate(sub_cat_covid19_hospital = ordered(sub_cat_covid19_hospital, levels = c("non_hospitalised","hospitalised","no_infection")),
# ethnicity
cov_cat_ethnicity = case_when(cov_cat_ethnicity == 0 ~ "Missing",
cov_cat_ethnicity == 1 ~ "White",
cov_cat_ethnicity == 2 ~ "Mixed",
cov_cat_ethnicity == 3 ~ "South Asian",
cov_cat_ethnicity == 4 ~ "Black",
cov_cat_ethnicity == 5 ~ "Other")) %>%
mutate(cov_cat_ethnicity = ordered(cov_cat_ethnicity, levels = c("White","Mixed","South Asian","Black","Other","Missing")),
# smoking
cov_cat_smoking_status = case_when(cov_cat_smoking_status == "E" ~ "Ever smoker",
cov_cat_smoking_status == "M" ~ "Missing",
cov_cat_smoking_status == "N" ~ "Never smoker",
cov_cat_smoking_status == "S" ~ "Current smoker")) %>%
mutate(cov_cat_smoking_status = ordered(cov_cat_smoking_status, levels = c("Never smoker","Ever smoker","Current smoker","Missing")),
# region
cov_cat_region = relevel(cov_cat_region, ref = "London"),
# sex
cov_cat_sex = case_when(cov_cat_sex == "F" ~ "Female",
cov_cat_sex == "M" ~ "Male")) %>%
mutate(cov_cat_sex = relevel(factor(cov_cat_sex), ref = "Female"),
# cat jcvi group
vax_cat_jcvi_group = ordered(vax_cat_jcvi_group, levels = c("12","11","10","09","08","07","06","05","04","03","02","01","99"))) %>%
# deprivation: First - most deprived; fifth -least deprived
mutate(cov_cat_deprivation = ifelse(cov_cat_deprivation == 1 | cov_cat_deprivation == 2, "1-2 (most deprived)",
ifelse(cov_cat_deprivation == 3 | cov_cat_deprivation == 4, "3-4",
ifelse(cov_cat_deprivation == 5 | cov_cat_deprivation == 6, "5-6",
ifelse(cov_cat_deprivation == 7 | cov_cat_deprivation == 8, "7-8",
ifelse(cov_cat_deprivation == 9 | cov_cat_deprivation == 10, "9-10 (least deprived)", NA)))))) %>%
mutate_at(vars(cov_cat_deprivation), as.factor) %>%
mutate(cov_cat_deprivation = ordered(cov_cat_deprivation, levels = c("1-2 (most deprived)","3-4","5-6","7-8","9-10 (least deprived)")))
# Save meta data
describe_vars <- tidyselect::vars_select(names(input), contains(c('_cat_', 'cov_bin','cov_cat','qa_bin','exp_cat','vax_cat'), ignore.case = TRUE))
meta_data_factors <- lapply(input[,describe_vars], table)
sink(file = file.path("output", "meta_data_factors.csv"))
print(meta_data_factors)
sink()
#####################
# 2. Apply QA rules #
#####################
input <- input %>%
# Rule 1: Year of birth is after year of death or patient only has year of death
mutate(rule1 = ifelse((qa_num_birth_year > (format(death_date, format="%Y")) &
! is.na(qa_num_birth_year) &
! is.na(death_date) | is.na(qa_num_birth_year) &
! is.na(death_date)), TRUE, FALSE),
# Rule 2: Year of birth predates NHS established year or year of birth exceeds current date
rule2 = ifelse((qa_num_birth_year < 1793 | (qa_num_birth_year > format(Sys.Date(),"%Y"))) & ! is.na(qa_num_birth_year), TRUE, FALSE),
# Rule 3: Date of death is NULL or invalid (on or before 1/1/1900 or after current date)
rule3 = ifelse((death_date <= "1900-01-01" | death_date > format(Sys.Date(),"%Y-%m-%d")) & ! is.na(death_date), TRUE, FALSE),
# Rule 4: Pregnancy/birth codes for men
rule4 = ifelse(qa_bin_pregnancy == TRUE & cov_cat_sex=="Male", TRUE, FALSE),
# Rule 5: HRT or COCP meds for men
rule5 = ifelse(cov_cat_sex=="Male" & cov_bin_hormone_replacement_therapy==TRUE | cov_cat_sex=="Male" & cov_bin_combined_oral_contraceptive_pill == TRUE, TRUE, FALSE),
# Rule 6: Prostate cancer codes for women
rule6 = ifelse(qa_bin_prostate_cancer == TRUE & cov_cat_sex=="Female", TRUE, FALSE))
# Remove rows that are TRUE for at least one rule
input_QA <- input %>% filter(rule1 == FALSE & rule2 == FALSE & rule3 == FALSE & rule4 == FALSE & rule5 == FALSE & rule6 == FALSE)
# Produce QA summary
QA_summary <- data.frame(matrix(ncol = 2))
colnames(QA_summary) <- c('Rule', 'N rule TRUE')
QA_summary[1:7, 1] <- c("Rule 1", "Rule 2", "Rule 3", "Rule 4", "Rule 5", "Rule 6", "Total excluded from QA")
QA_summary[1,2]=nrow(input%>%filter(rule1==T))
QA_summary[2,2]=nrow(input%>%filter(rule2==T))
QA_summary[3,2]=nrow(input%>%filter(rule3==T))
QA_summary[4,2]=nrow(input%>%filter(rule4==T))
QA_summary[5,2]=nrow(input%>%filter(rule5==T))
QA_summary[6,2]=nrow(input%>%filter(rule6==T))
QA_summary[7,2]=nrow(input)-nrow(input_QA)
#Save QA summary as .csv
write.csv(QA_summary, file = file.path("output", "QA_summary.csv") , row.names=F)
# Remove QA variables from dataset
input <- input_QA %>%
select(-c(rule1,rule2,rule3,rule4,rule5,rule6,
qa_num_birth_year, qa_bin_pregnancy, qa_bin_prostate_cancer))
#########################################
# 3. Apply exclusion/inclusion criteria #
#########################################
# Define the cohort flow
cohort_flow <- data.frame(N = numeric(),
Description = character(),
stringsAsFactors = FALSE)
cohort_flow[nrow(cohort_flow)+1,] <- c(nrow(input),"Study defined sample size")
#---------------------------------------#
# Apply criteria listed in the protocol #
#---------------------------------------#
# Inclusion criteria 1: Alive on the first day of follow up
input <- input %>%
mutate(start_alive = ifelse(death_date < index_date, 0, 1)) %>%
mutate(start_alive = replace_na(start_alive, 1)) %>%
filter(start_alive == 1)
cohort_flow[nrow(cohort_flow)+1,] <- c(nrow(input),"Criteria 1 (Inclusion): Alive on the first day of follow up") # Feed into the cohort flow
# Inclusion criteria 2: Known age between 18 and 110 on 01/01/2020
input <- input %>%
filter(cov_num_age >= 18 & cov_num_age <= 110)
cohort_flow[nrow(cohort_flow)+1,] <- c(nrow(input),"Criteria 2 (Inclusion): Known age between 18 and 110 on 01/01/2020") # Feed into the cohort flow
# Inclusion criteria 3: Known sex
input <- input %>%
filter(cov_cat_sex == "Male" | cov_cat_sex == "Female")
cohort_flow[nrow(cohort_flow)+1,] <- c(nrow(input),"Criteria 3 (Inclusion): Known sex")
# Inclusion criteria 4: Known deprivation
input <- input %>%
drop_na(cov_cat_deprivation)
cohort_flow[nrow(cohort_flow)+1,] <- c(nrow(input),"Criteria 4 (Inclusion): Known deprivation")
# Inclusion criteria 5: Registered in an English GP with TPP software for at least 6 months prior to the study start date
# NOTE: Dealt with in Study definition
cohort_flow[nrow(cohort_flow)+1,] <- c(nrow(input),"Criteria 5 (Inclusion): Registered in an English GP with TPP software for at least 6 months prior to the study start date")
# Exclusion criteria: SARS-CoV-2 infection recorded prior to the start of follow-up
# No COVID cases prior to 1st Jan 2020
##############
# 4. Outputs #
##############
# Create csv file
write.csv(cohort_flow, file = file.path("output", "cohort_flow.csv"), row.names=F)
# Create the final stage 1 dataset
saveRDS(input, file = file.path("output", "input_stage1.rds"))
png(file = file.path("output", "diabetes_flow.png"), height = 300, width = 200, unit = "mm", res = 600)
flow
dev.off()
print(flow)
png(file = file.path("output", "diabetes_flow.png"), height = 300, width = 200, unit = "mm", res = 600)
print(flow)
dev.off()
tiff(file = file.path("output", "diabetes_flow.png"), units="in", height=13, width=22, res=600)
print(flow)
dev.off()
tiff(file.path("output", "diabetes_flow.png"), units="in", height=13, width=22, res=600)
print(flow)
dev.off()
export_graph(flow, file.path("output", "diabetes_flow.png"))
library(tidyverse)  # for %>% pipes
library(DiagrammeR)
library(DiagrammeRsvg)  # for conversion to svg
library(rsvg)  # for saving svg
install.packages(c("DiagrammeRsvg", "rsvg"))
library(tidyverse)  # for %>% pipes
library(DiagrammeR)
library(DiagrammeRsvg)  # for conversion to svg
library(rsvg)  # for saving svg
flow %>%
export_svg() %>%
charToRaw %>%
rsvg_pdf(file.path("output", "diabetes_flow.png"))
flow %>%
export_svg() %>%
charToRaw %>%
rsvg_png(file.path("output", "diabetes_flow.png"))
libraries <- c("readr", "dplyr", "stringr", "tidyverse", "DiagrammeR", "DiagrammeRsvg", "rsvg")
lapply(libraries, require, character.only=T)
# Load Stage 1 dataset
diabetes_df <-read_rds("output/input_stage1.rds")
###############################################
# 1. Construct flowchart -------------------- #
###############################################
# Define boxes for flow chart within a list of values using algorithm steps created in preprocess_data.R.
values <- list(
# Diabetes diagnostic code / medication / care process code plus ethnicity code in primary or secondary care
a = sum(diabetes_df$out_cat_diabetes == "DM unspecified" | diabetes_df$out_cat_diabetes == "GDM" | diabetes_df$out_cat_diabetes == "T1DM" | diabetes_df$out_cat_diabetes == "T2DM"),
# Step 1 any gestational diabetes code
b = sum(diabetes_df$step_1 == "Yes", na.rm = T),
b2 = sum(diabetes_df$step_1 == "No", na.rm = T),
# Step 1a Any type 1 / type 2 code
c = sum(diabetes_df$step_1a == "Yes", na.rm = T),
c2 = sum(diabetes_df$step_1a == "No", na.rm = T),
# GESTATIONAL DIABETES
d = sum(diabetes_df$out_cat_diabetes == "GDM", na.rm = T),
# Step 2 non-metformin oral antidiabetic
e = sum(diabetes_df$step_2 == "Yes", na.rm = T),
e2 = sum(diabetes_df$step_2 == "No", na.rm = T),
# TYPE 2 DIABETES
f = sum(diabetes_df$out_cat_diabetes == "T2DM", na.rm = T),
# Step 3 Type 1 code but no Type 2 code
g = sum(diabetes_df$step_3 == "Yes", na.rm = T),
g2 = sum(diabetes_df$step_3 == "No", na.rm = T),
# TYPE 1 DIABETES
h = sum(diabetes_df$out_cat_diabetes == "T1DM", na.rm = T),
# Step 4 Type 2 code and no type 1 code
i = sum(diabetes_df$step_4 == "Yes", na.rm = T),
i2 = sum(diabetes_df$step_4 == "No", na.rm = T),
# Step 5 Aged <35 yrs (30 yrs for South Asians and African descent) at first diagnostic code)
j = sum(diabetes_df$step_5 == "Yes", na.rm = T),
j2 = sum(diabetes_df$step_5 == "No", na.rm = T),
# Step 6 Type 1 and Type 2 codes present
k = sum(diabetes_df$step_6 == "Yes", na.rm = T),
k2 = sum(diabetes_df$step_6 == "No", na.rm = T),
# Step 6a Type 1 only recorded in primary care
l = sum(diabetes_df$step_6a == "Yes", na.rm = T),
l2 = sum(diabetes_df$step_6a == "No", na.rm = T),
# Step 6b Type 2 only recorded in primary care
m = sum(diabetes_df$step_6b == "Yes", na.rm = T),
m2 = sum(diabetes_df$step_6b == "No", na.rm = T),
# Step 6c N Type 1 > N Type 2 codes
n = sum(diabetes_df$step_6c == "Yes", na.rm = T),
n2 = sum(diabetes_df$step_6c == "No", na.rm = T),
# Step 6d N Type 2 > N Type 1 codes
o = sum(diabetes_df$step_6d == "Yes", na.rm = T),
o2 = sum(diabetes_df$step_6d == "No", na.rm = T),
# Step 6e Type 2 code most recent
p = sum(diabetes_df$step_6e == "Yes", na.rm = T),
p2 = sum(diabetes_df$step_6e == "No", na.rm = T),
# Step 7 Diabetes medication OR >= 5 care process codes OR HBA1c >= 47.5mmol)
q = sum(diabetes_df$step_7 == "Yes", na.rm = T),
q2 = sum(diabetes_df$step_7 == "No", na.rm = T),
# DIABETES UNSPECIFIED TYPE
r = sum(diabetes_df$out_cat_diabetes == "DM unspecified", na.rm = T),
# DIABETES UNLIKELY
s = sum(diabetes_df$out_cat_diabetes == "DM unlikely", na.rm = T))
flow <- DiagrammeR::grViz("
digraph graph2 {
graph [layout = dot]
# NODE DEFINITIONS AND SUBSTITUTED TEXT
node [shape = rectangle, width = 4, fillcolor = Biege]
a [label = '@@1', fontname = 'Arial Rounded MT']
b [label = '@@2', fontname = 'Arial Rounded MT']
c [label = '@@3', fontname = 'Arial Rounded MT']
e [label = '@@5', fontname = 'Arial Rounded MT']
g [label = '@@7', fontname = 'Arial Rounded MT']
i [label = '@@9', fontname = 'Arial Rounded MT']
j [label = '@@10', fontname = 'Arial Rounded MT']
k [label = '@@11', fontname = 'Arial Rounded MT']
l [label = '@@12', fontname = 'Arial Rounded MT']
m [label = '@@13', fontname = 'Arial Rounded MT']
n [label = '@@14', fontname = 'Arial Rounded MT']
o [label = '@@15', fontname = 'Arial Rounded MT']
p [label = '@@16', fontname = 'Arial Rounded MT']
q [label = '@@17', fontname = 'Arial Rounded MT']
node [shape = oval, width = 4, style = filled]
d [label = '@@4', fillcolor = red, fontname = 'Arial Rounded MT Bold']
f [label = '@@6', fillcolor = red, fontname = 'Arial Rounded MT Bold']
h [label = '@@8', fillcolor = red, fontname = 'Arial Rounded MT Bold']
r [label = '@@18', fillcolor = red, fontname = 'Arial Rounded MT Bold']
s [label = '@@19', fillcolor = red, fontname = 'Arial Rounded MT Bold']
# DRAW FLOW CHART AND LABELS
a -> b
b -> c [label = 'Yes']
b -> e [label = 'No']
c -> d [label = 'No']
c -> e [label = 'Yes']
e -> f [label = 'Yes']
e -> g [label = 'No']
g -> h [label = 'Yes']
g -> i [label = 'No']
i -> f [label = 'Yes']
i -> j [label = 'No']
j -> h [label = 'Yes']
j -> k [label = 'No']
k -> l [label = 'Yes']
l -> h [label = 'Yes']
l -> m [label = 'No']
m -> f [label = 'Yes']
m -> n [label = 'No']
n -> h [label = 'Yes']
n -> o [label = 'No']
o -> f [label = 'Yes']
o -> p [label = 'No']
p -> f [label = 'Yes']
p -> h [label = 'No']
k -> q [label = 'No']
q -> r [label = 'Yes']
q -> s [label = 'No']
}
# WRITE LABELS TO BE USED ABOVE
[1]: paste0('Study population (N = ', values$a, ')')
[2]: paste0('1. Any gestational diabetes code (N Yes = ', values$b, ', N No = ', values$b2, ')')
[3]: paste0('1a. Any type 1 / type 2 codes (N Yes = ', values$c, ', N No = ', values$c2, ')')
[4]: paste0('Gestational diabetes (N = ', values$d, ')')
[5]: paste0('2. Non-metformin oral anti-diabetic (N Yes = ', values$e, ', N No = ', values$e2, ')')
[6]: paste0('Type 2 Diabetes (N = ', values$f, ')')
[7]: paste0('3. Type 1 code and no Type 2 code (N Yes = ', values$g, ', N No = ', values$g2, ')')
[8]: paste0('Type 1 Diabetes (N = ', values$h, ')')
[9]: paste0('4. Type 2 code and no Type 1 code (N Yes = ', values$i, ', N No = ', values$i2, ')')
[10]: paste0('5. Aged < 35 yrs (<30 yrs if South Asian / African) at first diagnostic code (N Yes = ', values$j, ', N No = ', values$j2, ')')
[11]: paste0('6. Type 1 and Type 2 codes present (N Yes = ', values$k, ', N No = ', values$k2, ')')
[12]: paste0('6a. Type 1 only recorded in primary care (N Yes = ', values$l, ', N No = ', values$l2, ')')
[13]: paste0('6b. Type 2 only recorded in primary care (N Yes = ', values$m, ', N No = ', values$m2, ')')
[14]: paste0('6c. N Type 1 > N Type 2 codes (N Yes = ', values$n, ', N No = ', values$n2, ')')
[15]: paste0('6d. N Type 2 > N Type 1 codes (N Yes = ', values$o, ', N No = ', values$o2, ')')
[16]: paste0('6e. Type 2 code most recent (N Yes = ', values$p, ', N No = ', values$p2, ')')
[17]: paste0('7. Diabetes medication OR >= 5 process codes OR HbA1c >= 47.5mmol (N Yes = ', values$q, ', N No = ', values$q2, ')')
[18]: paste0('Diabetes unspecified type (N = ', values$r, ')')
[19]: paste0('Diabetes unlikely (N = ', values$s, ')')
")
flow %>%
export_svg() %>%
charToRaw %>%
rsvg_png(file.path("output", "diabetes_flow.png"))
# END
## =============================================================================
## Project:     Post covid unvaccinated project
##
## Purpose:  Build flowchart to illustrate the flow of diabetes diagnoses using the algorithm
##
## Authors: Kurt Taylor
## Reviewer:
##
## Content:
## 0. Load relevant libraries and read data/arguments
## 1.
## 2.
## 3.
## 4. Output:
## =============================================================================
###############################################
# 0. Load relevant libraries and read in data #
###############################################
# Libraries
libraries <- c("readr", "dplyr", "stringr", "tidyverse", "DiagrammeR", "DiagrammeRsvg", "rsvg")
lapply(libraries, require, character.only=T)
# Load Stage 1 dataset
diabetes_df <-read_rds("output/input_stage1.rds")
###############################################
# 1. Construct flowchart -------------------- #
###############################################
# Define boxes for flow chart within a list of values using algorithm steps created in preprocess_data.R.
values <- list(
# Diabetes diagnostic code / medication / care process code plus ethnicity code in primary or secondary care
a = sum(diabetes_df$out_cat_diabetes == "DM unspecified" | diabetes_df$out_cat_diabetes == "GDM" | diabetes_df$out_cat_diabetes == "T1DM" | diabetes_df$out_cat_diabetes == "T2DM"),
# Step 1 any gestational diabetes code
b = sum(diabetes_df$step_1 == "Yes", na.rm = T),
b2 = sum(diabetes_df$step_1 == "No", na.rm = T),
# Step 1a Any type 1 / type 2 code
c = sum(diabetes_df$step_1a == "Yes", na.rm = T),
c2 = sum(diabetes_df$step_1a == "No", na.rm = T),
# GESTATIONAL DIABETES
d = sum(diabetes_df$out_cat_diabetes == "GDM", na.rm = T),
# Step 2 non-metformin oral antidiabetic
e = sum(diabetes_df$step_2 == "Yes", na.rm = T),
e2 = sum(diabetes_df$step_2 == "No", na.rm = T),
# TYPE 2 DIABETES
f = sum(diabetes_df$out_cat_diabetes == "T2DM", na.rm = T),
# Step 3 Type 1 code but no Type 2 code
g = sum(diabetes_df$step_3 == "Yes", na.rm = T),
g2 = sum(diabetes_df$step_3 == "No", na.rm = T),
# TYPE 1 DIABETES
h = sum(diabetes_df$out_cat_diabetes == "T1DM", na.rm = T),
# Step 4 Type 2 code and no type 1 code
i = sum(diabetes_df$step_4 == "Yes", na.rm = T),
i2 = sum(diabetes_df$step_4 == "No", na.rm = T),
# Step 5 Aged <35 yrs (30 yrs for South Asians and African descent) at first diagnostic code)
j = sum(diabetes_df$step_5 == "Yes", na.rm = T),
j2 = sum(diabetes_df$step_5 == "No", na.rm = T),
# Step 6 Type 1 and Type 2 codes present
k = sum(diabetes_df$step_6 == "Yes", na.rm = T),
k2 = sum(diabetes_df$step_6 == "No", na.rm = T),
# Step 6a Type 1 only recorded in primary care
l = sum(diabetes_df$step_6a == "Yes", na.rm = T),
l2 = sum(diabetes_df$step_6a == "No", na.rm = T),
# Step 6b Type 2 only recorded in primary care
m = sum(diabetes_df$step_6b == "Yes", na.rm = T),
m2 = sum(diabetes_df$step_6b == "No", na.rm = T),
# Step 6c N Type 1 > N Type 2 codes
n = sum(diabetes_df$step_6c == "Yes", na.rm = T),
n2 = sum(diabetes_df$step_6c == "No", na.rm = T),
# Step 6d N Type 2 > N Type 1 codes
o = sum(diabetes_df$step_6d == "Yes", na.rm = T),
o2 = sum(diabetes_df$step_6d == "No", na.rm = T),
# Step 6e Type 2 code most recent
p = sum(diabetes_df$step_6e == "Yes", na.rm = T),
p2 = sum(diabetes_df$step_6e == "No", na.rm = T),
# Step 7 Diabetes medication OR >= 5 care process codes OR HBA1c >= 47.5mmol)
q = sum(diabetes_df$step_7 == "Yes", na.rm = T),
q2 = sum(diabetes_df$step_7 == "No", na.rm = T),
# DIABETES UNSPECIFIED TYPE
r = sum(diabetes_df$out_cat_diabetes == "DM unspecified", na.rm = T),
# DIABETES UNLIKELY
s = sum(diabetes_df$out_cat_diabetes == "DM unlikely", na.rm = T))
flow <- DiagrammeR::grViz("
digraph graph2 {
graph [layout = dot]
# NODE DEFINITIONS AND SUBSTITUTED TEXT
node [shape = rectangle, width = 4, fillcolor = Biege]
a [label = '@@1', fontname = 'Arial Rounded MT']
b [label = '@@2', fontname = 'Arial Rounded MT']
c [label = '@@3', fontname = 'Arial Rounded MT']
e [label = '@@5', fontname = 'Arial Rounded MT']
g [label = '@@7', fontname = 'Arial Rounded MT']
i [label = '@@9', fontname = 'Arial Rounded MT']
j [label = '@@10', fontname = 'Arial Rounded MT']
k [label = '@@11', fontname = 'Arial Rounded MT']
l [label = '@@12', fontname = 'Arial Rounded MT']
m [label = '@@13', fontname = 'Arial Rounded MT']
n [label = '@@14', fontname = 'Arial Rounded MT']
o [label = '@@15', fontname = 'Arial Rounded MT']
p [label = '@@16', fontname = 'Arial Rounded MT']
q [label = '@@17', fontname = 'Arial Rounded MT']
node [shape = oval, width = 4, style = filled]
d [label = '@@4', fillcolor = red, fontname = 'Arial Rounded MT Bold']
f [label = '@@6', fillcolor = red, fontname = 'Arial Rounded MT Bold']
h [label = '@@8', fillcolor = red, fontname = 'Arial Rounded MT Bold']
r [label = '@@18', fillcolor = red, fontname = 'Arial Rounded MT Bold']
s [label = '@@19', fillcolor = red, fontname = 'Arial Rounded MT Bold']
# DRAW FLOW CHART AND LABELS
a -> b
b -> c [label = 'Yes']
b -> e [label = 'No']
c -> d [label = 'No']
c -> e [label = 'Yes']
e -> f [label = 'Yes']
e -> g [label = 'No']
g -> h [label = 'Yes']
g -> i [label = 'No']
i -> f [label = 'Yes']
i -> j [label = 'No']
j -> h [label = 'Yes']
j -> k [label = 'No']
k -> l [label = 'Yes']
l -> h [label = 'Yes']
l -> m [label = 'No']
m -> f [label = 'Yes']
m -> n [label = 'No']
n -> h [label = 'Yes']
n -> o [label = 'No']
o -> f [label = 'Yes']
o -> p [label = 'No']
p -> f [label = 'Yes']
p -> h [label = 'No']
k -> q [label = 'No']
q -> r [label = 'Yes']
q -> s [label = 'No']
}
# WRITE LABELS TO BE USED ABOVE
[1]: paste0('Study population (N = ', values$a, ')')
[2]: paste0('1. Any gestational diabetes code (N Yes = ', values$b, ', N No = ', values$b2, ')')
[3]: paste0('1a. Any type 1 / type 2 codes (N Yes = ', values$c, ', N No = ', values$c2, ')')
[4]: paste0('Gestational diabetes (N = ', values$d, ')')
[5]: paste0('2. Non-metformin oral anti-diabetic (N Yes = ', values$e, ', N No = ', values$e2, ')')
[6]: paste0('Type 2 Diabetes (N = ', values$f, ')')
[7]: paste0('3. Type 1 code and no Type 2 code (N Yes = ', values$g, ', N No = ', values$g2, ')')
[8]: paste0('Type 1 Diabetes (N = ', values$h, ')')
[9]: paste0('4. Type 2 code and no Type 1 code (N Yes = ', values$i, ', N No = ', values$i2, ')')
[10]: paste0('5. Aged < 35 yrs (<30 yrs if South Asian / African) at first diagnostic code (N Yes = ', values$j, ', N No = ', values$j2, ')')
[11]: paste0('6. Type 1 and Type 2 codes present (N Yes = ', values$k, ', N No = ', values$k2, ')')
[12]: paste0('6a. Type 1 only recorded in primary care (N Yes = ', values$l, ', N No = ', values$l2, ')')
[13]: paste0('6b. Type 2 only recorded in primary care (N Yes = ', values$m, ', N No = ', values$m2, ')')
[14]: paste0('6c. N Type 1 > N Type 2 codes (N Yes = ', values$n, ', N No = ', values$n2, ')')
[15]: paste0('6d. N Type 2 > N Type 1 codes (N Yes = ', values$o, ', N No = ', values$o2, ')')
[16]: paste0('6e. Type 2 code most recent (N Yes = ', values$p, ', N No = ', values$p2, ')')
[17]: paste0('7. Diabetes medication OR >= 5 process codes OR HbA1c >= 47.5mmol (N Yes = ', values$q, ', N No = ', values$q2, ')')
[18]: paste0('Diabetes unspecified type (N = ', values$r, ')')
[19]: paste0('Diabetes unlikely (N = ', values$s, ')')
")
###############################################
# 2. Output  -------------------- #
###############################################
flow %>%
export_svg() %>%
charToRaw %>%
rsvg_png(file.path("output", "diabetes_flow.png"))
# END
diabetes_df <-read_rds("output/input_stage1.rds")
table(diabetes_df$out_cat_diabetes)
###############################################
# 1. Construct flowchart -------------------- #
###############################################
# Define boxes for flow chart within a list of values using algorithm steps created in preprocess_data.R.
values <- list(
# Diabetes diagnostic code / medication / care process code plus ethnicity code in primary or secondary care
a = sum(diabetes_df$out_cat_diabetes == "DM unspecified" | diabetes_df$out_cat_diabetes == "GDM" | diabetes_df$out_cat_diabetes == "T1DM" | diabetes_df$out_cat_diabetes == "T2DM"),
# Step 1 any gestational diabetes code
b = sum(diabetes_df$step_1 == "Yes", na.rm = T),
b2 = sum(diabetes_df$step_1 == "No", na.rm = T),
# Step 1a Any type 1 / type 2 code
c = sum(diabetes_df$step_1a == "Yes", na.rm = T),
c2 = sum(diabetes_df$step_1a == "No", na.rm = T),
# GESTATIONAL DIABETES
d = sum(diabetes_df$out_cat_diabetes == "GDM", na.rm = T),
# Step 2 non-metformin oral antidiabetic
e = sum(diabetes_df$step_2 == "Yes", na.rm = T),
e2 = sum(diabetes_df$step_2 == "No", na.rm = T),
# TYPE 2 DIABETES
f = sum(diabetes_df$out_cat_diabetes == "T2DM", na.rm = T),
# Step 3 Type 1 code but no Type 2 code
g = sum(diabetes_df$step_3 == "Yes", na.rm = T),
g2 = sum(diabetes_df$step_3 == "No", na.rm = T),
# TYPE 1 DIABETES
h = sum(diabetes_df$out_cat_diabetes == "T1DM", na.rm = T),
# Step 4 Type 2 code and no type 1 code
i = sum(diabetes_df$step_4 == "Yes", na.rm = T),
i2 = sum(diabetes_df$step_4 == "No", na.rm = T),
# Step 5 Aged <35 yrs (30 yrs for South Asians and African descent) at first diagnostic code)
j = sum(diabetes_df$step_5 == "Yes", na.rm = T),
j2 = sum(diabetes_df$step_5 == "No", na.rm = T),
# Step 6 Type 1 and Type 2 codes present
k = sum(diabetes_df$step_6 == "Yes", na.rm = T),
k2 = sum(diabetes_df$step_6 == "No", na.rm = T),
# Step 6a Type 1 only recorded in primary care
l = sum(diabetes_df$step_6a == "Yes", na.rm = T),
l2 = sum(diabetes_df$step_6a == "No", na.rm = T),
# Step 6b Type 2 only recorded in primary care
m = sum(diabetes_df$step_6b == "Yes", na.rm = T),
m2 = sum(diabetes_df$step_6b == "No", na.rm = T),
# Step 6c N Type 1 > N Type 2 codes
n = sum(diabetes_df$step_6c == "Yes", na.rm = T),
n2 = sum(diabetes_df$step_6c == "No", na.rm = T),
# Step 6d N Type 2 > N Type 1 codes
o = sum(diabetes_df$step_6d == "Yes", na.rm = T),
o2 = sum(diabetes_df$step_6d == "No", na.rm = T),
# Step 6e Type 2 code most recent
p = sum(diabetes_df$step_6e == "Yes", na.rm = T),
p2 = sum(diabetes_df$step_6e == "No", na.rm = T),
# Step 7 Diabetes medication OR >= 5 care process codes OR HBA1c >= 47.5mmol)
q = sum(diabetes_df$step_7 == "Yes", na.rm = T),
q2 = sum(diabetes_df$step_7 == "No", na.rm = T),
# DIABETES UNSPECIFIED TYPE
r = sum(diabetes_df$out_cat_diabetes == "DM unspecified", na.rm = T),
# DIABETES UNLIKELY
s = sum(diabetes_df$out_cat_diabetes == "DM unlikely", na.rm = T))
