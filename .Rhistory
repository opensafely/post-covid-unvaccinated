#     DateChecks = glue("output/Check_dates_range.csv"),
#     Descriptive_Table = glue("output/Table1.csv")
#   )
# ),
#comment("Stage 3 - Diabetes flow"),
action(
name = "stage3_diabetes_flow",
run = "r:latest analysis/diabetes_flowchart.R",
needs = list("stage1_data_cleaning"),
moderately_sensitive = list(
flow_df = glue("output/diabetes_flow_values.csv")
# flow_fig = glue("output/diabetes_flow.png"),
),
),
#comment("Stage 4 - Table 2"),
# splice(
#   # over outcomes
#   unlist(lapply(cohort_to_run, function(x) apply_table2_function( cohort = x)), recursive = FALSE)
#   ),
#comment("Stage 4 - Venn diagrams"),
action(
name = "stage4_venn_diagram",
run = "r:latest analysis/venn_diagram.R",
needs = list("preprocess_data", "stage1_data_cleaning"),
moderately_sensitive = list(
venn_diagram = glue("output/venn_diagram_*.svg"),
venn_diagram_number_check = glue("output/venn_diagram_number_check.csv")
)
),
#comment("Stage 5 - Apply models"),
splice(
# over outcomes
unlist(lapply(outcomes_model, function(x) splice(unlist(lapply(cohort_to_run, function(y) apply_model_function(outcome = x)), recursive = FALSE))
),recursive = FALSE)))
## combine everything ----
project_list <- splice(
defaults_list,
list(actions = actions_list)
)
#####################################################################################
## convert list to yaml, reformat comments and white space, and output a .yaml file #
#####################################################################################
as.yaml(project_list, indent=2) %>%
# convert comment actions to comments
convert_comment_actions() %>%
# add one blank line before level 1 and level 2 keys
str_replace_all("\\\n(\\w)", "\n\n\\1") %>%
str_replace_all("\\\n\\s\\s(\\w)", "\n\n  \\1") %>%
writeLines("project.yaml")
View(df)
library(data.table); library(dplyr); library(survival); library(broom); library(DBI); library(ggplot2);
library(nlme); library(tidyverse); library(lubridate); library(purrr); library(parallel); library(stats);
library(utils); library(stringr); library(rms); library(readr)
args = commandArgs(trailingOnly=TRUE)
if(length(args)==0){
event_name="otherdm"
}else{
event_name  = args[[1]]
}
output_dir <- "output"
scripts_dir <- "analysis"
args = commandArgs(trailingOnly=TRUE)
if(length(args)==0){
event_name="depression"
}else{
event_name  = args[[1]]
}
# Specify directories ----------------------------------------------------------
output_dir <- "output"
scripts_dir <- "analysis"
# Source relevant files --------------------------------------------------------
source(file.path(scripts_dir,"analyses_to_run.R"))
source(file.path(scripts_dir,"02_pipe.R")) # Prepare dataset for model
source(file.path(scripts_dir,"extra_functions_for_cox_models.R"))
source(file.path(scripts_dir,paste0("call_mdl.R"))) # Model specification
ls_events_missing <- get(paste0("analyses_to_run"))
# ------------------------------------ LAUNCH JOBS -----------------------------
lapply(split(ls_events_missing,seq(nrow(ls_events_missing))),
function(ls_events_missing)
get_vacc_res(
event=ls_events_missing$event,
subgroup=ls_events_missing$subgroup,
stratify_by_subgroup=ls_events_missing$stratify_by_subgroup,
stratify_by=ls_events_missing$strata,
mdl=ls_events_missing$mdl,
input, cuts_days_since_expo,cuts_days_since_expo_reduced,covar_names)
)
#Save csv of anlayses not run
write.csv(analyses_not_run, paste0(output_dir,"/analyses_not_run_" , event_name ,"_", ".csv"), row.names = T)
#Combine all results into one .csv
source(file.path(scripts_dir, "format_tbls_HRs.R"))
args = commandArgs(trailingOnly=TRUE)
if(length(args)==0){
event_name="otherdm"
}else{
event_name  = args[[1]]
}
# Specify directories ----------------------------------------------------------
output_dir <- "output"
scripts_dir <- "analysis"
# Source relevant files --------------------------------------------------------
source(file.path(scripts_dir,"analyses_to_run.R"))
source(file.path(scripts_dir,"02_pipe.R")) # Prepare dataset for model
source(file.path(scripts_dir,"extra_functions_for_cox_models.R"))
source(file.path(scripts_dir,paste0("call_mdl.R"))) # Model specification
args = commandArgs(trailingOnly=TRUE)
if(length(args)==0){
event_name="depression"
}else{
event_name  = args[[1]]
}
# Specify directories ----------------------------------------------------------
output_dir <- "output"
scripts_dir <- "analysis"
# Source relevant files --------------------------------------------------------
source(file.path(scripts_dir,"analyses_to_run.R"))
source(file.path(scripts_dir,"02_pipe.R")) # Prepare dataset for model
source(file.path(scripts_dir,"extra_functions_for_cox_models.R"))
source(file.path(scripts_dir,paste0("call_mdl.R"))) # Model specification
ls_events_missing <- get(paste0("analyses_to_run"))
args = commandArgs(trailingOnly=TRUE)
if(length(args)==0){
event_name="otherdm"
}else{
event_name  = args[[1]]
}
# Specify directories ----------------------------------------------------------
output_dir <- "output"
scripts_dir <- "analysis"
# Source relevant files --------------------------------------------------------
source(file.path(scripts_dir,"analyses_to_run.R"))
source(file.path(scripts_dir,"02_pipe.R")) # Prepare dataset for model
source(file.path(scripts_dir,"extra_functions_for_cox_models.R"))
source(file.path(scripts_dir,paste0("call_mdl.R"))) # Model specification
ls_events_missing <- get(paste0("analyses_to_run"))
lapply(split(ls_events_missing,seq(nrow(ls_events_missing))),
function(ls_events_missing)
get_vacc_res(
event=ls_events_missing$event,
subgroup=ls_events_missing$subgroup,
stratify_by_subgroup=ls_events_missing$stratify_by_subgroup,
stratify_by=ls_events_missing$strata,
mdl=ls_events_missing$mdl,
input, cuts_days_since_expo,cuts_days_since_expo_reduced,covar_names)
)
#Save csv of anlayses not run
write.csv(analyses_not_run, paste0(output_dir,"/analyses_not_run_" , event_name ,"_", ".csv"), row.names = T)
#Combine all results into one .csv
source(file.path(scripts_dir, "format_tbls_HRs.R"))
## =============================================================================
## Pipeline (1): Control center, calls relevant analysis scripts, sets working
## and saving directories, parallelises processes
##
## Based on scripts written by Samantha Ip, see the following repo's for
## original scripts: https://github.com/BHFDSC/CCU002_01 & https://github.com/BHFDSC/CCU002_03
## =============================================================================
library(data.table); library(dplyr); library(survival); library(broom); library(DBI); library(ggplot2);
library(nlme); library(tidyverse); library(lubridate); library(purrr); library(parallel); library(stats);
library(utils); library(stringr); library(rms); library(readr)
args = commandArgs(trailingOnly=TRUE)
if(length(args)==0){
event_name="otherdm"
}else{
event_name  = args[[1]]
}
# Specify directories ----------------------------------------------------------
output_dir <- "output"
scripts_dir <- "analysis"
# Source relevant files --------------------------------------------------------
source(file.path(scripts_dir,"analyses_to_run.R"))
source(file.path(scripts_dir,"02_pipe.R")) # Prepare dataset for model
source(file.path(scripts_dir,"extra_functions_for_cox_models.R"))
source(file.path(scripts_dir,paste0("call_mdl.R"))) # Model specification
ls_events_missing <- get(paste0("analyses_to_run"))
# ------------------------------------ LAUNCH JOBS -----------------------------
lapply(split(ls_events_missing,seq(nrow(ls_events_missing))),
function(ls_events_missing)
get_vacc_res(
event=ls_events_missing$event,
subgroup=ls_events_missing$subgroup,
stratify_by_subgroup=ls_events_missing$stratify_by_subgroup,
stratify_by=ls_events_missing$strata,
mdl=ls_events_missing$mdl,
input, cuts_days_since_expo,cuts_days_since_expo_reduced,covar_names)
)
#Save csv of anlayses not run
write.csv(analyses_not_run, paste0(output_dir,"/analyses_not_run_" , event_name ,"_", ".csv"), row.names = T)
#Combine all results into one .csv
source(file.path(scripts_dir, "format_tbls_HRs.R"))
args = commandArgs(trailingOnly=TRUE)
if(length(args)==0){
event_name="depression"
}else{
event_name  = args[[1]]
}
# Specify directories ----------------------------------------------------------
output_dir <- "output"
scripts_dir <- "analysis"
# Source relevant files --------------------------------------------------------
source(file.path(scripts_dir,"analyses_to_run.R"))
source(file.path(scripts_dir,"02_pipe.R")) # Prepare dataset for model
source(file.path(scripts_dir,"extra_functions_for_cox_models.R"))
source(file.path(scripts_dir,paste0("call_mdl.R"))) # Model specification
ls_events_missing <- get(paste0("analyses_to_run"))
# ------------------------------------ LAUNCH JOBS -----------------------------
lapply(split(ls_events_missing,seq(nrow(ls_events_missing))),
function(ls_events_missing)
get_vacc_res(
event=ls_events_missing$event,
subgroup=ls_events_missing$subgroup,
stratify_by_subgroup=ls_events_missing$stratify_by_subgroup,
stratify_by=ls_events_missing$strata,
mdl=ls_events_missing$mdl,
input, cuts_days_since_expo,cuts_days_since_expo_reduced,covar_names)
)
#Save csv of anlayses not run
write.csv(analyses_not_run, paste0(output_dir,"/analyses_not_run_" , event_name ,"_", ".csv"), row.names = T)
#Combine all results into one .csv
source(file.path(scripts_dir, "format_tbls_HRs.R"))
# Create output directory ------------------------------------------------------
fs::dir_create(here::here("lib"))
# Create empty data frame ------------------------------------------------------
df <- data.frame(active = logical(),
outcome = character(),
outcome_variable = character(),
covariates = character(),
model = character(),
main = character(),
covid_history = character(),
covid_pheno_hospitalised = character(),
covid_pheno_non_hospitalised = character(),
agegp_18_39 = character(),
agegp_40_59 = character(),
agegp_60_79 = character(),
agegp_80_110 = character(),
sex_Male = character(),
sex_Female = character(),
ethnicity_White = character(),
ethnicity_Mixed = character(),
ethnicity_South_Asian = character(),
ethnicity_Black = character(),
ethnicity_Other = character(),
ethnicity_Missing = character(),
prior_history_TRUE = character(),
prior_history_FALSE = character(),
prior_history_var = character(),
venn = character(),
stringsAsFactors = FALSE)
# Add diabetes outcomes --------------------------------------------------------
outcomes <- c("type 1 diabetes",
"type 2 diabetes",
"other or non-specific diabetes",
"gestational diabetes")
outcomes_short <- c("t1dm","t2dm","otherdm","gestationaldm")
outcome_venn <- c(TRUE, TRUE, FALSE, FALSE)
# covariates listed in the order they are listed in the protocol
# cov_bin_lipid_medications;
# cov_bin_antiplatelet_medications;
# cov_bin_anticoagulation_medications;
# cov_bin_combined_oral_contraceptive_pill;
# cov_bin_hormone_replacement_therapy;
for (i in 1:length(outcomes)) {
df[nrow(df)+1,] <- c(TRUE,
outcomes[i],
paste0("out_date_",outcomes_short[i]),
"cov_cat_sex;cov_num_age;cov_cat_ethnicity;cov_cat_deprivation;cov_cat_region;cov_num_consulation_rate;cov_cat_smoking_status;cov_bin_obesity;cov_bin_ami;cov_bin_all_stroke;cov_bin_other_arterial_embolism;cov_bin_vte;cov_bin_hf;cov_bin_angina;cov_bin_dementia;cov_bin_liver_disease;cov_bin_chronic_kidney_disease;cov_bin_cancer;cov_bin_hypertension;cov_bin_depression;cov_bin_chronic_obstructive_pulmonary_disease;cov_bin_healthcare_worker;cov_bin_carehome_status;cov_num_tc_hdl_ratio;cov_cat_bmi_groups;cov_bin_hypertension_drugs_dmd;cov_bin_prediabetes;cov_bin_diabetes_gestational",
rep("all",1),
rep(TRUE,4),
rep(FALSE,14),
"",
outcome_venn[i])
}
# Add mental health outcomes --------------------------------------------------------
outcomes <- c("Depression",
"Anxiety - general",
"Anxiety - obsessive compulsive disorder",
"Anxiety - post traumatic stress disorder",
"Eating disorders",
"Serious mental illness",
"Self harm, aged >=10",
"Self harm, aged >=15",
"Suicide",
"Addiction")
outcomes_short <- c("depression",
"anxiety_general",
"anxiety_ocd",
"anxiety_ptsd",
"eating_disorders",
"serious_mental_illness",
"self_harm_10plus",
"self_harm_15plus",
"suicide",
"addiction")
out_venn <- c(TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE)
for (i in 1:length(outcomes)) {
df[nrow(df)+1,] <- c(TRUE,
outcomes[i],
paste0("out_date_",outcomes_short[i]),
"cov_num_consulation_rate;cov_bin_healthcare_worker;cov_num_age;cov_cat_ethnicity;cov_cat_deprivation;cov_cat_region;cov_cat_smoking_status;cov_bin_carehome_status;cov_cat_sex;cov_bin_lipid_medications;cov_bin_dementia;cov_bin_liver_disease;cov_bin_chronic_kidney_disease;cov_bin_cancer;cov_bin_hypertension;cov_bin_diabetes;cov_bin_obesity;cov_bin_chronic_obstructive_pulmonary_disease;cov_bin_depression;cov_bin_anxiety;cov_bin_eating_disorders;cov_bin_serious_mental_illness;cov_bin_self_harm",
rep("all",1),
rep(TRUE,4),
rep(FALSE,14),
"",
out_venn[i])
}
# Save active analyses list ----------------------------------------------------
saveRDS(df, file = "lib/active_analyses.rds")
View(df)
fs::dir_create(here::here("lib"))
# Create empty data frame ------------------------------------------------------
df <- data.frame(active = logical(),
outcome = character(),
outcome_variable = character(),
covariates = character(),
model = character(),
main = character(),
covid_pheno_hospitalised = character(),
covid_pheno_non_hospitalised = character(),
agegp_18_39 = character(),
agegp_40_59 = character(),
agegp_60_79 = character(),
agegp_80_110 = character(),
sex_Male = character(),
sex_Female = character(),
ethnicity_White = character(),
ethnicity_Mixed = character(),
ethnicity_South_Asian = character(),
ethnicity_Black = character(),
ethnicity_Other = character(),
ethnicity_Missing = character(),
prior_history_TRUE = character(),
prior_history_FALSE = character(),
prior_history_var = character(),
venn = character(),
stringsAsFactors = FALSE)
# Add diabetes outcomes --------------------------------------------------------
outcomes <- c("type 1 diabetes",
"type 2 diabetes",
"other or non-specific diabetes",
"gestational diabetes")
outcomes_short <- c("t1dm","t2dm","otherdm","gestationaldm")
outcome_venn <- c(TRUE, TRUE, FALSE, FALSE)
for (i in 1:length(outcomes)) {
df[nrow(df)+1,] <- c(TRUE,
outcomes[i],
paste0("out_date_",outcomes_short[i]),
"cov_cat_sex;cov_num_age;cov_cat_ethnicity;cov_cat_deprivation;cov_cat_region;cov_num_consulation_rate;cov_cat_smoking_status;cov_bin_obesity;cov_bin_ami;cov_bin_all_stroke;cov_bin_other_arterial_embolism;cov_bin_vte;cov_bin_hf;cov_bin_angina;cov_bin_dementia;cov_bin_liver_disease;cov_bin_chronic_kidney_disease;cov_bin_cancer;cov_bin_hypertension;cov_bin_depression;cov_bin_chronic_obstructive_pulmonary_disease;cov_bin_healthcare_worker;cov_bin_carehome_status;cov_num_tc_hdl_ratio;cov_cat_bmi_groups;cov_bin_hypertension_drugs_dmd;cov_bin_prediabetes;cov_bin_diabetes_gestational",
rep("all",1),
rep(TRUE,4),
rep(FALSE,14),
"",
outcome_venn[i])
}
# Create output directory ------------------------------------------------------
fs::dir_create(here::here("lib"))
# Create empty data frame ------------------------------------------------------
df <- data.frame(active = logical(),
outcome = character(),
outcome_variable = character(),
covariates = character(),
model = character(),
main = character(),
covid_pheno_hospitalised = character(),
covid_pheno_non_hospitalised = character(),
agegp_18_39 = character(),
agegp_40_59 = character(),
agegp_60_79 = character(),
agegp_80_110 = character(),
sex_Male = character(),
sex_Female = character(),
ethnicity_White = character(),
ethnicity_Mixed = character(),
ethnicity_South_Asian = character(),
ethnicity_Black = character(),
ethnicity_Other = character(),
ethnicity_Missing = character(),
prior_history_TRUE = character(),
prior_history_FALSE = character(),
prior_history_var = character(),
venn = character(),
stringsAsFactors = FALSE)
# Add diabetes outcomes --------------------------------------------------------
outcomes <- c("type 1 diabetes",
"type 2 diabetes",
"other or non-specific diabetes",
"gestational diabetes")
outcomes_short <- c("t1dm","t2dm","otherdm","gestationaldm")
outcome_venn <- c(TRUE, TRUE, FALSE, FALSE)
for (i in 1:length(outcomes)) {
df[nrow(df)+1,] <- c(TRUE,
outcomes[i],
paste0("out_date_",outcomes_short[i]),
"cov_cat_sex;cov_num_age;cov_cat_ethnicity;cov_cat_deprivation;cov_cat_region;cov_num_consulation_rate;cov_cat_smoking_status;cov_bin_obesity;cov_bin_ami;cov_bin_all_stroke;cov_bin_other_arterial_embolism;cov_bin_vte;cov_bin_hf;cov_bin_angina;cov_bin_dementia;cov_bin_liver_disease;cov_bin_chronic_kidney_disease;cov_bin_cancer;cov_bin_hypertension;cov_bin_depression;cov_bin_chronic_obstructive_pulmonary_disease;cov_bin_healthcare_worker;cov_bin_carehome_status;cov_num_tc_hdl_ratio;cov_cat_bmi_groups;cov_bin_hypertension_drugs_dmd;cov_bin_prediabetes;cov_bin_diabetes_gestational",
rep("all",1),
rep(TRUE,3),
rep(FALSE,14),
"",
outcome_venn[i])
}
View(df)
# Create output directory ------------------------------------------------------
fs::dir_create(here::here("lib"))
# Create empty data frame ------------------------------------------------------
df <- data.frame(active = logical(),
outcome = character(),
outcome_variable = character(),
covariates = character(),
model = character(),
main = character(),
covid_pheno_hospitalised = character(),
covid_pheno_non_hospitalised = character(),
agegp_18_39 = character(),
agegp_40_59 = character(),
agegp_60_79 = character(),
agegp_80_110 = character(),
sex_Male = character(),
sex_Female = character(),
ethnicity_White = character(),
ethnicity_Mixed = character(),
ethnicity_South_Asian = character(),
ethnicity_Black = character(),
ethnicity_Other = character(),
ethnicity_Missing = character(),
prior_history_TRUE = character(),
prior_history_FALSE = character(),
prior_history_var = character(),
venn = character(),
stringsAsFactors = FALSE)
# Add diabetes outcomes --------------------------------------------------------
outcomes <- c("type 1 diabetes",
"type 2 diabetes",
"other or non-specific diabetes",
"gestational diabetes")
outcomes_short <- c("t1dm","t2dm","otherdm","gestationaldm")
outcome_venn <- c(TRUE, TRUE, FALSE, FALSE)
for (i in 1:length(outcomes)) {
df[nrow(df)+1,] <- c(TRUE,
outcomes[i],
paste0("out_date_",outcomes_short[i]),
"cov_cat_sex;cov_num_age;cov_cat_ethnicity;cov_cat_deprivation;cov_cat_region;cov_num_consulation_rate;cov_cat_smoking_status;cov_bin_obesity;cov_bin_ami;cov_bin_all_stroke;cov_bin_other_arterial_embolism;cov_bin_vte;cov_bin_hf;cov_bin_angina;cov_bin_dementia;cov_bin_liver_disease;cov_bin_chronic_kidney_disease;cov_bin_cancer;cov_bin_hypertension;cov_bin_depression;cov_bin_chronic_obstructive_pulmonary_disease;cov_bin_healthcare_worker;cov_bin_carehome_status;cov_num_tc_hdl_ratio;cov_cat_bmi_groups;cov_bin_hypertension_drugs_dmd;cov_bin_prediabetes;cov_bin_diabetes_gestational",
rep("all",1),
rep(TRUE,3),
rep(FALSE,14),
"",
outcome_venn[i])
}
# Add mental health outcomes --------------------------------------------------------
outcomes <- c("Depression",
"Anxiety - general",
"Anxiety - obsessive compulsive disorder",
"Anxiety - post traumatic stress disorder",
"Eating disorders",
"Serious mental illness",
"Self harm, aged >=10",
"Self harm, aged >=15",
"Suicide",
"Addiction")
outcomes_short <- c("depression",
"anxiety_general",
"anxiety_ocd",
"anxiety_ptsd",
"eating_disorders",
"serious_mental_illness",
"self_harm_10plus",
"self_harm_15plus",
"suicide",
"addiction")
out_venn <- c(TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE)
for (i in 1:length(outcomes)) {
df[nrow(df)+1,] <- c(TRUE,
outcomes[i],
paste0("out_date_",outcomes_short[i]),
"cov_num_consulation_rate;cov_bin_healthcare_worker;cov_num_age;cov_cat_ethnicity;cov_cat_deprivation;cov_cat_region;cov_cat_smoking_status;cov_bin_carehome_status;cov_cat_sex;cov_bin_lipid_medications;cov_bin_dementia;cov_bin_liver_disease;cov_bin_chronic_kidney_disease;cov_bin_cancer;cov_bin_hypertension;cov_bin_diabetes;cov_bin_obesity;cov_bin_chronic_obstructive_pulmonary_disease;cov_bin_depression;cov_bin_anxiety;cov_bin_eating_disorders;cov_bin_serious_mental_illness;cov_bin_self_harm",
rep("all",1),
rep(TRUE,3),
rep(FALSE,14),
"",
out_venn[i])
}
# Save active analyses list ----------------------------------------------------
saveRDS(df, file = "lib/active_analyses.rds")
View(df)
args = commandArgs(trailingOnly=TRUE)
if(length(args)==0){
event_name="anxiety_ocd"
}else{
event_name  = args[[1]]
}
# Specify directories ----------------------------------------------------------
output_dir <- "output"
scripts_dir <- "analysis"
# Source relevant files --------------------------------------------------------
source(file.path(scripts_dir,"analyses_to_run.R"))
source(file.path(scripts_dir,"02_pipe.R")) # Prepare dataset for model
source(file.path(scripts_dir,"extra_functions_for_cox_models.R"))
source(file.path(scripts_dir,paste0("call_mdl.R"))) # Model specification
ls_events_missing <- get(paste0("analyses_to_run"))
# ------------------------------------ LAUNCH JOBS -----------------------------
lapply(split(ls_events_missing,seq(nrow(ls_events_missing))),
function(ls_events_missing)
get_vacc_res(
event=ls_events_missing$event,
subgroup=ls_events_missing$subgroup,
stratify_by_subgroup=ls_events_missing$stratify_by_subgroup,
stratify_by=ls_events_missing$strata,
mdl=ls_events_missing$mdl,
input, cuts_days_since_expo,cuts_days_since_expo_reduced,covar_names)
)
#Save csv of anlayses not run
write.csv(analyses_not_run, paste0(output_dir,"/analyses_not_run_" , event_name ,"_", ".csv"), row.names = T)
#Combine all results into one .csv
source(file.path(scripts_dir, "format_tbls_HRs.R"))
