# relevel deprivation
mutate(cov_cat_deprivation_tmp = relevel(covars$cov_cat_deprivation_tmp, ref = as.character(calculate_mode(covars$cov_cat_deprivation_tmp))))
levels(covars$cov_cat_deprivation)[levels(covars$cov_cat_deprivation)==1 | levels(covars$cov_cat_deprivation)==2] <-"1-2 (most deprived)"
levels(covars$cov_cat_deprivation)[levels(covars$cov_cat_deprivation)==3 | levels(covars$cov_cat_deprivation)==4] <-"3-4"
levels(covars$cov_cat_deprivation)[levels(covars$cov_cat_deprivation)==5 | levels(covars$cov_cat_deprivation)==6] <-"5-6"
levels(covars$cov_cat_deprivation)[levels(covars$cov_cat_deprivation)==7 | levels(covars$cov_cat_deprivation)==8] <-"7-8"
levels(covars$cov_cat_deprivation)[levels(covars$cov_cat_deprivation)==9 | levels(covars$cov_cat_deprivation)==10] <-"9-10 (least deprived)"
covars$cov_cat_deprivation = relevel(covars$cov_cat_deprivation, ref = as.character(calculate_mode(covars$cov_cat_deprivation))) # added
table(covars$cov_cat_deprivation)
table(covars$cov_cat_deprivation_tmp)
## =============================================================================
## Project:     Post covid unvaccinated project
##
##
## Purpose:  Apply stage 1. Data cleaning
##  - Prepare variables
##  - Apply QA rules
##  - Apply inclusion exclusion criteria
##  - Create cleaned dataset
##
## Authors: Yinghui Wei, Renin Toms, Rochelle Knight, Genevieve Cezard, Rachel Denholm, Kurt Taylor
## Reviewer:
##
##
## Content:
## 0. Load relevant libraries and read data/arguments
## 1. Prepare all variables (re-factoring, re-typing)
##    1.a. Set factor variables as factor
##    1.b. Set the group with the highest frequency as the reference group
##    1.c. Check that continuous variables are defined as numeric variables
##    1.d. Check and specify date format for date variables
##    1.e. Apply changes in the input dataset
##    1.f. Derive diabetes outcomes using algorithm
## 2. Apply QA rules
## 3. Apply exclusion/inclusion criteria
##    (Differentiate criteria for the two sub-cohorts)
##    3.a. Define index start date and general end date
##    3.b. Apply the criteria
##    3.d. Create csv file
## 4. Create the final stage 1 dataset
##
## NOTE: This code output are 3 .csv files and 1 R dataset
##       Output files have a specific name to reflect either the Vaccinated
##       or Electively unvaccinated cohort
##
## =============================================================================
###############################################
# 0. Load relevant libraries and read in data #
###############################################
library(readr)
library(dplyr)
library(stringr)
library(tidyverse)
# Input dataset
input <-read_rds("output/input.rds")
# Define general start date and end date
start_date = as.Date("2020-01-01")
end_date = as.Date("2021-06-18") # General End date: 2021-06-18 (date last JCVI group eligible for vaccination - Decision on Jan 18th 2022)
# NOTE: no censoring of end date for death/event at this stage
######################################################
# 1. Prepare all variables (re-factoring, re-typing) #
######################################################
# handle missing values
input$cov_cat_smoking_status <- replace(input$cov_cat_smoking_status, is.na(input$cov_cat_smoking_status),"M")
# Extract names of variables
variable_names <- tidyselect::vars_select(names(input), starts_with(c('cov_','qa_','exp_cat','vax_cat', 'sub_cat'), ignore.case = TRUE))
# Create a data frame for all relevant variables
covars <- input[,variable_names] #View(covars)
# Replace " " with "_"
covars$cov_cat_region <- gsub(" ", "_", covars$cov_cat_region)
#-------------------------------------#
# 1.a. Set factor variables as factor #
#-------------------------------------#
# Get the names of variables which are factors
factor_names <- tidyselect::vars_select(names(input), starts_with(c('cov_bin','cov_cat','qa_bin','exp_cat','vax_cat', 'sub_cat'), ignore.case = TRUE))
# Set the variables that should be factor variables as factor
covars <- covars %>%
mutate(across(contains(c('cov_bin','cov_cat','qa_bin','exp_cat','vax_cat', 'sub_cat')), ~ as.factor(.)))
# Sort factor level alphabetically
mk_factor_orderlevels <- function(covars, colname)
{
covars <- covars %>% mutate(
!!sym(colname) := factor(!!sym(colname), levels = str_sort(unique(covars[[colname]]), numeric = TRUE)))
return(covars)
}
for (colname in factor_names){
#print(colname)
covars <- mk_factor_orderlevels(covars, colname)
}
#----------------------------------------------------------------------#
# 1.b. Set the group with the highest frequency as the reference group #
#----------------------------------------------------------------------#
# Function to find mode in a factor variable
calculate_mode <- function(x) {
uniqx <- unique(na.omit(x))
uniqx[which.max(tabulate(match(x, uniqx)))]
}
# For the following variables, the first level (reference level) is not the one with the highest frequency
# Set the most frequently occurred level as the reference for a factor variable
covars <- covars %>%
mutate(cov_cat_ethnicity = relevel(covars$cov_cat_ethnicity, ref = as.character(calculate_mode(covars$cov_cat_ethnicity))),
cov_cat_smoking_status = relevel(covars$cov_cat_smoking_status, ref = as.character(calculate_mode(covars$cov_cat_smoking_status))),
cov_cat_region = relevel(covars$cov_cat_region, ref = as.character(calculate_mode(covars$cov_cat_region))),
sub_cat_covid19_hospital = relevel(covars$sub_cat_covid19_hospital, ref = as.character(calculate_mode(covars$sub_cat_covid19_hospital))),
vax_cat_jcvi_group = relevel(covars$vax_cat_jcvi_group, ref = as.character(calculate_mode(covars$vax_cat_jcvi_group)))) %>%
# Combine groups in deprivation: First - most deprived; fifth -least deprived
mutate(cov_cat_deprivation_tmp = ifelse(cov_cat_deprivation == 1 | cov_cat_deprivation == 2, "1-2 (most deprived)",
ifelse(cov_cat_deprivation == 3 | cov_cat_deprivation == 4, "3-4",
ifelse(cov_cat_deprivation == 5 | cov_cat_deprivation == 6, "5-6",
ifelse(cov_cat_deprivation == 7 | cov_cat_deprivation == 8, "7-8",
ifelse(cov_cat_deprivation == 9 | cov_cat_deprivation == 10, "9-10 (least deprived)", NA)))))) %>%
mutate_at(vars(cov_cat_deprivation_tmp), as.factor) %>%
# relevel deprivation
mutate(cov_cat_deprivation_tmp = relevel(covars$cov_cat_deprivation_tmp, ref = as.character(calculate_mode(covars$cov_cat_deprivation_tmp))))
levels(covars$cov_cat_deprivation)[levels(covars$cov_cat_deprivation)==1 | levels(covars$cov_cat_deprivation)==2] <-"1-2 (most deprived)"
levels(covars$cov_cat_deprivation)[levels(covars$cov_cat_deprivation)==3 | levels(covars$cov_cat_deprivation)==4] <-"3-4"
levels(covars$cov_cat_deprivation)[levels(covars$cov_cat_deprivation)==5 | levels(covars$cov_cat_deprivation)==6] <-"5-6"
levels(covars$cov_cat_deprivation)[levels(covars$cov_cat_deprivation)==7 | levels(covars$cov_cat_deprivation)==8] <-"7-8"
levels(covars$cov_cat_deprivation)[levels(covars$cov_cat_deprivation)==9 | levels(covars$cov_cat_deprivation)==10] <-"9-10 (least deprived)"
covars$cov_cat_deprivation = relevel(covars$cov_cat_deprivation, ref = as.character(calculate_mode(covars$cov_cat_deprivation))) # added
# For the following variables, the first level (reference level) is not the one with the highest frequency
# Set the most frequently occurred level as the reference for a factor variable
covars <- covars %>%
mutate(cov_cat_ethnicity = relevel(covars$cov_cat_ethnicity, ref = as.character(calculate_mode(covars$cov_cat_ethnicity))),
cov_cat_smoking_status = relevel(covars$cov_cat_smoking_status, ref = as.character(calculate_mode(covars$cov_cat_smoking_status))),
cov_cat_region = relevel(covars$cov_cat_region, ref = as.character(calculate_mode(covars$cov_cat_region))),
sub_cat_covid19_hospital = relevel(covars$sub_cat_covid19_hospital, ref = as.character(calculate_mode(covars$sub_cat_covid19_hospital))),
vax_cat_jcvi_group = relevel(covars$vax_cat_jcvi_group, ref = as.character(calculate_mode(covars$vax_cat_jcvi_group)))) %>%
# Combine groups in deprivation: First - most deprived; fifth -least deprived
mutate(cov_cat_deprivation_tmp = ifelse(cov_cat_deprivation == 1 | cov_cat_deprivation == 2, "1-2 (most deprived)",
ifelse(cov_cat_deprivation == 3 | cov_cat_deprivation == 4, "3-4",
ifelse(cov_cat_deprivation == 5 | cov_cat_deprivation == 6, "5-6",
ifelse(cov_cat_deprivation == 7 | cov_cat_deprivation == 8, "7-8",
ifelse(cov_cat_deprivation == 9 | cov_cat_deprivation == 10, "9-10 (least deprived)", NA)))))) %>%
mutate_at(vars(cov_cat_deprivation_tmp), as.factor)
calculate_mode <- function(x) {
uniqx <- unique(na.omit(x))
uniqx[which.max(tabulate(match(x, uniqx)))]
}
# For the following variables, the first level (reference level) is not the one with the highest frequency
# Set the most frequently occurred level as the reference for a factor variable
covars <- covars %>%
mutate(cov_cat_ethnicity = relevel(covars$cov_cat_ethnicity, ref = as.character(calculate_mode(covars$cov_cat_ethnicity))),
cov_cat_smoking_status = relevel(covars$cov_cat_smoking_status, ref = as.character(calculate_mode(covars$cov_cat_smoking_status))),
cov_cat_region = relevel(covars$cov_cat_region, ref = as.character(calculate_mode(covars$cov_cat_region))),
sub_cat_covid19_hospital = relevel(covars$sub_cat_covid19_hospital, ref = as.character(calculate_mode(covars$sub_cat_covid19_hospital))),
vax_cat_jcvi_group = relevel(covars$vax_cat_jcvi_group, ref = as.character(calculate_mode(covars$vax_cat_jcvi_group)))) %>%
# Combine groups in deprivation: First - most deprived; fifth -least deprived
mutate(cov_cat_deprivation_tmp = ifelse(cov_cat_deprivation == 1 | cov_cat_deprivation == 2, "1-2 (most deprived)",
ifelse(cov_cat_deprivation == 3 | cov_cat_deprivation == 4, "3-4",
ifelse(cov_cat_deprivation == 5 | cov_cat_deprivation == 6, "5-6",
ifelse(cov_cat_deprivation == 7 | cov_cat_deprivation == 8, "7-8",
ifelse(cov_cat_deprivation == 9 | cov_cat_deprivation == 10, "9-10 (least deprived)", NA)))))) %>%
mutate_at(vars(cov_cat_deprivation_tmp), as.factor) %>%
# relevel deprivation
mutate(cov_cat_deprivation_tmp = relevel(covars$cov_cat_deprivation_tmp, ref = as.character(calculate_mode(covars$cov_cat_deprivation_tmp))))
levels(covars$cov_cat_deprivation)[levels(covars$cov_cat_deprivation)==1 | levels(covars$cov_cat_deprivation)==2] <-"1-2 (most deprived)"
levels(covars$cov_cat_deprivation)[levels(covars$cov_cat_deprivation)==3 | levels(covars$cov_cat_deprivation)==4] <-"3-4"
levels(covars$cov_cat_deprivation)[levels(covars$cov_cat_deprivation)==5 | levels(covars$cov_cat_deprivation)==6] <-"5-6"
levels(covars$cov_cat_deprivation)[levels(covars$cov_cat_deprivation)==7 | levels(covars$cov_cat_deprivation)==8] <-"7-8"
levels(covars$cov_cat_deprivation)[levels(covars$cov_cat_deprivation)==9 | levels(covars$cov_cat_deprivation)==10] <-"9-10 (least deprived)"
covars$cov_cat_deprivation = relevel(covars$cov_cat_deprivation, ref = as.character(calculate_mode(covars$cov_cat_deprivation))) # added
covars <- covars %>%
mutate(cov_cat_ethnicity = relevel(covars$cov_cat_ethnicity, ref = as.character(calculate_mode(covars$cov_cat_ethnicity))),
cov_cat_smoking_status = relevel(covars$cov_cat_smoking_status, ref = as.character(calculate_mode(covars$cov_cat_smoking_status))),
cov_cat_region = relevel(covars$cov_cat_region, ref = as.character(calculate_mode(covars$cov_cat_region))),
sub_cat_covid19_hospital = relevel(covars$sub_cat_covid19_hospital, ref = as.character(calculate_mode(covars$sub_cat_covid19_hospital))),
vax_cat_jcvi_group = relevel(covars$vax_cat_jcvi_group, ref = as.character(calculate_mode(covars$vax_cat_jcvi_group))))
covars <- covars %>%
mutate(cov_cat_ethnicity = relevel(cov_cat_ethnicity, ref = as.character(calculate_mode(cov_cat_ethnicity))),
cov_cat_smoking_status = relevel(covars$cov_cat_smoking_status, ref = as.character(calculate_mode(covars$cov_cat_smoking_status))),
cov_cat_region = relevel(covars$cov_cat_region, ref = as.character(calculate_mode(covars$cov_cat_region))),
sub_cat_covid19_hospital = relevel(covars$sub_cat_covid19_hospital, ref = as.character(calculate_mode(covars$sub_cat_covid19_hospital))),
vax_cat_jcvi_group = relevel(covars$vax_cat_jcvi_group, ref = as.character(calculate_mode(covars$vax_cat_jcvi_group))))
## 3. Apply exclusion/inclusion criteria
##    (Differentiate criteria for the two sub-cohorts)
##    3.a. Define index start date and general end date
##    3.b. Apply the criteria
##    3.d. Create csv file
## 4. Create the final stage 1 dataset
##
## NOTE: This code output are 3 .csv files and 1 R dataset
##       Output files have a specific name to reflect either the Vaccinated
##       or Electively unvaccinated cohort
##
## =============================================================================
###############################################
# 0. Load relevant libraries and read in data #
###############################################
library(readr)
library(dplyr)
library(stringr)
library(tidyverse)
# Input dataset
input <-read_rds("output/input.rds")
# Define general start date and end date
start_date = as.Date("2020-01-01")
end_date = as.Date("2021-06-18") # General End date: 2021-06-18 (date last JCVI group eligible for vaccination - Decision on Jan 18th 2022)
# NOTE: no censoring of end date for death/event at this stage
######################################################
# 1. Prepare all variables (re-factoring, re-typing) #
######################################################
# handle missing values
input$cov_cat_smoking_status <- replace(input$cov_cat_smoking_status, is.na(input$cov_cat_smoking_status),"M")
# Extract names of variables
variable_names <- tidyselect::vars_select(names(input), starts_with(c('cov_','qa_','exp_cat','vax_cat', 'sub_cat'), ignore.case = TRUE))
# Create a data frame for all relevant variables
covars <- input[,variable_names] #View(covars)
# Replace " " with "_"
covars$cov_cat_region <- gsub(" ", "_", covars$cov_cat_region)
#-------------------------------------#
# 1.a. Set factor variables as factor #
#-------------------------------------#
# Get the names of variables which are factors
factor_names <- tidyselect::vars_select(names(input), starts_with(c('cov_bin','cov_cat','qa_bin','exp_cat','vax_cat', 'sub_cat'), ignore.case = TRUE))
# Set the variables that should be factor variables as factor
covars <- covars %>%
mutate(across(contains(c('cov_bin','cov_cat','qa_bin','exp_cat','vax_cat', 'sub_cat')), ~ as.factor(.)))
# Sort factor level alphabetically
mk_factor_orderlevels <- function(covars, colname)
{
covars <- covars %>% mutate(
!!sym(colname) := factor(!!sym(colname), levels = str_sort(unique(covars[[colname]]), numeric = TRUE)))
return(covars)
}
for (colname in factor_names){
#print(colname)
covars <- mk_factor_orderlevels(covars, colname)
}
#----------------------------------------------------------------------#
# 1.b. Set the group with the highest frequency as the reference group #
#----------------------------------------------------------------------#
# Function to find mode in a factor variable
calculate_mode <- function(x) {
uniqx <- unique(na.omit(x))
uniqx[which.max(tabulate(match(x, uniqx)))]
}
# For the following variables, the first level (reference level) is not the one with the highest frequency
# Set the most frequently occurred level as the reference for a factor variable
covars <- covars %>%
mutate(cov_cat_ethnicity = relevel(cov_cat_ethnicity, ref = as.character(calculate_mode(cov_cat_ethnicity))),
cov_cat_smoking_status = relevel(cov_cat_smoking_status, ref = as.character(calculate_mode(cov_cat_smoking_status))),
cov_cat_region = relevel(cov_cat_region, ref = as.character(calculate_mode(cov_cat_region))),
sub_cat_covid19_hospital = relevel(sub_cat_covid19_hospital, ref = as.character(calculate_mode(sub_cat_covid19_hospital))),
vax_cat_jcvi_group = relevel(vax_cat_jcvi_group, ref = as.character(calculate_mode(vax_cat_jcvi_group)))) %>%
# Combine groups in deprivation: First - most deprived; fifth -least deprived
mutate(cov_cat_deprivation_tmp = ifelse(cov_cat_deprivation == 1 | cov_cat_deprivation == 2, "1-2 (most deprived)",
ifelse(cov_cat_deprivation == 3 | cov_cat_deprivation == 4, "3-4",
ifelse(cov_cat_deprivation == 5 | cov_cat_deprivation == 6, "5-6",
ifelse(cov_cat_deprivation == 7 | cov_cat_deprivation == 8, "7-8",
ifelse(cov_cat_deprivation == 9 | cov_cat_deprivation == 10, "9-10 (least deprived)", NA)))))) %>%
mutate_at(vars(cov_cat_deprivation_tmp), as.factor) %>%
# relevel deprivation
mutate(cov_cat_deprivation_tmp = relevel(cov_cat_deprivation_tmp, ref = as.character(calculate_mode(cov_cat_deprivation_tmp))))
levels(covars$cov_cat_deprivation)[levels(covars$cov_cat_deprivation)==1 | levels(covars$cov_cat_deprivation)==2] <-"1-2 (most deprived)"
levels(covars$cov_cat_deprivation)[levels(covars$cov_cat_deprivation)==3 | levels(covars$cov_cat_deprivation)==4] <-"3-4"
levels(covars$cov_cat_deprivation)[levels(covars$cov_cat_deprivation)==5 | levels(covars$cov_cat_deprivation)==6] <-"5-6"
levels(covars$cov_cat_deprivation)[levels(covars$cov_cat_deprivation)==7 | levels(covars$cov_cat_deprivation)==8] <-"7-8"
levels(covars$cov_cat_deprivation)[levels(covars$cov_cat_deprivation)==9 | levels(covars$cov_cat_deprivation)==10] <-"9-10 (least deprived)"
covars$cov_cat_deprivation = relevel(covars$cov_cat_deprivation, ref = as.character(calculate_mode(covars$cov_cat_deprivation))) # added
table(covars$cov_cat_deprivation)
table(covars$cov_cat_deprivation_tmp)
class(covars$cov_cat_deprivation_tmp)
class(covars$cov_cat_deprivation)
levels(covars$cov_cat_deprivation)
levels(covars$cov_cat_deprivation_tmp)
# A simple check if factor reference level has changed
lapply(covars[,c("cov_cat_ethnicity", "cov_cat_smoking_status", "cov_cat_region","cov_cat_deprivation","sub_cat_covid19_hospital","vax_cat_jcvi_group")], table)
meta_data_factors <- lapply(covars[,factor_names], table)
library(readr)
library(dplyr)
library(stringr)
library(tidyverse)
# Input dataset
input <-read_rds("output/input.rds")
# Define general start date and end date
start_date = as.Date("2020-01-01")
end_date = as.Date("2021-06-18") # General End date: 2021-06-18 (date last JCVI group eligible for vaccination - Decision on Jan 18th 2022)
# Input dataset
input <-read_rds("output/input.rds")
# Define general start date and end date
start_date = as.Date("2020-01-01")
end_date = as.Date("2021-06-18") # General End date: 2021-06-18 (date last JCVI group eligible for vaccination - Decision on Jan 18th 2022)
# NOTE: no censoring of end date for death/event at this stage
######################################################
# 1. Prepare all variables (re-factoring, re-typing) #
######################################################
# handle missing values
input$cov_cat_smoking_status <- replace(input$cov_cat_smoking_status, is.na(input$cov_cat_smoking_status),"M")
# Extract names of variables
variable_names <- tidyselect::vars_select(names(input), starts_with(c('cov_','qa_','exp_cat','vax_cat', 'sub_cat'), ignore.case = TRUE))
# Create a data frame for all relevant variables
covars <- input[,variable_names] #View(covars)
# Replace " " with "_"
covars$cov_cat_region <- gsub(" ", "_", covars$cov_cat_region)
#-------------------------------------#
# 1.a. Set factor variables as factor #
#-------------------------------------#
# Get the names of variables which are factors
factor_names <- tidyselect::vars_select(names(input), starts_with(c('cov_bin','cov_cat','qa_bin','exp_cat','vax_cat', 'sub_cat'), ignore.case = TRUE))
# Set the variables that should be factor variables as factor
covars <- covars %>%
mutate(across(contains(c('cov_bin','cov_cat','qa_bin','exp_cat','vax_cat', 'sub_cat')), ~ as.factor(.)))
# Sort factor level alphabetically
mk_factor_orderlevels <- function(covars, colname)
{
covars <- covars %>% mutate(
!!sym(colname) := factor(!!sym(colname), levels = str_sort(unique(covars[[colname]]), numeric = TRUE)))
return(covars)
}
for (colname in factor_names){
#print(colname)
covars <- mk_factor_orderlevels(covars, colname)
}
#----------------------------------------------------------------------#
# 1.b. Set the group with the highest frequency as the reference group #
#----------------------------------------------------------------------#
# Function to find mode in a factor variable
calculate_mode <- function(x) {
uniqx <- unique(na.omit(x))
uniqx[which.max(tabulate(match(x, uniqx)))]
}
# For the following variables, the first level (reference level) is not the one with the highest frequency
# Set the most frequently occurred level as the reference for a factor variable
covars <- covars %>%
mutate(cov_cat_ethnicity = relevel(cov_cat_ethnicity, ref = as.character(calculate_mode(cov_cat_ethnicity))),
cov_cat_smoking_status = relevel(cov_cat_smoking_status, ref = as.character(calculate_mode(cov_cat_smoking_status))),
cov_cat_region = relevel(cov_cat_region, ref = as.character(calculate_mode(cov_cat_region))),
sub_cat_covid19_hospital = relevel(sub_cat_covid19_hospital, ref = as.character(calculate_mode(sub_cat_covid19_hospital))),
vax_cat_jcvi_group = relevel(vax_cat_jcvi_group, ref = as.character(calculate_mode(vax_cat_jcvi_group)))) %>%
# Combine groups in deprivation: First - most deprived; fifth -least deprived
mutate(cov_cat_deprivation = ifelse(cov_cat_deprivation == 1 | cov_cat_deprivation == 2, "1-2 (most deprived)",
ifelse(cov_cat_deprivation == 3 | cov_cat_deprivation == 4, "3-4",
ifelse(cov_cat_deprivation == 5 | cov_cat_deprivation == 6, "5-6",
ifelse(cov_cat_deprivation == 7 | cov_cat_deprivation == 8, "7-8",
ifelse(cov_cat_deprivation == 9 | cov_cat_deprivation == 10, "9-10 (least deprived)", NA)))))) %>%
mutate_at(vars(cov_cat_deprivation), as.factor) %>%
# relevel deprivation
mutate(cov_cat_deprivation = relevel(cov_cat_deprivation, ref = as.character(calculate_mode(cov_cat_deprivation))))
# A simple check if factor reference level has changed
lapply(covars[,c("cov_cat_ethnicity", "cov_cat_smoking_status", "cov_cat_region","cov_cat_deprivation","sub_cat_covid19_hospital","vax_cat_jcvi_group")], table)
meta_data_factors <- lapply(covars[,factor_names], table)
# Save meta data
sink(file = file.path("output", paste0("meta_data_factors.csv")))
print(meta_data_factors)
sink()
library(magrittr)
library(tidyverse)
# Define parameters ------------------------------------------------------------
## Study start date
study_start <- "2020-01-01"
## Load dataset
df <- arrow::read_feather(file = "output/input.feather")
# Format columns -----------------------------------------------------
# dates, numerics, factors, logicals
df <- df %>%
rename(tmp_out_max_hba1c_mmol_mol_date = tmp_out_num_max_hba1c_mmol_mol_date) %>%
mutate(across(contains('_date'), ~ as.Date(as.character(.)))) %>%
mutate(across(contains('_birth_year'), ~ format(as.Date(.), "%Y"))) %>%
mutate(across(contains('_num'), ~ as.numeric(.))) %>%
mutate(across(contains('_cat'), ~ as.factor(.))) %>%
mutate(across(contains('_bin'), ~ as.logical(.)))
# Define COVID-19 severity --------------------------------------------------------------
df <- df %>%
mutate(sub_cat_covid19_hospital =
ifelse(!is.na(exp_date_covid19_confirmed) &
!is.na(sub_date_covid19_hospital) &
sub_date_covid19_hospital - exp_date_covid19_confirmed >= 0 &
sub_date_covid19_hospital - exp_date_covid19_confirmed < 29, "hospitalised",
ifelse(!is.na(exp_date_covid19_confirmed), "non_hospitalised",
ifelse(is.na(exp_date_covid19_confirmed), "no_infection", NA)))) %>%
mutate(across(sub_cat_covid19_hospital, factor))
# Define diabetes outcome (using Sophie Eastwood algorithm) ----------------------------
# define variables needed for diabetes algorithm
df <- df %>% mutate(tmp_out_date_first_diabetes_diag = format(tmp_out_date_first_diabetes_diag,"%Y")) %>%
mutate(tmp_out_date_first_diabetes_diag = as.integer(tmp_out_date_first_diabetes_diag),
age_1st_diag = tmp_out_date_first_diabetes_diag - qa_num_birth_year) %>%
mutate(age_1st_diag = replace(age_1st_diag, which(age_1st_diag < 0), NA),
age_under_35_30_1st_diag = ifelse(!is.na(age_1st_diag) &
(age_1st_diag < 35 &
(cov_cat_ethnicity == 1 | cov_cat_ethnicity == 5)) |
(age_1st_diag < 30 &
(cov_cat_ethnicity == 2 | cov_cat_ethnicity == 3 | cov_cat_ethnicity == 4)), "Yes", "No"),
over5_pocc = ifelse(!is.na(tmp_out_count_poccdm_snomed) &
(tmp_out_count_poccdm_snomed > 5), "Yes", "No"))
summary(df$age_1st_diag)
df <- df %>%
# Step 1. Any gestational diabetes code?
mutate(step_1 = ifelse(!is.na(out_date_gestationaldm), "Yes", "No")) %>%
# Step 1a. Any T1/ T2 diagnostic codes present? Denominator for step 1a is those with yes to step 1
mutate(step_1a = ifelse(step_1 == "Yes" &
(!is.na(out_date_t1dm) | !is.na(out_date_t2dm)), "Yes",
ifelse(step_1 == "Yes" &
is.na(out_date_t1dm) &
is.na(out_date_t2dm), "No", NA))) %>%
# Step 2. Non-metformin antidiabetic denominator for step 2: no to step 1 or yes to step 1a
mutate(step_2 = ifelse((step_1 == "No" | step_1a == "Yes" ) &
!is.na(tmp_out_date_nonmetform_drugs_snomed), "Yes",
ifelse((step_1 == "No" | step_1a == "Yes") &
is.na(tmp_out_date_nonmetform_drugs_snomed), "No", NA))) %>%
# Step 3. Type 1 code in the absence of type 2 code? denominator for step 3: no to step 2
mutate(step_3 = ifelse(step_2=="No" &
!is.na(out_date_t1dm) &
is.na(out_date_t2dm), "Yes",
ifelse(step_2 == "No", "No", NA))) %>%
# Step 4. Type 2 code in the absence of type 1 code denominator for step 3: no to step 3
mutate(step_4 = ifelse(step_3 == "No" &
is.na(out_date_t1dm) &
!is.na(out_date_t2dm), "Yes",
ifelse(step_3 == "No", "No", NA))) %>%
# Step 5. Aged <35yrs (or <30 yrs for SAs and AFCS) at first diagnostic code? denominator for step 5: no to step 4
mutate(step_5 = ifelse(step_4 == "No" &
age_under_35_30_1st_diag == "Yes", "Yes",
ifelse(step_4 == "No" &
age_under_35_30_1st_diag == "No", "No", NA))) %>%
# Step 6. Type 1 and type 2 codes present? denominator for step 6: no to step 5
mutate(step_6 = ifelse(step_5 == "No" &
!is.na(out_date_t1dm) &
!is.na(out_date_t2dm), "Yes",
ifelse(step_5 == "No" &
is.na(out_date_t1dm) |
is.na(out_date_t2dm), "No", NA))) %>%
# Step 6a. Type 1 only reported in primary care. denominator for step 6: no to step 6
mutate(step_6a = ifelse(step_6 == "Yes" &
!is.na(tmp_out_date_t1dm_snomed) &
is.na(tmp_out_date_t2dm_snomed), "Yes",
ifelse(step_6 == "Yes", "No", NA))) %>%
# Step 6b. Type 2 only reported in primary care. denominator for step 6: no to step 6
mutate(step_6b = ifelse(step_6a == "No" &
is.na(tmp_out_date_t1dm_snomed) &
!is.na(tmp_out_date_t2dm_snomed), "Yes",
ifelse(step_6a == "No", "No", NA))) %>%
# Step 6c. Number of type 1 codes>number of type 2 codes? denominator for step 6c: no to step 6b
mutate(step_6c = ifelse(step_6b == "No" &
tmp_out_count_t1dm > tmp_out_count_t2dm, "Yes",
ifelse(step_6b == "No" &
tmp_out_count_t1dm < tmp_out_count_t2dm, "No", NA))) %>%
# Step 6d. Number of type 2 codes>number of type 1 codes denominator for step 6d: no to step 6c
mutate(step_6d = ifelse(step_6c == "No" &
tmp_out_count_t2dm > tmp_out_count_t1dm, "Yes",
ifelse(step_6c == "No" &
tmp_out_count_t2dm < tmp_out_count_t1dm, "No", NA))) %>%
# Step 6e. Type 2 code most recent? denominator for step 6e: no to step 6d
mutate(step_6e = ifelse(step_6d == "No" &
out_date_t2dm > out_date_t1dm, "Yes",
ifelse(step_6d == "No" &
out_date_t2dm < out_date_t1dm, "No", NA))) %>%
# Step 7. Diabetes medication or >5 process of care codes or HbA1c>=6.5? denominator for step 7: no to step 6
mutate(step_7 = ifelse(step_6 == "No" &
((!is.na(tmp_out_date_diabetes_medication)) |
(tmp_out_num_max_hba1c_mmol_mol >= 48) |
(tmp_out_count_poccdm_snomed >= 5)), "Yes",
ifelse(step_6=="No" , "No", NA))) %>%
# Create Diabetes Variable
mutate(out_cat_diabetes = ifelse(step_1 == "No" & step_2 == "No" & step_3 == "No" & step_4 == "No" &
step_5 == "No" & step_6 == "No" & step_7 == "No" |
step_1 == "Yes" & step_1a == "Yes" & step_2 == "No" & step_3 == "No" & step_4 == "No" &
step_5 == "No" & step_6 == "No" & step_7 == "No" ,
"DM unlikely",
ifelse(step_1 == "No" & step_2 == "No" & step_3 == "No" & step_4 == "No" &
step_5 == "No" & step_6 == "No" & step_7 == "Yes" |
step_1 == "Yes" & step_1a == "Yes" & step_2 == "No" & step_3 == "No" & step_4 == "No" &
step_5 == "No" & step_6 == "No" & step_7 == "Yes",
"DM unspecified",
ifelse(step_1 == "No" & step_2 == "Yes" |
step_1 == "Yes" & step_1a == "Yes" & step_2 == "Yes" |
step_1 == "No" & step_2 == "No" & step_3 == "No" & step_4 == "Yes" |
step_1 == "Yes" & step_1a == "Yes" & step_2 == "No" & step_3 == "No" & step_4 == "Yes" |
step_1 == "No" & step_2 == "No" & step_3 == "No" & step_4 == "No" &
step_5 == "No" & step_6 == "Yes" & step_6a == "No" & step_6b=="Yes" |
step_1 == "Yes" & step_1a == "Yes" & step_2 == "No" & step_3 == "No" & step_4 == "No" &
step_5 == "No" & step_6 == "Yes" & step_6a == "No" & step_6b=="Yes" |
step_1 == "No" & step_2 == "No" & step_3 == "No" & step_4 == "No" &
step_5 == "No" & step_6 == "Yes" & step_6a == "No" & step_6b=="No" &
step_6c == "No" & step_6d == "Yes" |
step_1 == "Yes" & step_1a == "Yes" & step_2 == "No" & step_3 == "No" & step_4 == "No" &
step_5 == "No" & step_6 == "Yes" & step_6a == "No" & step_6b=="No" &
step_6c == "No" & step_6d == "Yes" |
step_1 == "No" & step_2 == "No" & step_3 == "No" & step_4 == "No" &
step_5 == "No" & step_6 == "Yes" & step_6a == "No" & step_6b=="No" &
step_6c == "No" & step_6d == "No" & step_6e == "Yes" |
step_1 == "Yes" & step_1a == "Yes" & step_2 == "No" & step_3 == "No" & step_4 == "No" &
step_5 == "No" & step_6 == "Yes" & step_6a == "No" & step_6b=="No" &
step_6c == "No" & step_6d == "No" & step_6e == "Yes",
"T2DM",
ifelse(step_1 == "No" & step_2 == "No" & step_3=="Yes" |
step_1 == "Yes" & step_1a == "Yes" & step_2 == "No" & step_3=="Yes" |
step_1 == "No" & step_2 == "No" & step_3 =="No" & step_4 == "No" & step_5 == "Yes" |
step_1 == "Yes" & step_1a == "Yes" & step_2 == "No" & step_3 =="No" & step_4 == "No" &
step_5 == "Yes" |
step_1 == "No" & step_2 == "No" & step_3 =="No" & step_4 == "No" & step_5 == "No" &
step_6 == "Yes" & step_6a == "Yes" |
step_1 == "Yes" & step_1a == "Yes" & step_2 == "No" & step_3 =="No" & step_4 == "No" &
step_5 == "No" &
step_6 == "Yes" & step_6a == "Yes" |
step_1 == "No" & step_2 == "No" & step_3 =="No" & step_4 == "No" & step_5 == "No" &
step_6 == "Yes" & step_6a == "No" & step_6b == "No" & step_6c == "Yes" |
step_1 == "Yes" & step_1a == "Yes" & step_2 == "No" & step_3 =="No" & step_4 == "No" &
step_5 == "No" &
step_6 == "Yes" & step_6a == "No" & step_6b == "No" & step_6c == "Yes" |
step_1 == "No" & step_2 == "No" & step_3 =="No" & step_4 == "No" & step_5 == "No" &
step_6 == "Yes" & step_6a == "No" & step_6b == "No" & step_6c == "No" &
step_6d == "No" & step_6e == "No" |
step_1 == "Yes" & step_1a == "Yes" & step_2 == "No" & step_3 =="No" & step_4 == "No" & step_5 == "No" &
step_6 == "Yes" & step_6a == "No" & step_6b == "No" & step_6c == "No" &
step_6d == "No" & step_6e == "No",
"T1DM",
ifelse(step_1 == "Yes" & step_1a == "No", "GDM", NA)))))) %>%
# replace NAs with None (no diabetes)
mutate_at(vars(out_cat_diabetes), ~replace_na(., "None"))
# Restrict columns and save analysis dataset ---------------------------------
table(df$out_cat_diabetes)
