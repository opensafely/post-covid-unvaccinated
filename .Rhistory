))
}else{
event_count <- length(which(input$event_date   >= input$index_date &
input$event_date >= input$exp_date_covid19_confirmed &
input$event_date <= input$follow_up_end))
}
person_years_follow_up  = round(sum(input$follow_up_years, na.rm = TRUE), 1)
incidence_rate = round(event_count/person_years_follow_up, 4)
incidence_rate_lower = incidence_rate - 1.96 * sqrt(event_count/person_years_follow_up^2)
incidence_rate_upper = incidence_rate + 1.96 * sqrt(event_count/person_years_follow_up^2)
return(c(event_count, person_years_follow_up, incidence_rate, incidence_rate_lower, incidence_rate_upper))
}
# Run function on outcomes ------------------------------------------------
for(i in 1:length(event_dates_names)){
table_2[i,2:6] <- summary_stats(input, "no_infection", event_dates_names, i)
table_2[i,7:11] <- summary_stats(input[input$sub_cat_covid19_hospital=="non_hospitalised",], "non_hospitalised", event_dates_names, i)
table_2[i,12:16] <- summary_stats(input[input$sub_cat_covid19_hospital=="hospitalised",], "hospitalised", event_dates_names, i)
table_2$total_event_count <- table_2[,2] + table_2[,7] + table_2[,12]
table_2$total_person_yrs <-  table_2[,3] + table_2[,8] + table_2[,13]
table_2$overall_incidence_rate <- round(table_2$total_event_count/table_2$total_person_yrs,4)
table_2$overall_incidence_rate_lower <- table_2$overall_incidence_rate - 1.96*sqrt(table_2$total_event_count/table_2$total_person_yrs^2)
table_2$overall_incidence_rate_upper <- table_2$overall_incidence_rate + 1.96*sqrt(table_2$total_event_count/table_2$total_person_yrs^2)
names(table_2)[2:6] <- c("no_infection_sub_event_count", "no_infection_sub_person_yrs_fp", "no_infection_sub_incidence_rate", "no_infection_sub_incidence_rate_lower", "no_infection_sub_incidence_rate_upper")
names(table_2)[7:11] <- c("non_hospitalised_sub_event_count", "non_hospitalised_sub_person_yrs_fp", "non_hospitalised_sub_incidence_rate", "non_hospitalised_sub_incidence_rate_lower","non_hospitalised_sub_incidence_rate_upper")
names(table_2)[12:16] <- c("hospitalised_sub_event_count", "hospitalised_sub_person_yrs_fp", "hospitalised_sub_incidence_rate", "hospitalised_sub_incidence_rate_lower", "hospitalised_sub_incidence_rate_upper")
names(table_2)[17:21] <- c("total_event_count", "total_person_yrs", "overall_incidence_rate", "overall_incidence_rate_lower", "overall_incidence_rate_upper")
}
# Low number suppression --------------------------------------------------
# change to "NA" if event count lower than or equal to 5
table_2[which(table_2$no_infection_sub_event_count <= 5), c(2,4,5,6)] = c("<=5", "NA", "NA", "NA")
table_2[which(table_2$non_hospitalised_sub_event_count <= 5),c(7,9,10,11)] = c("<=5", "NA", "NA", "NA")
table_2[which(table_2$hospitalised_sub_event_count <= 5),c(12,14,15,16)] = c("<=5", "NA", "NA", "NA")
table_2[which(table_2$total_event_count <= 5),c(17,19,20,21)] = c("<=5", "NA", "NA", "NA")
table_2[which(table_2$no_infection_sub_event_count == "<=5" | table_2$non_hospitalised_sub_event_count == "<=5" | table_2$hospitalised_sub_event_count == "<=5" ),c(17,19,20,21)] = c("<=5", "NA","NA","NA")
View(table_2)
cohort_start = as.Date("2020-01-01", format="%Y-%m-%d")
cohort_end = as.Date("2021-06-18", format="%Y-%m-%d")
# Read active analyses -----------------------------------------------
active_analyses <- read_rds("lib/active_analyses.rds")
# Read data------------------------------------------------------------
input <- read_rds(paste0("output/input_stage1.rds"))
# cohort start date and end date
input <- input %>%
mutate(cohort_start_date = cohort_start,
cohort_end_date = cohort_end)
# Events and Table 2 df ------------------------------------------------------------------
event_dates_names <- active_analyses$outcome_variable[which(active_analyses$active==T)]
event_names <- event_names <- gsub("out_date_","",event_dates_names)
col_headings <- c("event", "event_count", "person_years_follow_up", "incidence_rate")
table_2 <- data.frame(matrix(ncol=length(col_headings), nrow=length(event_dates_names)))
colnames(table_2) <- col_headings
table_2_labels <- active_analyses$outcome[which(active_analyses$active==T)]
table_2$event <- table_2_labels
# Build function for Table 2 ----------------------------------------------
summary_stats <- function(input, infection_subgroup, event_dates_names, index){
# event date
input <- input %>%
mutate(event_date = get(event_dates_names[index]))
# signify follow up end date
input <- input %>% rowwise() %>% mutate(follow_up_end = min(event_date, death_date, cohort_end_date, vax_date_eligible, vax_date_covid_1, na.rm = TRUE))
# follow-up days
input = input %>% mutate(follow_up_period = as.numeric((as.Date(follow_up_end) - as.Date(index_date)))+1)
# follow up period and follow up years
input = input %>% filter(follow_up_period >=1 & follow_up_period <= 535) # filter out follow up period
input = input %>% mutate(follow_up_years = follow_up_period / 365.2) # follow-up years
# Event count
if(infection_subgroup == "no_infection"){
event_count <- length(which((input$event_date >= input$index_date & input$event_date <= input$follow_up_end) &
(input$event_date < input$exp_date_covid19_confirmed | is.na(input$exp_date_covid19_confirmed))
))
}else{
event_count <- length(which(input$event_date   >= input$index_date &
input$event_date >= input$exp_date_covid19_confirmed &
input$event_date <= input$follow_up_end))
}
person_years_follow_up  = round(sum(input$follow_up_years, na.rm = TRUE), 1)
incidence_rate = round(event_count/person_years_follow_up, 4)
incidence_rate_lower = incidence_rate - 1.96 * sqrt(event_count/person_years_follow_up^2)
incidence_rate_upper = incidence_rate + 1.96 * sqrt(event_count/person_years_follow_up^2)
return(c(event_count, person_years_follow_up, incidence_rate, incidence_rate_lower, incidence_rate_upper))
}
# Run function on outcomes ------------------------------------------------
for(i in 1:length(event_dates_names)){
table_2[i,2:6] <- summary_stats(input, "no_infection", event_dates_names, i)
table_2[i,7:11] <- summary_stats(input[input$sub_cat_covid19_hospital=="non_hospitalised",], "non_hospitalised", event_dates_names, i)
table_2[i,12:16] <- summary_stats(input[input$sub_cat_covid19_hospital=="hospitalised",], "hospitalised", event_dates_names, i)
table_2$total_event_count <- table_2[,2] + table_2[,7] + table_2[,12]
table_2$total_person_yrs <-  table_2[,3] + table_2[,8] + table_2[,13]
table_2$overall_incidence_rate <- round(table_2$total_event_count/table_2$total_person_yrs,4)
table_2$overall_incidence_rate_lower <- table_2$overall_incidence_rate - 1.96*sqrt(table_2$total_event_count/table_2$total_person_yrs^2)
table_2$overall_incidence_rate_upper <- table_2$overall_incidence_rate + 1.96*sqrt(table_2$total_event_count/table_2$total_person_yrs^2)
names(table_2)[2:6] <- c("no_infection_sub_event_count", "no_infection_sub_person_yrs_fp", "no_infection_sub_incidence_rate", "no_infection_sub_incidence_rate_lower", "no_infection_sub_incidence_rate_upper")
names(table_2)[7:11] <- c("non_hospitalised_sub_event_count", "non_hospitalised_sub_person_yrs_fp", "non_hospitalised_sub_incidence_rate", "non_hospitalised_sub_incidence_rate_lower","non_hospitalised_sub_incidence_rate_upper")
names(table_2)[12:16] <- c("hospitalised_sub_event_count", "hospitalised_sub_person_yrs_fp", "hospitalised_sub_incidence_rate", "hospitalised_sub_incidence_rate_lower", "hospitalised_sub_incidence_rate_upper")
names(table_2)[17:21] <- c("total_event_count", "total_person_yrs", "overall_incidence_rate", "overall_incidence_rate_lower", "overall_incidence_rate_upper")
}
# Low number suppression --------------------------------------------------
# change to "NA" if event count lower than or equal to 5
table_2[which(table_2$no_infection_sub_event_count <= 5), c(2,4,5,6)] = c("<=5", "NA", "NA", "NA")
table_2[which(table_2$non_hospitalised_sub_event_count <= 5),c(7,9,10,11)] = c("<=5", "NA", "NA", "NA")
table_2[which(table_2$hospitalised_sub_event_count <= 5),c(12,14,15,16)] = c("<=5", "NA", "NA", "NA")
table_2[which(table_2$total_event_count <= 5),c(17,19,20,21)] = c("<=5", "NA", "NA", "NA")
table_2[which(table_2$no_infection_sub_event_count == "<=5" | table_2$non_hospitalised_sub_event_count == "<=5" | table_2$hospitalised_sub_event_count == "<=5" ),c(17,19,20,21)] = c("<=5", "NA","NA","NA")
View(table_2)
# save
write.csv(table_2, file= paste0("output/table2.csv"), row.names = F)
library(magrittr)
library(tidyverse)
library(lubridate)
# Define parameters ------------------------------------------------------------
## Study start date
study_start <- "2020-01-01"
## Load dataset
df <- arrow::read_feather(file = "output/input.feather")
# Format columns -----------------------------------------------------
# dates, numerics, factors, logicals
df <- df %>%
rename(tmp_out_max_hba1c_mmol_mol_date = tmp_out_num_max_hba1c_date) %>%
mutate(across(contains('_date'), ~ as.Date(as.character(.)))) %>%
mutate(across(contains('_birth_year'), ~ format(as.Date(.), "%Y"))) %>%
mutate(across(contains('_num'), ~ as.numeric(.))) %>%
mutate(across(contains('_cat'), ~ as.factor(.))) %>%
mutate(across(contains('_bin'), ~ as.logical(.)))
# Define COVID-19 severity --------------------------------------------------------------
df <- df %>%
mutate(sub_cat_covid19_hospital =
ifelse(!is.na(exp_date_covid19_confirmed) &
!is.na(sub_date_covid19_hospital) &
sub_date_covid19_hospital - exp_date_covid19_confirmed >= 0 &
sub_date_covid19_hospital - exp_date_covid19_confirmed < 29, "hospitalised",
ifelse(!is.na(exp_date_covid19_confirmed), "non_hospitalised",
ifelse(is.na(exp_date_covid19_confirmed), "no_infection", NA)))) %>%
mutate(across(sub_cat_covid19_hospital, factor))
# Define diabetes outcome (using Sophie Eastwood algorithm) ----------------------------
# define variables needed for diabetes algorithm
df <- df %>% mutate(tmp_out_date_first_diabetes_diag = format(tmp_out_date_first_diabetes_diag,"%Y")) %>%
mutate(tmp_out_date_first_diabetes_diag = as.integer(tmp_out_date_first_diabetes_diag),
age_1st_diag = tmp_out_date_first_diabetes_diag - qa_num_birth_year) %>%
mutate(age_1st_diag = replace(age_1st_diag, which(age_1st_diag < 0), NA)) %>% # assign negative ages to NA)
mutate(age_under_35_30_1st_diag = ifelse(!is.na(age_1st_diag) &
(age_1st_diag < 35 &
(cov_cat_ethnicity == 1 | cov_cat_ethnicity == 2  | cov_cat_ethnicity == 5)) |
(age_1st_diag < 30), "Yes", "No")) %>%
# HBA1C date var - earliest date for only those with >=47.5
mutate(hba1c_date_step7 = as_date(case_when(tmp_out_num_max_hba1c_mmol_mol >= 47.5 ~ pmin(tmp_out_max_hba1c_mmol_mol_date, na.rm = TRUE))),
# process codes - this is taking the first process code date in those individuals that have 5 or more process codes
over5_pocc_step7 = as_date(case_when(tmp_out_count_poccdm_snomed >= 5 ~ pmin(out_date_poccdm, na.rm = TRUE))))
# Diabetes adjudication algorithm
df <- df %>%
# Step 1. Any gestational diabetes code?
mutate(step_1 = ifelse(!is.na(out_date_gestationaldm), "Yes", "No")) %>%
# Step 1a. Any T1/ T2 diagnostic codes present? Denominator for step 1a is those with yes to step 1
mutate(step_1a = ifelse(step_1 == "Yes" &
(!is.na(out_date_t1dm) | !is.na(out_date_t2dm)), "Yes",
ifelse(step_1 == "Yes" &
is.na(out_date_t1dm) &
is.na(out_date_t2dm), "No", NA))) %>%
# Step 2. Non-metformin antidiabetic denominator for step 2: no to step 1 or yes to step 1a
mutate(step_2 = ifelse((step_1 == "No" | step_1a == "Yes" ) &
!is.na(tmp_out_date_nonmetform_drugs_snomed), "Yes",
ifelse((step_1 == "No" | step_1a == "Yes") &
is.na(tmp_out_date_nonmetform_drugs_snomed), "No", NA))) %>%
# Step 3. Type 1 code in the absence of type 2 code? denominator for step 3: no to step 2
mutate(step_3 = ifelse(step_2=="No" &
!is.na(out_date_t1dm) &
is.na(out_date_t2dm), "Yes",
ifelse(step_2 == "No", "No", NA))) %>%
# Step 4. Type 2 code in the absence of type 1 code denominator for step 3: no to step 3
mutate(step_4 = ifelse(step_3 == "No" &
is.na(out_date_t1dm) &
!is.na(out_date_t2dm), "Yes",
ifelse(step_3 == "No", "No", NA))) %>%
# Step 5. Aged <35yrs (or <30 yrs for SAs and AFCS) at first diagnostic code? denominator for step 5: no to step 4
mutate(step_5 = ifelse(step_4 == "No" &
age_under_35_30_1st_diag == "Yes", "Yes",
ifelse(step_4 == "No" &
age_under_35_30_1st_diag == "No", "No", NA))) %>%
mutate(step_5 = ifelse(step_5 == "No" |
is.na(step_5) & step_4 == "No", "No", "Yes")) %>%
# Step 6. Type 1 and type 2 codes present? denominator for step 6: no to step 5
mutate(step_6 = ifelse(step_5 == "No" &
!is.na(out_date_t1dm) &
!is.na(out_date_t2dm), "Yes",
ifelse(step_5 == "No" &
(is.na(out_date_t1dm) |
is.na(out_date_t2dm)), "No", NA))) %>%
# Step 6a. Type 1 only reported in primary care. denominator for step 6: no to step 6
mutate(step_6a = ifelse(step_6 == "Yes" &
!is.na(tmp_out_date_t1dm_snomed) &
is.na(tmp_out_date_t2dm_snomed), "Yes",
ifelse(step_6 == "Yes", "No", NA))) %>%
# Step 6b. Type 2 only reported in primary care. denominator for step 6: no to step 6
mutate(step_6b = ifelse(step_6a == "No" &
is.na(tmp_out_date_t1dm_snomed) &
!is.na(tmp_out_date_t2dm_snomed), "Yes",
ifelse(step_6a == "No", "No", NA))) %>%
# Step 6c. Number of type 1 codes>number of type 2 codes? denominator for step 6c: no to step 6b
mutate(step_6c = ifelse(step_6b == "No" &
tmp_out_count_t1dm > tmp_out_count_t2dm, "Yes",
ifelse(step_6b == "No" &
tmp_out_count_t1dm <= tmp_out_count_t2dm, "No", NA))) %>%
# Step 6d. Number of type 2 codes>number of type 1 codes denominator for step 6d: no to step 6c
mutate(step_6d = ifelse(step_6c == "No" &
tmp_out_count_t2dm > tmp_out_count_t1dm, "Yes",
ifelse(step_6c == "No" &
tmp_out_count_t2dm <= tmp_out_count_t1dm, "No", NA))) %>%
# Step 6e. Type 2 code most recent? denominator for step 6e: no to step 6d
mutate(step_6e = ifelse(step_6d == "No" &
out_date_t2dm > out_date_t1dm, "Yes",
ifelse(step_6d == "No" &
out_date_t2dm < out_date_t1dm, "No", NA))) %>%
# Step 7. Diabetes medication or >5 process of care codes or HbA1c>=6.5? denominator for step 7: no to step 6
mutate(step_7 = ifelse(step_6 == "No" &
((!is.na(tmp_out_date_diabetes_medication)) |
(tmp_out_num_max_hba1c_mmol_mol >= 47.5) |
(tmp_out_count_poccdm_snomed >= 5)), "Yes",
ifelse(step_6=="No" , "No", NA))) %>%
# Create Diabetes Variable
mutate(out_cat_diabetes = ifelse(step_1 == "No" & step_2 == "No" & step_3 == "No" & step_4 == "No" &
step_5 == "No" & step_6 == "No" & step_7 == "No" |
step_1 == "Yes" & step_1a == "Yes" & step_2 == "No" & step_3 == "No" & step_4 == "No" &
step_5 == "No" & step_6 == "No" & step_7 == "No" ,
"DM unlikely",
ifelse(step_1 == "No" & step_2 == "No" & step_3 == "No" & step_4 == "No" &
step_5 == "No" & step_6 == "No" & step_7 == "Yes" |
step_1 == "Yes" & step_1a == "Yes" & step_2 == "No" & step_3 == "No" & step_4 == "No" &
step_5 == "No" & step_6 == "No" & step_7 == "Yes",
"DM_other",
ifelse(step_1 == "No" & step_2 == "Yes" |
step_1 == "Yes" & step_1a == "Yes" & step_2 == "Yes" |
step_1 == "No" & step_2 == "No" & step_3 == "No" & step_4 == "Yes" |
step_1 == "Yes" & step_1a == "Yes" & step_2 == "No" & step_3 == "No" & step_4 == "Yes" |
step_1 == "No" & step_2 == "No" & step_3 == "No" & step_4 == "No" &
step_5 == "No" & step_6 == "Yes" & step_6a == "No" & step_6b=="Yes" |
step_1 == "Yes" & step_1a == "Yes" & step_2 == "No" & step_3 == "No" & step_4 == "No" &
step_5 == "No" & step_6 == "Yes" & step_6a == "No" & step_6b=="Yes" |
step_1 == "No" & step_2 == "No" & step_3 == "No" & step_4 == "No" &
step_5 == "No" & step_6 == "Yes" & step_6a == "No" & step_6b=="No" &
step_6c == "No" & step_6d == "Yes" |
step_1 == "Yes" & step_1a == "Yes" & step_2 == "No" & step_3 == "No" & step_4 == "No" &
step_5 == "No" & step_6 == "Yes" & step_6a == "No" & step_6b=="No" &
step_6c == "No" & step_6d == "Yes" |
step_1 == "No" & step_2 == "No" & step_3 == "No" & step_4 == "No" &
step_5 == "No" & step_6 == "Yes" & step_6a == "No" & step_6b=="No" &
step_6c == "No" & step_6d == "No" & step_6e == "Yes" |
step_1 == "Yes" & step_1a == "Yes" & step_2 == "No" & step_3 == "No" & step_4 == "No" &
step_5 == "No" & step_6 == "Yes" & step_6a == "No" & step_6b=="No" &
step_6c == "No" & step_6d == "No" & step_6e == "Yes",
"T2DM",
ifelse(step_1 == "No" & step_2 == "No" & step_3=="Yes" |
step_1 == "Yes" & step_1a == "Yes" & step_2 == "No" & step_3=="Yes" |
step_1 == "No" & step_2 == "No" & step_3 =="No" & step_4 == "No" & step_5 == "Yes" |
step_1 == "Yes" & step_1a == "Yes" & step_2 == "No" & step_3 =="No" & step_4 == "No" &
step_5 == "Yes" |
step_1 == "No" & step_2 == "No" & step_3 =="No" & step_4 == "No" & step_5 == "No" &
step_6 == "Yes" & step_6a == "Yes" |
step_1 == "Yes" & step_1a == "Yes" & step_2 == "No" & step_3 =="No" & step_4 == "No" &
step_5 == "No" &
step_6 == "Yes" & step_6a == "Yes" |
step_1 == "No" & step_2 == "No" & step_3 =="No" & step_4 == "No" & step_5 == "No" &
step_6 == "Yes" & step_6a == "No" & step_6b == "No" & step_6c == "Yes" |
step_1 == "Yes" & step_1a == "Yes" & step_2 == "No" & step_3 =="No" & step_4 == "No" &
step_5 == "No" &
step_6 == "Yes" & step_6a == "No" & step_6b == "No" & step_6c == "Yes" |
step_1 == "No" & step_2 == "No" & step_3 =="No" & step_4 == "No" & step_5 == "No" &
step_6 == "Yes" & step_6a == "No" & step_6b == "No" & step_6c == "No" &
step_6d == "No" & step_6e == "No" |
step_1 == "Yes" & step_1a == "Yes" & step_2 == "No" & step_3 =="No" & step_4 == "No" & step_5 == "No" &
step_6 == "Yes" & step_6a == "No" & step_6b == "No" & step_6c == "No" &
step_6d == "No" & step_6e == "No",
"T1DM",
ifelse(step_1 == "Yes" & step_1a == "No", "GDM", NA)))))) %>%
# replace NAs with None (no diabetes)
mutate_at(vars(out_cat_diabetes), ~replace_na(., "None"))
# Define incident diabetes date variables needed for cox analysis -------------------------
# Uses diabetes cateogory from algorithm above and date of first diabetes related code.
df <- df %>%
# remove old diabetes variables to avoid duplication / confusion - commented out for now
# dplyr::select(- out_date_t1dm, - out_date_t2dm, - out_date_otherdm, - out_date_gestationaldm) %>%
# GESTATIONAL
mutate(out_date_diabetes_gestational = as_date(case_when(out_cat_diabetes == "GDM" ~ tmp_out_date_first_diabetes_diag)),
# T2DM
out_date_diabetes_type2 = as_date(case_when(out_cat_diabetes == "T2DM" ~ tmp_out_date_first_diabetes_diag)),
# T1DM
out_date_diabetes_type1 = as_date(case_when(out_cat_diabetes == "T1DM" ~ tmp_out_date_first_diabetes_diag)),
# OTHER
out_date_diabetes_other = as_date(case_when(out_cat_diabetes == "DM_other" ~ pmin(hba1c_date_step7, over5_pocc_step7, na.rm = TRUE))))
# Restrict columns and save analysis dataset ---------------------------------
View(df)
df[23,]
df_test <- df %>% dplyr::select(out_date_diabetes_type2, out_cat_diabetes, tmp_out_date_first_diabetes_diag)
View(df_test)
class(df_test$tmp_out_date_first_diabetes_diag)
## Study start date
study_start <- "2020-01-01"
## Load dataset
df <- arrow::read_feather(file = "output/input.feather")
# Format columns -----------------------------------------------------
# dates, numerics, factors, logicals
df <- df %>%
rename(tmp_out_max_hba1c_mmol_mol_date = tmp_out_num_max_hba1c_date) %>%
mutate(across(contains('_date'), ~ as.Date(as.character(.)))) %>%
mutate(across(contains('_birth_year'), ~ format(as.Date(.), "%Y"))) %>%
mutate(across(contains('_num'), ~ as.numeric(.))) %>%
mutate(across(contains('_cat'), ~ as.factor(.))) %>%
mutate(across(contains('_bin'), ~ as.logical(.)))
# Define COVID-19 severity --------------------------------------------------------------
df <- df %>%
mutate(sub_cat_covid19_hospital =
ifelse(!is.na(exp_date_covid19_confirmed) &
!is.na(sub_date_covid19_hospital) &
sub_date_covid19_hospital - exp_date_covid19_confirmed >= 0 &
sub_date_covid19_hospital - exp_date_covid19_confirmed < 29, "hospitalised",
ifelse(!is.na(exp_date_covid19_confirmed), "non_hospitalised",
ifelse(is.na(exp_date_covid19_confirmed), "no_infection", NA)))) %>%
mutate(across(sub_cat_covid19_hospital, factor))
# Define diabetes outcome (using Sophie Eastwood algorithm) ----------------------------
# define variables needed for diabetes algorithm
class(df$tmp_out_date_first_diabetes_diag)
# Define parameters ------------------------------------------------------------
## Study start date
study_start <- "2020-01-01"
## Load dataset
df <- arrow::read_feather(file = "output/input.feather")
# Format columns -----------------------------------------------------
# dates, numerics, factors, logicals
df <- df %>%
rename(tmp_out_max_hba1c_mmol_mol_date = tmp_out_num_max_hba1c_date) %>%
mutate(across(contains('_date'), ~ as.Date(as.character(.)))) %>%
mutate(across(contains('_birth_year'), ~ format(as.Date(.), "%Y"))) %>%
mutate(across(contains('_num'), ~ as.numeric(.))) %>%
mutate(across(contains('_cat'), ~ as.factor(.))) %>%
mutate(across(contains('_bin'), ~ as.logical(.)))
# Define COVID-19 severity --------------------------------------------------------------
df <- df %>%
mutate(sub_cat_covid19_hospital =
ifelse(!is.na(exp_date_covid19_confirmed) &
!is.na(sub_date_covid19_hospital) &
sub_date_covid19_hospital - exp_date_covid19_confirmed >= 0 &
sub_date_covid19_hospital - exp_date_covid19_confirmed < 29, "hospitalised",
ifelse(!is.na(exp_date_covid19_confirmed), "non_hospitalised",
ifelse(is.na(exp_date_covid19_confirmed), "no_infection", NA)))) %>%
mutate(across(sub_cat_covid19_hospital, factor))
# Define diabetes outcome (using Sophie Eastwood algorithm) ----------------------------
# define variables needed for diabetes algorithm
df <- df %>% mutate(date_out_date_first_diabetes_diag = tmp_out_date_first_diabetes_diag) %>%
mutate(tmp_out_date_first_diabetes_diag = format(tmp_out_date_first_diabetes_diag,"%Y")) %>%
mutate(tmp_out_date_first_diabetes_diag = as.integer(tmp_out_date_first_diabetes_diag),
age_1st_diag = tmp_out_date_first_diabetes_diag - qa_num_birth_year) %>%
mutate(age_1st_diag = replace(age_1st_diag, which(age_1st_diag < 0), NA)) %>% # assign negative ages to NA)
mutate(age_under_35_30_1st_diag = ifelse(!is.na(age_1st_diag) &
(age_1st_diag < 35 &
(cov_cat_ethnicity == 1 | cov_cat_ethnicity == 2  | cov_cat_ethnicity == 5)) |
(age_1st_diag < 30), "Yes", "No")) %>%
# HBA1C date var - earliest date for only those with >=47.5
mutate(hba1c_date_step7 = as_date(case_when(tmp_out_num_max_hba1c_mmol_mol >= 47.5 ~ pmin(tmp_out_max_hba1c_mmol_mol_date, na.rm = TRUE))),
# process codes - this is taking the first process code date in those individuals that have 5 or more process codes
over5_pocc_step7 = as_date(case_when(tmp_out_count_poccdm_snomed >= 5 ~ pmin(out_date_poccdm, na.rm = TRUE))))
# Diabetes adjudication algorithm
df <- df %>%
# Step 1. Any gestational diabetes code?
mutate(step_1 = ifelse(!is.na(out_date_gestationaldm), "Yes", "No")) %>%
# Step 1a. Any T1/ T2 diagnostic codes present? Denominator for step 1a is those with yes to step 1
mutate(step_1a = ifelse(step_1 == "Yes" &
(!is.na(out_date_t1dm) | !is.na(out_date_t2dm)), "Yes",
ifelse(step_1 == "Yes" &
is.na(out_date_t1dm) &
is.na(out_date_t2dm), "No", NA))) %>%
# Step 2. Non-metformin antidiabetic denominator for step 2: no to step 1 or yes to step 1a
mutate(step_2 = ifelse((step_1 == "No" | step_1a == "Yes" ) &
!is.na(tmp_out_date_nonmetform_drugs_snomed), "Yes",
ifelse((step_1 == "No" | step_1a == "Yes") &
is.na(tmp_out_date_nonmetform_drugs_snomed), "No", NA))) %>%
# Step 3. Type 1 code in the absence of type 2 code? denominator for step 3: no to step 2
mutate(step_3 = ifelse(step_2=="No" &
!is.na(out_date_t1dm) &
is.na(out_date_t2dm), "Yes",
ifelse(step_2 == "No", "No", NA))) %>%
# Step 4. Type 2 code in the absence of type 1 code denominator for step 3: no to step 3
mutate(step_4 = ifelse(step_3 == "No" &
is.na(out_date_t1dm) &
!is.na(out_date_t2dm), "Yes",
ifelse(step_3 == "No", "No", NA))) %>%
# Step 5. Aged <35yrs (or <30 yrs for SAs and AFCS) at first diagnostic code? denominator for step 5: no to step 4
mutate(step_5 = ifelse(step_4 == "No" &
age_under_35_30_1st_diag == "Yes", "Yes",
ifelse(step_4 == "No" &
age_under_35_30_1st_diag == "No", "No", NA))) %>%
mutate(step_5 = ifelse(step_5 == "No" |
is.na(step_5) & step_4 == "No", "No", "Yes")) %>%
# Step 6. Type 1 and type 2 codes present? denominator for step 6: no to step 5
mutate(step_6 = ifelse(step_5 == "No" &
!is.na(out_date_t1dm) &
!is.na(out_date_t2dm), "Yes",
ifelse(step_5 == "No" &
(is.na(out_date_t1dm) |
is.na(out_date_t2dm)), "No", NA))) %>%
# Step 6a. Type 1 only reported in primary care. denominator for step 6: no to step 6
mutate(step_6a = ifelse(step_6 == "Yes" &
!is.na(tmp_out_date_t1dm_snomed) &
is.na(tmp_out_date_t2dm_snomed), "Yes",
ifelse(step_6 == "Yes", "No", NA))) %>%
# Step 6b. Type 2 only reported in primary care. denominator for step 6: no to step 6
mutate(step_6b = ifelse(step_6a == "No" &
is.na(tmp_out_date_t1dm_snomed) &
!is.na(tmp_out_date_t2dm_snomed), "Yes",
ifelse(step_6a == "No", "No", NA))) %>%
# Step 6c. Number of type 1 codes>number of type 2 codes? denominator for step 6c: no to step 6b
mutate(step_6c = ifelse(step_6b == "No" &
tmp_out_count_t1dm > tmp_out_count_t2dm, "Yes",
ifelse(step_6b == "No" &
tmp_out_count_t1dm <= tmp_out_count_t2dm, "No", NA))) %>%
# Step 6d. Number of type 2 codes>number of type 1 codes denominator for step 6d: no to step 6c
mutate(step_6d = ifelse(step_6c == "No" &
tmp_out_count_t2dm > tmp_out_count_t1dm, "Yes",
ifelse(step_6c == "No" &
tmp_out_count_t2dm <= tmp_out_count_t1dm, "No", NA))) %>%
# Step 6e. Type 2 code most recent? denominator for step 6e: no to step 6d
mutate(step_6e = ifelse(step_6d == "No" &
out_date_t2dm > out_date_t1dm, "Yes",
ifelse(step_6d == "No" &
out_date_t2dm < out_date_t1dm, "No", NA))) %>%
# Step 7. Diabetes medication or >5 process of care codes or HbA1c>=6.5? denominator for step 7: no to step 6
mutate(step_7 = ifelse(step_6 == "No" &
((!is.na(tmp_out_date_diabetes_medication)) |
(tmp_out_num_max_hba1c_mmol_mol >= 47.5) |
(tmp_out_count_poccdm_snomed >= 5)), "Yes",
ifelse(step_6=="No" , "No", NA))) %>%
# Create Diabetes Variable
mutate(out_cat_diabetes = ifelse(step_1 == "No" & step_2 == "No" & step_3 == "No" & step_4 == "No" &
step_5 == "No" & step_6 == "No" & step_7 == "No" |
step_1 == "Yes" & step_1a == "Yes" & step_2 == "No" & step_3 == "No" & step_4 == "No" &
step_5 == "No" & step_6 == "No" & step_7 == "No" ,
"DM unlikely",
ifelse(step_1 == "No" & step_2 == "No" & step_3 == "No" & step_4 == "No" &
step_5 == "No" & step_6 == "No" & step_7 == "Yes" |
step_1 == "Yes" & step_1a == "Yes" & step_2 == "No" & step_3 == "No" & step_4 == "No" &
step_5 == "No" & step_6 == "No" & step_7 == "Yes",
"DM_other",
ifelse(step_1 == "No" & step_2 == "Yes" |
step_1 == "Yes" & step_1a == "Yes" & step_2 == "Yes" |
step_1 == "No" & step_2 == "No" & step_3 == "No" & step_4 == "Yes" |
step_1 == "Yes" & step_1a == "Yes" & step_2 == "No" & step_3 == "No" & step_4 == "Yes" |
step_1 == "No" & step_2 == "No" & step_3 == "No" & step_4 == "No" &
step_5 == "No" & step_6 == "Yes" & step_6a == "No" & step_6b=="Yes" |
step_1 == "Yes" & step_1a == "Yes" & step_2 == "No" & step_3 == "No" & step_4 == "No" &
step_5 == "No" & step_6 == "Yes" & step_6a == "No" & step_6b=="Yes" |
step_1 == "No" & step_2 == "No" & step_3 == "No" & step_4 == "No" &
step_5 == "No" & step_6 == "Yes" & step_6a == "No" & step_6b=="No" &
step_6c == "No" & step_6d == "Yes" |
step_1 == "Yes" & step_1a == "Yes" & step_2 == "No" & step_3 == "No" & step_4 == "No" &
step_5 == "No" & step_6 == "Yes" & step_6a == "No" & step_6b=="No" &
step_6c == "No" & step_6d == "Yes" |
step_1 == "No" & step_2 == "No" & step_3 == "No" & step_4 == "No" &
step_5 == "No" & step_6 == "Yes" & step_6a == "No" & step_6b=="No" &
step_6c == "No" & step_6d == "No" & step_6e == "Yes" |
step_1 == "Yes" & step_1a == "Yes" & step_2 == "No" & step_3 == "No" & step_4 == "No" &
step_5 == "No" & step_6 == "Yes" & step_6a == "No" & step_6b=="No" &
step_6c == "No" & step_6d == "No" & step_6e == "Yes",
"T2DM",
ifelse(step_1 == "No" & step_2 == "No" & step_3=="Yes" |
step_1 == "Yes" & step_1a == "Yes" & step_2 == "No" & step_3=="Yes" |
step_1 == "No" & step_2 == "No" & step_3 =="No" & step_4 == "No" & step_5 == "Yes" |
step_1 == "Yes" & step_1a == "Yes" & step_2 == "No" & step_3 =="No" & step_4 == "No" &
step_5 == "Yes" |
step_1 == "No" & step_2 == "No" & step_3 =="No" & step_4 == "No" & step_5 == "No" &
step_6 == "Yes" & step_6a == "Yes" |
step_1 == "Yes" & step_1a == "Yes" & step_2 == "No" & step_3 =="No" & step_4 == "No" &
step_5 == "No" &
step_6 == "Yes" & step_6a == "Yes" |
step_1 == "No" & step_2 == "No" & step_3 =="No" & step_4 == "No" & step_5 == "No" &
step_6 == "Yes" & step_6a == "No" & step_6b == "No" & step_6c == "Yes" |
step_1 == "Yes" & step_1a == "Yes" & step_2 == "No" & step_3 =="No" & step_4 == "No" &
step_5 == "No" &
step_6 == "Yes" & step_6a == "No" & step_6b == "No" & step_6c == "Yes" |
step_1 == "No" & step_2 == "No" & step_3 =="No" & step_4 == "No" & step_5 == "No" &
step_6 == "Yes" & step_6a == "No" & step_6b == "No" & step_6c == "No" &
step_6d == "No" & step_6e == "No" |
step_1 == "Yes" & step_1a == "Yes" & step_2 == "No" & step_3 =="No" & step_4 == "No" & step_5 == "No" &
step_6 == "Yes" & step_6a == "No" & step_6b == "No" & step_6c == "No" &
step_6d == "No" & step_6e == "No",
"T1DM",
ifelse(step_1 == "Yes" & step_1a == "No", "GDM", NA)))))) %>%
# replace NAs with None (no diabetes)
mutate_at(vars(out_cat_diabetes), ~replace_na(., "None"))
# Define incident diabetes date variables needed for cox analysis -------------------------
# Uses diabetes cateogory from algorithm above and date of first diabetes related code.
df <- df %>%
# remove old diabetes variables to avoid duplication / confusion - commented out for now
# dplyr::select(- out_date_t1dm, - out_date_t2dm, - out_date_otherdm, - out_date_gestationaldm) %>%
# GESTATIONAL
mutate(out_date_diabetes_gestational = as_date(case_when(out_cat_diabetes == "GDM" ~ date_out_date_first_diabetes_diag)),
# T2DM
out_date_diabetes_type2 = as_date(case_when(out_cat_diabetes == "T2DM" ~ date_out_date_first_diabetes_diag)),
# T1DM
out_date_diabetes_type1 = as_date(case_when(out_cat_diabetes == "T1DM" ~ date_out_date_first_diabetes_diag)),
# OTHER
out_date_diabetes_other = as_date(case_when(out_cat_diabetes == "DM_other" ~ pmin(hba1c_date_step7, over5_pocc_step7, na.rm = TRUE))))
# Restrict columns and save analysis dataset ---------------------------------
df1 <- df %>%
dplyr::select(- vax_jcvi_age_1, - vax_jcvi_age_2) %>% #  remove JCVI variables
# select patient id, death date and variables: subgroups, exposures, outcomes, covariates, quality assurance and vaccination
# need diabetes "step" variables for flowchart (diabetes_flowchart.R)
dplyr::select(patient_id, death_date,
contains(c("sub_", "exp_", "out_", "cov_", "qa_", "vax_", "step"))) %>%
dplyr::select(-contains("df_out_")) %>%
dplyr::select(-contains("tmp_"))
# SAVE
df_test <- df %>% dplyr::select(out_date_diabetes_type2, out_cat_diabetes, tmp_out_date_first_diabetes_diag)
View(df_test)
class(df$date_out_date_first_diabetes_diag)
df_test <- df %>% dplyr::select(out_date_diabetes_type2, out_cat_diabetes, date_out_date_first_diabetes_diag)
