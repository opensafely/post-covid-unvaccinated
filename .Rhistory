survival_data <- bind_rows(cases,non_cases)
survival_data$days_to_start <- as.numeric(survival_data$follow_up_start-cohort_start_date)
survival_data$days_to_end <- as.numeric(survival_data$follow_up_end-cohort_start_date)
if(startsWith(subgroup,"covid_pheno_")){
survival_data$days_to_end <- ifelse((!is.na(survival_data$date_expo_censor)) & (survival_data$follow_up_end == survival_data$date_expo_censor), survival_data$days_to_end, (survival_data$days_to_end +1 ))
}else{
survival_data$days_to_end <- (survival_data$days_to_end +1)
}
noncase_ids <- unique(non_cases$patient_id)
# ......................................
# Need to add 0.001 when days_to_end==0
#if (length(survival_data$days_to_end[survival_data$days_to_end==survival_data$days_to_start])>0){
#  survival_data$days_to_end <- ifelse(survival_data$days_to_end==survival_data$days_to_start, survival_data$days_to_end + 0.001, survival_data$days_to_end)
#}
#===============================================================================
#   CACHE some features
#-------------------------------------------------------------------------------
df_sex <- survival_data %>% dplyr::select(patient_id, sex)
df_age_region_ethnicity <- survival_data %>% dplyr::select(patient_id, AGE_AT_COHORT_START, region_name, ethnicity) %>% rename(age = AGE_AT_COHORT_START)
df_age_region_ethnicity$age_sq <- df_age_region_ethnicity$age^2
#===============================================================================
# WITH COVID
#-------------------------------------------------------------------------------
with_expo <- survival_data %>% filter(!is.na(expo_date))
# Check whether there are any people with COVID exposure
any_exposures <- nrow(with_expo)>0
# Check whether there are any people with post-expo events
any_exposed_events <- nrow(with_expo %>% filter(!is.na(event_date)))>0
if(any_exposures==T & any_exposed_events ==T ){
if(startsWith(subgroup,"covid_pheno_")==T){
with_expo <- with_expo %>%
dplyr::select(patient_id, expo_date, follow_up_end, event_date, days_to_start, days_to_end, DATE_OF_DEATH, date_expo_censor) %>%
mutate(event_status = if_else( (!is.na(event_date)) &
(
((event_date <= follow_up_end) & ((follow_up_end != date_expo_censor) | is.na(date_expo_censor ))) |
((event_date < follow_up_end) & (follow_up_end == date_expo_censor))
),
1, 0))
}else{
with_expo <- with_expo %>%
dplyr::select(patient_id, expo_date, follow_up_end, event_date, days_to_start, days_to_end, DATE_OF_DEATH) %>%
mutate(event_status = if_else( (!is.na(event_date))
, 1, 0))
}
# ......................................
# CHUNK UP FOLLOW-UP PERIOD by CHANGE OF STATE OF EXPOSURE
with_expo$day_to_expo <- as.numeric(with_expo$expo_date - cohort_start_date)
d1 <- with_expo %>% dplyr::select(patient_id, expo_date, event_date, DATE_OF_DEATH)
d2 <- with_expo %>% dplyr::select(patient_id, days_to_start, day_to_expo, days_to_end, event_status)
with_expo <- tmerge(data1=d1, data2=d2, id=patient_id,
event=event(days_to_end, event_status), tstart=days_to_start, tstop = days_to_end,
expo=tdc(day_to_expo))
with_expo <- with_expo %>% dplyr::select(!id)
rm(list=c("d1", "d2", "non_cases", "cases"))
# ----------------------- SPLIT POST-COVID TIME------------------------------
with_expo_postexpo <- with_expo %>% filter(expo==1)
with_expo_postexpo <- with_expo_postexpo %>% rename(t0=tstart, t=tstop) %>% mutate(tstart=0, tstop=t-t0)
with_expo_postexpo <- survSplit(Surv(tstop, event)~.,
with_expo_postexpo,
cut=cuts_days_since_expo,
episode="days_cat"
)
with_expo_postexpo <- with_expo_postexpo %>% mutate(tstart=tstart+t0, tstop=tstop+t0) %>% dplyr::select(-c(t0,t))
# ................... CONCAT BACK PRE-COVID TIME...................
with_expo_preexpo <- with_expo %>% filter(expo==0)
with_expo_preexpo$days_cat <- 0
ls_with_expo <- list(with_expo_preexpo, with_expo_postexpo)
with_expo <- do.call(rbind, lapply(ls_with_expo, function(x) x[match(names(ls_with_expo[[1]]), names(x))]))
rm(list=c("ls_with_expo", "with_expo_preexpo", "with_expo_postexpo"))
with_expo  <- with_expo %>%
group_by(patient_id) %>% arrange(days_cat) %>% mutate(last_step = ifelse(row_number()==n(),1,0))
with_expo$event  <- with_expo$event * with_expo$last_step
}
#===============================================================================
#-   WITHOUT COVID
#-------------------------------------------------------------------------------
without_expo <- survival_data %>%filter(is.na(expo_date))
any_no_expo <- nrow(with_expo)>0
if(any_no_expo == T & any_exposures== T & any_exposed_events == T ){
if(startsWith(subgroup,"covid_pheno_")==T){
without_expo <- without_expo %>%
dplyr::select(patient_id, expo_date, follow_up_end, event_date, days_to_start, days_to_end, DATE_OF_DEATH, date_expo_censor) %>%
mutate(event = if_else( (!is.na(event_date)) &
(
((event_date <= follow_up_end) & ((follow_up_end != date_expo_censor) | is.na(date_expo_censor ))) |
((event_date < follow_up_end) & (follow_up_end == date_expo_censor))
),
1, 0))
}else{
without_expo <- without_expo %>%
dplyr::select(patient_id, expo_date, follow_up_end, event_date, days_to_start, days_to_end, DATE_OF_DEATH) %>%
mutate(event = if_else( (!is.na(event_date)),
1, 0))
}
# ......................................
without_expo$tstart<- without_expo$days_to_start
without_expo$tstop <- without_expo$days_to_end
without_expo$expo<- c(0)
without_expo$days_cat <- c(0)
#===============================================================================
#-   RBIND WITH & WITHOUT COVID
#-------------------------------------------------------------------------------
common_cols <- intersect(colnames(without_expo), colnames(with_expo))
without_expo <- without_expo %>% dplyr::select(all_of(common_cols))
with_expo <- with_expo %>% dplyr::select(all_of(common_cols))
data_surv <-rbind(without_expo, with_expo)
#===============================================================================
#   PIVOT WIDE for WEEKS_SINCE_COVID
#-------------------------------------------------------------------------------
#data_surv$days_to_expo <- as.numeric(data_surv$expo_date - as.Date(cohort_start_date))
interval_names <- mapply(function(x, y) ifelse(x == y, paste0("days", x), paste0("days", x, "_", y)),
lag(cuts_days_since_expo, default = 0),
cuts_days_since_expo,
SIMPLIFY = FALSE)
intervals <- mapply(c, lag(cuts_days_since_expo, default = 0), cuts_days_since_expo, SIMPLIFY = F)
i<-0
for (ls in mapply(list, interval_names, intervals, SIMPLIFY = F)){
i <- i+1
data_surv[[ls[[1]]]] <- if_else(data_surv$days_cat==i, 1, 0)
}
#===============================================================================
# FINALIZE age, region, data_surv
#-------------------------------------------------------------------------------
data_surv <- data_surv %>% left_join(df_age_region_ethnicity)
data_surv <- data_surv %>% left_join(df_sex)
print(paste0("Finished survival data"))
# ============================= EVENTS COUNT =================================
which_days_since_covid <- function(row_data_surv, interval_names){
days_cols <- row_data_surv %>% dplyr::select(all_of(interval_names))
expo_day_period <- names(days_cols)[which(days_cols == 1)]
row_data_surv$expo_days <- ifelse(length(expo_day_period)==0, NA,expo_day_period )
#row_data_surv$expo_days <- names(days_cols)[which(days_cols == 1)]
row_data_surv$expo_days <- ifelse(is.na(row_data_surv$expo_days),"pre expo", row_data_surv$expo_days)
return(row_data_surv)
}
get_tbl_event_count <- function(data_surv, interval_names){
df_events <- data_surv %>% filter(event==1)
ls_data_surv <- split(df_events, 1:nrow(df_events))
ls_data_surv <- lapply(ls_data_surv, which_days_since_covid, unlist(interval_names))
ls_data_surv <- do.call("rbind", ls_data_surv)
tbl_event_count <- aggregate(event ~ expo_days, ls_data_surv, sum)
tbl_event_count[nrow(tbl_event_count) + 1,] = c("all post expo", sum(head(tbl_event_count$event, (nrow(tbl_event_count)-1)))  )
return(tbl_event_count)
}
tbl_event_count_all <- get_tbl_event_count(data_surv, interval_names)
tbl_event_count <- list(tbl_event_count_all) %>% reduce(left_join, by = "expo_days")
event_count_levels <- c("pre expo", unlist(interval_names), "all post expo")
tbl_event_count_levels <- data.frame(event_count_levels)
names(tbl_event_count_levels) <- c("expo_days")
tbl_event_count <- merge(tbl_event_count_levels, tbl_event_count, all.x = TRUE)
tbl_event_count[is.na(tbl_event_count)] <- 0
tbl_event_count <- tbl_event_count %>%
arrange(factor(expo_days,
levels = event_count_levels),
expo_days)
names(tbl_event_count) <- c("expo_week", "events_total")
tbl_event_count$event=event
tbl_event_count$subgroup <- subgroup
tbl_event_count$cohort <- cohort
tbl_event_count$model <- mdl
tbl_event_count$events_total <- as.numeric(tbl_event_count$events_total)
#Any time periods with <+5 events? If yes, will reduce time periods
ind_any_zeroeventperiod <- any((tbl_event_count$events_total <= 5) & (!identical(cuts_days_since_expo, c(28, 197))))
#Are there <400 post expo events? If yes, won't run analysis
#Can change <400 to be lower to test on dummy data
less_than_400_events = any((as.numeric(tbl_event_count$events_total) <400) & (tbl_event_count$expo_week=="all post expo"))
# If ind_any_zeroeventperiod==TRUE then this script will re-run again with reduced time periods and
# we only want to save the final event count file. For reduced time periods, ind_any_zeroeventperiod will
# always be FALSE
# Save events counts if less than 400 events as this script will not re-run with reduced time periods
if(ind_any_zeroeventperiod==FALSE | less_than_400_events==TRUE){
write.csv(tbl_event_count, paste0(output_dir,"/tbl_event_count_" ,event,"_", subgroup,"_",cohort,"_",mdl,".csv"), row.names = T)
print(paste0("Event counts saved: ", output_dir,"/tbl_event_count_" ,event,"_", subgroup,"_",cohort,"_",mdl,".csv"))
}
return(list(data_surv, noncase_ids, interval_names, ind_any_zeroeventperiod, non_case_inverse_weight, less_than_400_events))
}else{
analyses_not_run[nrow(analyses_not_run)+1,]<- c(event,subgroup,mdl,any_exposures,any_exposed_events,any_no_expo,"FALSE")
return(list(analyses_not_run))
}
}
## =============================================================================
## 1.Calls the functions that formats the survival data into the relevant format
## to be used in the cox model
## 2.Defines the cox survival formula and fits the cox model
## 3.Format the results table
## =============================================================================
source(file.path(scripts_dir,"fit_get_data_surv_eventcountbasedtimecuts.R"))
fit_model_reducedcovariates <- function(event,subgroup,stratify_by_subgroup,stratify_by,mdl, survival_data,input,cuts_days_since_expo,cuts_days_since_expo_reduced,covar_names,total_covid_cases){
list_data_surv_noncase_ids_interval_names <- fit_get_data_surv(event,subgroup, stratify_by_subgroup, stratify_by,mdl, survival_data,cuts_days_since_expo)
if(length(list_data_surv_noncase_ids_interval_names)==1){
analyses_not_run <<- list_data_surv_noncase_ids_interval_names[[1]]
return(fit_model_reducedcovariates)
}
data_surv <- list_data_surv_noncase_ids_interval_names[[1]]
noncase_ids <- list_data_surv_noncase_ids_interval_names[[2]]
interval_names <-list_data_surv_noncase_ids_interval_names[[3]]
ind_any_zeroeventperiod <- list_data_surv_noncase_ids_interval_names[[4]]
non_case_inverse_weight=list_data_surv_noncase_ids_interval_names[[5]]
less_than_400_events=list_data_surv_noncase_ids_interval_names[[6]]
if(less_than_400_events=="TRUE"){
analyses_not_run[nrow(analyses_not_run)+1,]<<-c(event,subgroup,mdl,"TRUE","TRUE","FALSE")
return(fit_model_reducedcovariates)
}
if(ind_any_zeroeventperiod==TRUE){
list_data_surv_noncase_ids_interval_names <- fit_get_data_surv(event,subgroup, stratify_by_subgroup, stratify_by,mdl,survival_data, cuts_days_since_expo=cuts_days_since_expo_reduced)
data_surv <- list_data_surv_noncase_ids_interval_names[[1]]
noncase_ids <- list_data_surv_noncase_ids_interval_names[[2]]
interval_names <-list_data_surv_noncase_ids_interval_names[[3]]
ind_any_zeroeventperiod <- list_data_surv_noncase_ids_interval_names[[4]]
non_case_inverse_weight=list_data_surv_noncase_ids_interval_names[[5]]
}
#Select covariates if using model mdl_max_adj
if(mdl=="mdl_max_adj"){
covars=input%>%dplyr::select(all_of(covar_names))
covar_names = names(covars)[ names(covars) != "patient_id"]
data_surv <- data_surv %>% left_join(covars)
}
#Add inverse probablity weights for non-cases
data_surv$cox_weights <- ifelse(data_surv$patient_id %in% noncase_ids, non_case_inverse_weight, 1)
# Fit model and prep output csv
fit_model <- coxfit(data_surv, interval_names, covar_names, subgroup, mdl)
fit_model$subgroup <- subgroup
fit_model$event <- event
fit_model$model <- mdl
fit_model$total_covid19_cases <- total_covid_cases
write.csv(fit_model, paste0(output_dir,"/tbl_hr_" , event, "_",subgroup,"_",mdl, ".csv"), row.names = T)
print(paste0("Hazard ratios saved: ", output_dir,"/tbl_hr_" , event, "_",subgroup,"_",mdl, ".csv"))
}
#------------------------ GET SURV FORMULA & COXPH() ---------------------------
coxfit <- function(data_surv, interval_names, covar_names, subgroup, mdl){
print("Working on cox model")
if(mdl == "mdl_max_adj"){
covars_to_remove <- rm_lowvar_covars(data_surv)[!is.na((rm_lowvar_covars(data_surv)))]
print(paste0("Covariates removed: ", covars_to_remove))
data_surv <- data_surv %>% dplyr::select(!all_of(covars_to_remove))
collapse_covars_list=collapse_categorical_covars(data_surv)
data_surv=collapse_covars_list[[1]]
covars_collapsed=collapse_covars_list[[2]]
covars_collapsed=unique(covars_collapsed[covars_collapsed %in% c("cov_cat_deprivation","cov_cat_smoking_status")])
}
print("Post Exposure event counts split by covariate levels")
if(mdl=="mdl_agesex"){
print(covariate_exploration(data_surv, c()))
}else{
covars_to_print <- covar_names[!covar_names %in% covars_to_remove]
print(covariate_exploration(data_surv, append(covars_to_print,"ethnicity")))
}
covariates <- covar_names[covar_names %in% names(data_surv)] %>% sort()
interval_names_withpre <- c("days_pre", interval_names)
# get Survival formula ----
covariates_excl_region_sex_age <- unique(c(interval_names, covariates))
knot_placement=as.numeric(quantile(data_surv$age, probs=c(0.1,0.5,0.9)))
#Base formula
if(mdl=="mdl_agesex"){
surv_formula <- paste0(
"Surv(tstart, tstop, event) ~ ",
paste(interval_names, collapse="+"),
"+ cluster(patient_id) + strat(region_name)")
}else if (mdl=="mdl_max_adj"){
surv_formula <- paste0(
"Surv(tstart, tstop, event) ~ ",
paste(covariates_excl_region_sex_age, collapse="+"),
"+ cluster(patient_id) + strat(region_name)")
}
#If subgroup is not sex then add sex into formula
if ((startsWith(subgroup,"sex"))==F & (!"sex" %in% covariates_excl_region_sex_age)){
surv_formula <- paste(surv_formula, "sex", sep="+")
}
#If subgroup is not ethnicity then add ethnicity into formula
if ((startsWith(subgroup,"ethnicity"))==F & (!"ethnicity" %in% covariates_excl_region_sex_age) & mdl == "mdl_max_adj"){
surv_formula <- paste(surv_formula, "ethnicity", sep="+")
}
#If subgroup is not age then add in age spline otherwise use age and age_sq
if ((startsWith(subgroup,"agegp_"))==F){
surv_formula <- paste(surv_formula, "rms::rcs(age,parms=knot_placement)", sep="+")
}else if ((startsWith(subgroup,"agegp_"))==T){
surv_formula <- paste(surv_formula, "age + age_sq", sep="+")
}
print(surv_formula)
# fit cox model
dd <<- datadist(data_surv)
#options(datadist="dd")
options(datadist="dd", contrasts=c("contr.treatment", "contr.treatment"))
print("Fitting cox model")
fit_cox_model <-rms::cph(formula=as.formula(surv_formula),data=data_surv, weight=data_surv$cox_weights,surv = TRUE,x=TRUE,y=TRUE)
# To get robust variance-covariance matrix so that robust standard errots can be used in CI's
robust_fit_cox_model=rms::robcov(fit_cox_model, cluster = data_surv$patient_id)
print("Finished fitting cox model")
# Results ----
results=as.data.frame(names(fit_cox_model$coefficients))
colnames(results)="term"
results$estimate=exp(fit_cox_model$coefficients)
results$conf.low=exp(confint(robust_fit_cox_model,level=0.95)[,1]) #use robust standard errors to calculate CI
results$conf.high=exp(confint(robust_fit_cox_model,level=0.95)[,2])
results$std.error=exp(sqrt(diag(vcov(fit_cox_model))))
results$robust.se=exp(sqrt(diag(vcov(robust_fit_cox_model))))
if(mdl == "mdl_max_adj"){
results$covariates_removed=paste0(covars_to_remove, collapse = ",")
results$cat_covars_collapsed=paste0(covars_collapsed, collapse = ",")
print(paste0("Categorical covariates collapsed: ", covars_collapsed))
}
#Add in P-values to results table
#Can only get for covariate as a whole and not for each level so left join onto main covariate name
results$covariate=results$term
results$covariate=sub('\\=.*', '', results$covariate)
results$P="NA"
#anova_fit_cox_model=as.data.frame(anova(fit_cox_model))
#anova_fit_cox_model$covariate=row.names(anova_fit_cox_model)
#anova_fit_cox_model=anova_fit_cox_model%>%select("covariate","P")
#results=results%>%left_join(anova_fit_cox_model,by="covariate")
print("Finised working on cox model")
return(results)
}
#Combine all results into one .csv
source(file.path(scripts_dir, "format_tbls_HRs.R"))
#Combine all results into one .csv
source(file.path(scripts_dir, "format_tbls_HRs.R"))
install.packages("DT")
#Combine all results into one .csv
source(file.path(scripts_dir, "format_tbls_HRs.R"))
View(supressed_combined_hr_event_counts)
View(df_event_counts)
View(df)
lapply(split(ls_events_missing,seq(nrow(ls_events_missing))),
function(ls_events_missing)
get_vacc_res(
event=ls_events_missing$event,
subgroup=ls_events_missing$subgroup,
stratify_by_subgroup=ls_events_missing$stratify_by_subgroup,
stratify_by=ls_events_missing$strata,
mdl=ls_events_missing$mdl,
input, cuts_days_since_expo,cuts_days_since_expo_reduced,covar_names)
)
#Save csv of anlayses not run
write.csv(analyses_not_run, paste0(output_dir,"/analyses_not_run_" , event_name ,"_", ".csv"), row.names = T)
args = commandArgs(trailingOnly=TRUE)
if(length(args)==0){
event_name="diabetes_other"
}else{
event_name  = args[[1]]
}
# Specify directories ----------------------------------------------------------
output_dir <- "output"
scripts_dir <- "analysis"
# Source relevant files --------------------------------------------------------
source(file.path(scripts_dir,"analyses_to_run.R"))
source(file.path(scripts_dir,"02_pipe.R")) # Prepare dataset for model
source(file.path(scripts_dir,"extra_functions_for_cox_models.R"))
source(file.path(scripts_dir,paste0("call_mdl.R"))) # Model specification
ls_events_missing <- get(paste0("analyses_to_run"))
# ------------------------------------ LAUNCH JOBS -----------------------------
lapply(split(ls_events_missing,seq(nrow(ls_events_missing))),
function(ls_events_missing)
get_vacc_res(
event=ls_events_missing$event,
subgroup=ls_events_missing$subgroup,
stratify_by_subgroup=ls_events_missing$stratify_by_subgroup,
stratify_by=ls_events_missing$strata,
mdl=ls_events_missing$mdl,
input, cuts_days_since_expo,cuts_days_since_expo_reduced,covar_names)
)
#Save csv of anlayses not run
write.csv(analyses_not_run, paste0(output_dir,"/analyses_not_run_" , event_name ,"_", ".csv"), row.names = T)
args = commandArgs(trailingOnly=TRUE)
if(length(args)==0){
event_name="diabetes_other"
}else{
event_name  = args[[1]]
}
# Specify directories ----------------------------------------------------------
output_dir <- "output"
scripts_dir <- "analysis"
# Source relevant files --------------------------------------------------------
source(file.path(scripts_dir,"analyses_to_run.R"))
source(file.path(scripts_dir,"02_pipe.R")) # Prepare dataset for model
source(file.path(scripts_dir,"extra_functions_for_cox_models.R"))
source(file.path(scripts_dir,paste0("call_mdl.R"))) # Model specification
ls_events_missing <- get(paste0("analyses_to_run"))
# ------------------------------------ LAUNCH JOBS -----------------------------
lapply(split(ls_events_missing,seq(nrow(ls_events_missing))),
function(ls_events_missing)
get_vacc_res(
event=ls_events_missing$event,
subgroup=ls_events_missing$subgroup,
stratify_by_subgroup=ls_events_missing$stratify_by_subgroup,
stratify_by=ls_events_missing$strata,
mdl=ls_events_missing$mdl,
input, cuts_days_since_expo,cuts_days_since_expo_reduced,covar_names)
)
#Save csv of anlayses not run
write.csv(analyses_not_run, paste0(output_dir,"/analyses_not_run_" , event_name ,"_", ".csv"), row.names = T)
library(data.table); library(dplyr); library(survival); library(broom); library(DBI); library(ggplot2);
library(nlme); library(tidyverse); library(lubridate); library(purrr); library(parallel); library(stats);
library(utils); library(stringr); library(rms); library(readr)
args = commandArgs(trailingOnly=TRUE)
if(length(args)==0){
event_name="diabetes_other"
}else{
event_name  = args[[1]]
}
# Specify directories ----------------------------------------------------------
output_dir <- "output"
scripts_dir <- "analysis"
# Source relevant files --------------------------------------------------------
source(file.path(scripts_dir,"analyses_to_run.R"))
source(file.path(scripts_dir,"02_pipe.R")) # Prepare dataset for model
source(file.path(scripts_dir,"extra_functions_for_cox_models.R"))
source(file.path(scripts_dir,paste0("call_mdl.R"))) # Model specification
ls_events_missing <- get(paste0("analyses_to_run"))
# ------------------------------------ LAUNCH JOBS -----------------------------
lapply(split(ls_events_missing,seq(nrow(ls_events_missing))),
function(ls_events_missing)
get_vacc_res(
event=ls_events_missing$event,
subgroup=ls_events_missing$subgroup,
stratify_by_subgroup=ls_events_missing$stratify_by_subgroup,
stratify_by=ls_events_missing$strata,
mdl=ls_events_missing$mdl,
input, cuts_days_since_expo,cuts_days_since_expo_reduced,covar_names)
)
# ------------------------------------ LAUNCH JOBS -----------------------------
lapply(split(ls_events_missing,seq(nrow(ls_events_missing))),
function(ls_events_missing)
get_vacc_res(
event=ls_events_missing$event,
subgroup=ls_events_missing$subgroup,
stratify_by_subgroup=ls_events_missing$stratify_by_subgroup,
stratify_by=ls_events_missing$strata,
mdl=ls_events_missing$mdl,
input, cuts_days_since_expo,cuts_days_since_expo_reduced,covar_names)
)
rlang::last_error()
args = commandArgs(trailingOnly=TRUE)
if(length(args)==0){
event_name="diabetes_other"
}else{
event_name  = args[[1]]
}
# Specify directories ----------------------------------------------------------
output_dir <- "output"
scripts_dir <- "analysis"
# Source relevant files --------------------------------------------------------
source(file.path(scripts_dir,"analyses_to_run.R"))
source(file.path(scripts_dir,"02_pipe.R")) # Prepare dataset for model
source(file.path(scripts_dir,"extra_functions_for_cox_models.R"))
source(file.path(scripts_dir,paste0("call_mdl.R"))) # Model specification
ls_events_missing <- get(paste0("analyses_to_run"))
lapply(split(ls_events_missing,seq(nrow(ls_events_missing))),
function(ls_events_missing)
get_vacc_res(
event=ls_events_missing$event,
subgroup=ls_events_missing$subgroup,
stratify_by_subgroup=ls_events_missing$stratify_by_subgroup,
stratify_by=ls_events_missing$strata,
mdl=ls_events_missing$mdl,
input, cuts_days_since_expo,cuts_days_since_expo_reduced,covar_names)
)
View(analyses_not_run)
View(analyses_to_run)
View(analyses_not_run)
args = commandArgs(trailingOnly=TRUE)
if(length(args)==0){
event_name="diabetes_other"
}else{
event_name  = args[[1]]
}
# Specify directories ----------------------------------------------------------
output_dir <- "output"
scripts_dir <- "analysis"
# Source relevant files --------------------------------------------------------
source(file.path(scripts_dir,"analyses_to_run.R"))
source(file.path(scripts_dir,"02_pipe.R")) # Prepare dataset for model
source(file.path(scripts_dir,"extra_functions_for_cox_models.R"))
source(file.path(scripts_dir,paste0("call_mdl.R"))) # Model specification
ls_events_missing <- get(paste0("analyses_to_run"))
# ------------------------------------ LAUNCH JOBS -----------------------------
lapply(split(ls_events_missing,seq(nrow(ls_events_missing))),
function(ls_events_missing)
get_vacc_res(
event=ls_events_missing$event,
subgroup=ls_events_missing$subgroup,
stratify_by_subgroup=ls_events_missing$stratify_by_subgroup,
stratify_by=ls_events_missing$strata,
mdl=ls_events_missing$mdl,
input, cuts_days_since_expo,cuts_days_since_expo_reduced,covar_names)
)
args = commandArgs(trailingOnly=TRUE)
if(length(args)==0){
event_name="diabetes_other"
}else{
event_name  = args[[1]]
}
# Specify directories ----------------------------------------------------------
output_dir <- "output"
scripts_dir <- "analysis"
# Source relevant files --------------------------------------------------------
source(file.path(scripts_dir,"analyses_to_run.R"))
source(file.path(scripts_dir,"02_pipe.R")) # Prepare dataset for model
source(file.path(scripts_dir,"extra_functions_for_cox_models.R"))
source(file.path(scripts_dir,paste0("call_mdl.R"))) # Model specification
ls_events_missing <- get(paste0("analyses_to_run"))
# ------------------------------------ LAUNCH JOBS -----------------------------
lapply(split(ls_events_missing,seq(nrow(ls_events_missing))),
function(ls_events_missing)
get_vacc_res(
event=ls_events_missing$event,
subgroup=ls_events_missing$subgroup,
stratify_by_subgroup=ls_events_missing$stratify_by_subgroup,
stratify_by=ls_events_missing$strata,
mdl=ls_events_missing$mdl,
input, cuts_days_since_expo,cuts_days_since_expo_reduced,covar_names)
)
