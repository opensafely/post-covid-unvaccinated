step_5 == "Yes" |
step_1 == "No" & step_2 == "No" & step_3 =="No" & step_4 == "No" & step_5 == "No" &
step_6 == "Yes" & step_6a == "Yes" |
step_1 == "Yes" & step_1a == "Yes" & step_2 == "No" & step_3 =="No" & step_4 == "No" &
step_5 == "No" &
step_6 == "Yes" & step_6a == "Yes" |
step_1 == "No" & step_2 == "No" & step_3 =="No" & step_4 == "No" & step_5 == "No" &
step_6 == "Yes" & step_6a == "No" & step_6b == "No" & step_6c == "Yes" |
step_1 == "Yes" & step_1a == "Yes" & step_2 == "No" & step_3 =="No" & step_4 == "No" &
step_5 == "No" &
step_6 == "Yes" & step_6a == "No" & step_6b == "No" & step_6c == "Yes" |
step_1 == "No" & step_2 == "No" & step_3 =="No" & step_4 == "No" & step_5 == "No" &
step_6 == "Yes" & step_6a == "No" & step_6b == "No" & step_6c == "No" &
step_6d == "No" & step_6e == "No" |
step_1 == "Yes" & step_1a == "Yes" & step_2 == "No" & step_3 =="No" & step_4 == "No" & step_5 == "No" &
step_6 == "Yes" & step_6a == "No" & step_6b == "No" & step_6c == "No" &
step_6d == "No" & step_6e == "No",
"T1DM",
ifelse(step_1 == "Yes" & step_1a == "No", "GDM", NA)))))) %>%
# replace NAs with None (no diabetes)
mutate_at(vars(out_cat_diabetes), ~replace_na(., "None"))
df1 <- df %>%
dplyr::select(- vax_jcvi_age_1, - vax_jcvi_age_2) %>% #  remove JCVI variables
# select patient id, death date and variables: subgroups, exposures, outcomes, covariates, quality assurance and vaccination
# need diabetes "step" variables for flowchart (diabetes_flowchart.R)
dplyr::select(patient_id, death_date,
contains(c("sub_", "exp_", "out_", "cov_", "qa_", "vax_", "step"))) %>%
dplyr::select(-contains("df_out_")) %>%
dplyr::select(-contains("tmp_"))
# SAVE
saveRDS(df1, file = paste0("output/input.rds"))
# Restrict columns and save Venn diagram input dataset -----------------------
df2 <- df %>%
dplyr::select(patient_id,
starts_with(c("out_")))
# SAVE
saveRDS(df2, file = paste0("output/venn.rds"))
# END
## =============================================================================
## Project:     Post covid unvaccinated project
##
## Purpose:  Build flowchart to illustrate the flow of diabetes diagnoses using the algorithm
##
## Authors: Kurt Taylor
## Reviewer:
##
## Content:
## 0. Load relevant libraries and read data/arguments
## 1. Construct flowchart
## 2. Save output as PNG: "diabetes_flow.png"
## =============================================================================
###############################################
# 0. Load relevant libraries and read in data #
###############################################
# Libraries
libraries <- c("readr", "dplyr", "stringr", "tidyverse", "DiagrammeR", "DiagrammeRsvg", "rsvg")
lapply(libraries, require, character.only=T)
# Load Stage 1 dataset
diabetes_df <-read_rds("output/input_stage1.rds")
###############################################
# 1. Construct flowchart -------------------- #
###############################################
# Define boxes for flow chart within a list of values using algorithm steps created in preprocess_data.R.
values <- list(
# Diabetes diagnostic code / medication / care process code plus ethnicity code in primary or secondary care
a = nrow(diabetes_df),
# Step 1 any gestational diabetes code
b = sum(diabetes_df$step_1 == "Yes", na.rm = T),
b2 = sum(diabetes_df$step_1 == "No", na.rm = T),
# Step 1a Any type 1 / type 2 code
c = sum(diabetes_df$step_1a == "Yes", na.rm = T),
c2 = sum(diabetes_df$step_1a == "No", na.rm = T),
# GESTATIONAL DIABETES
d = sum(diabetes_df$out_cat_diabetes == "GDM", na.rm = T),
# Step 2 non-metformin oral antidiabetic
e = sum(diabetes_df$step_2 == "Yes", na.rm = T),
e2 = sum(diabetes_df$step_2 == "No", na.rm = T),
# TYPE 2 DIABETES
f = sum(diabetes_df$out_cat_diabetes == "T2DM", na.rm = T),
# Step 3 Type 1 code but no Type 2 code
g = sum(diabetes_df$step_3 == "Yes", na.rm = T),
g2 = sum(diabetes_df$step_3 == "No", na.rm = T),
# TYPE 1 DIABETES
h = sum(diabetes_df$out_cat_diabetes == "T1DM", na.rm = T),
# Step 4 Type 2 code and no type 1 code
i = sum(diabetes_df$step_4 == "Yes", na.rm = T),
i2 = sum(diabetes_df$step_4 == "No", na.rm = T),
# Step 5 Aged <35 yrs (30 yrs for South Asians and African descent) at first diagnostic code)
j = sum(diabetes_df$step_5 == "Yes", na.rm = T),
j2 = sum(diabetes_df$step_5 == "No", na.rm = T),
# Step 6 Type 1 and Type 2 codes present
k = sum(diabetes_df$step_6 == "Yes", na.rm = T),
k2 = sum(diabetes_df$step_6 == "No", na.rm = T),
# Step 6a Type 1 only recorded in primary care
l = sum(diabetes_df$step_6a == "Yes", na.rm = T),
l2 = sum(diabetes_df$step_6a == "No", na.rm = T),
# Step 6b Type 2 only recorded in primary care
m = sum(diabetes_df$step_6b == "Yes", na.rm = T),
m2 = sum(diabetes_df$step_6b == "No", na.rm = T),
# Step 6c N Type 1 > N Type 2 codes
n = sum(diabetes_df$step_6c == "Yes", na.rm = T),
n2 = sum(diabetes_df$step_6c == "No", na.rm = T),
# Step 6d N Type 2 > N Type 1 codes
o = sum(diabetes_df$step_6d == "Yes", na.rm = T),
o2 = sum(diabetes_df$step_6d == "No", na.rm = T),
# Step 6e Type 2 code most recent
p = sum(diabetes_df$step_6e == "Yes", na.rm = T),
p2 = sum(diabetes_df$step_6e == "No", na.rm = T),
# Step 7 Diabetes medication OR >= 5 care process codes OR HBA1c >= 47.5mmol)
q = sum(diabetes_df$step_7 == "Yes", na.rm = T),
q2 = sum(diabetes_df$step_7 == "No", na.rm = T),
# DIABETES UNSPECIFIED TYPE
r = sum(diabetes_df$out_cat_diabetes == "DM unspecified", na.rm = T),
# DIABETES UNLIKELY
s = sum(diabetes_df$out_cat_diabetes == "DM unlikely", na.rm = T))
flow <- DiagrammeR::grViz("
digraph graph2 {
graph [layout = dot]
# NODE DEFINITIONS AND SUBSTITUTED TEXT
node [shape = rectangle, width = 4, fillcolor = Biege]
a [label = '@@1', fontname = 'Arial Rounded MT']
b [label = '@@2', fontname = 'Arial Rounded MT']
c [label = '@@3', fontname = 'Arial Rounded MT']
e [label = '@@5', fontname = 'Arial Rounded MT']
g [label = '@@7', fontname = 'Arial Rounded MT']
i [label = '@@9', fontname = 'Arial Rounded MT']
j [label = '@@10', fontname = 'Arial Rounded MT']
k [label = '@@11', fontname = 'Arial Rounded MT']
l [label = '@@12', fontname = 'Arial Rounded MT']
m [label = '@@13', fontname = 'Arial Rounded MT']
n [label = '@@14', fontname = 'Arial Rounded MT']
o [label = '@@15', fontname = 'Arial Rounded MT']
p [label = '@@16', fontname = 'Arial Rounded MT']
q [label = '@@17', fontname = 'Arial Rounded MT']
node [shape = oval, width = 4, style = filled]
d [label = '@@4', fillcolor = red, fontname = 'Arial Rounded MT Bold']
f [label = '@@6', fillcolor = red, fontname = 'Arial Rounded MT Bold']
h [label = '@@8', fillcolor = red, fontname = 'Arial Rounded MT Bold']
r [label = '@@18', fillcolor = red, fontname = 'Arial Rounded MT Bold']
s [label = '@@19', fillcolor = red, fontname = 'Arial Rounded MT Bold']
# DRAW FLOW CHART AND LABELS
a -> b
b -> c [label = 'Yes']
b -> e [label = 'No']
c -> d [label = 'No']
c -> e [label = 'Yes']
e -> f [label = 'Yes']
e -> g [label = 'No']
g -> h [label = 'Yes']
g -> i [label = 'No']
i -> f [label = 'Yes']
i -> j [label = 'No']
j -> h [label = 'Yes']
j -> k [label = 'No']
k -> l [label = 'Yes']
l -> h [label = 'Yes']
l -> m [label = 'No']
m -> f [label = 'Yes']
m -> n [label = 'No']
n -> h [label = 'Yes']
n -> o [label = 'No']
o -> f [label = 'Yes']
o -> p [label = 'No']
p -> f [label = 'Yes']
p -> h [label = 'No']
k -> q [label = 'No']
q -> r [label = 'Yes']
q -> s [label = 'No']
}
# WRITE LABELS TO BE USED ABOVE
[1]: paste0('Study population (N = ', values$a, ')')
[2]: paste0('1. Any gestational diabetes code (N Yes = ', values$b, ', N No = ', values$b2, ')')
[3]: paste0('1a. Any type 1 / type 2 codes (N Yes = ', values$c, ', N No = ', values$c2, ')')
[4]: paste0('Gestational diabetes (N = ', values$d, ')')
[5]: paste0('2. Non-metformin oral anti-diabetic (N Yes = ', values$e, ', N No = ', values$e2, ')')
[6]: paste0('Type 2 Diabetes (N = ', values$f, ')')
[7]: paste0('3. Type 1 code and no Type 2 code (N Yes = ', values$g, ', N No = ', values$g2, ')')
[8]: paste0('Type 1 Diabetes (N = ', values$h, ')')
[9]: paste0('4. Type 2 code and no Type 1 code (N Yes = ', values$i, ', N No = ', values$i2, ')')
[10]: paste0('5. Aged < 35 yrs (<30 yrs if South Asian / African) at first diagnostic code (N Yes = ', values$j, ', N No = ', values$j2, ')')
[11]: paste0('6. Type 1 and Type 2 codes present (N Yes = ', values$k, ', N No = ', values$k2, ')')
[12]: paste0('6a. Type 1 only recorded in primary care (N Yes = ', values$l, ', N No = ', values$l2, ')')
[13]: paste0('6b. Type 2 only recorded in primary care (N Yes = ', values$m, ', N No = ', values$m2, ')')
[14]: paste0('6c. N Type 1 > N Type 2 codes (N Yes = ', values$n, ', N No = ', values$n2, ')')
[15]: paste0('6d. N Type 2 > N Type 1 codes (N Yes = ', values$o, ', N No = ', values$o2, ')')
[16]: paste0('6e. Type 2 code most recent (N Yes = ', values$p, ', N No = ', values$p2, ')')
[17]: paste0('7. Diabetes medication OR >= 5 process codes OR HbA1c >= 47.5mmol (N Yes = ', values$q, ', N No = ', values$q2, ')')
[18]: paste0('Diabetes unspecified type (N = ', values$r, ')')
[19]: paste0('Diabetes unlikely (N = ', values$s, ')')
")
###############################################
# 2. Output  -------------------- #
###############################################
flow %>%
export_svg() %>%
charToRaw %>%
rsvg_png(file.path("output", "diabetes_flow.png"))
# END
## =============================================================================
## Purpose:  Create Table 2
##
## Author:   Kurt Taylor
##
## Reviewer: Rochelle Knight
##
## Date:     March 2022
##
## Data:     Post covid unvaccinated project study population
##
## Content:  Number of outcome events;
##           person years of follow up and rates of events, for each outcome
##
## Output:   CSV file for table 2.
## =============================================================================
# Libraries ---------------------------------------------------------------
library(readr); library(dplyr); library(data.table); library(lubridate)
# Study start and end date ------------------------------------------------
cohort_start = as.Date("2020-01-01", format="%Y-%m-%d")
cohort_end = as.Date("2021-06-18", format="%Y-%m-%d")
# Read active analyses -----------------------------------------------
active_analyses <- read_rds("lib/active_analyses.rds")
# Read data------------------------------------------------------------
input <- read_rds(paste0("output/input_stage1.rds"))
# cohort start date and end date
input <- input %>%
mutate(cohort_start_date = cohort_start,
cohort_end_date = cohort_end)
# Events and Table 2 df ------------------------------------------------------------------
event_dates_names <- active_analyses$outcome_variable[which(active_analyses$active==T)]
event_names <- event_names <- gsub("out_date_","",event_dates_names)
col_headings <- c("event", "event_count", "person_years_follow_up", "incidence_rate")
table_2 <- data.frame(matrix(ncol=length(col_headings), nrow=length(event_dates_names)))
colnames(table_2) <- col_headings
table_2$event <- event_names
# Build function for Table 2 ----------------------------------------------
summary_stats <- function(input, infection_subgroup, event_dates_names, index){
# event date
input <- input %>%
mutate(event_date = get(event_dates_names[index]))
# signify follow up end date
input <- input %>% rowwise() %>% mutate(follow_up_end = min(event_date, death_date, cohort_end_date, vax_date_covid_1, na.rm = TRUE))
# follow-up days
input = input %>% mutate(follow_up_period = as.numeric((as.Date(follow_up_end) - as.Date(index_date)))+1)
# follow up period and follow up years
input = input %>% filter(follow_up_period >=1 & follow_up_period <= 535) # filter out follow up period
input = input %>% mutate(follow_up_years = follow_up_period / 365.2) # follow-up years
# Event count
if(infection_subgroup == "no_infection"){
event_count <- length(which((input$event_date >= input$index_date & input$event_date <= input$follow_up_end) &
(input$event_date < input$exp_date_covid19_confirmed | is.na(input$exp_date_covid19_confirmed))
))
}else{
event_count <- length(which(input$event_date   >= input$index_date &
input$event_date >= input$exp_date_covid19_confirmed &
input$event_date <= input$follow_up_end))
}
person_years_follow_up  = round(sum(input$follow_up_years, na.rm = TRUE), 1)
incidence_rate = round(event_count/person_years_follow_up, 4)
incidence_rate_lower = incidence_rate - 1.96 * sqrt(event_count/person_years_follow_up^2)
incidence_rate_upper = incidence_rate + 1.96 * sqrt(event_count/person_years_follow_up^2)
return(c(event_count, person_years_follow_up, incidence_rate, incidence_rate_lower, incidence_rate_upper))
}
# Run function on outcomes ------------------------------------------------
for(i in 1:length(event_dates_names)){
table_2[i,2:6] <- summary_stats(input, "no_infection", event_dates_names, i)
table_2[i,7:11] <- summary_stats(input[input$sub_cat_covid19_hospital=="non_hospitalised",], "non_hospitalised", event_dates_names, i)
table_2[i,12:16] <- summary_stats(input[input$sub_cat_covid19_hospital=="hospitalised",], "hospitalised", event_dates_names, i)
table_2$total_event_count <- table_2[,2] + table_2[,7] + table_2[,12]
table_2$total_person_yrs <-  table_2[,3] + table_2[,8] + table_2[,13]
table_2$overall_incidence_rate <- round(table_2$total_event_count/table_2$total_person_yrs,4)
table_2$overall_incidence_rate_lower <- table_2$overall_incidence_rate - 1.96*sqrt(table_2$total_event_count/table_2$total_person_yrs^2)
table_2$overall_incidence_rate_upper <- table_2$overall_incidence_rate + 1.96*sqrt(table_2$total_event_count/table_2$total_person_yrs^2)
names(table_2)[2:6] <- c("no_infection_sub_event_count", "no_infection_sub_person_yrs_fp", "no_infection_sub_incidence_rate", "no_infection_sub_incidence_rate_lower", "no_infection_sub_incidence_rate_upper")
names(table_2)[7:11] <- c("non_hospitalised_sub_event_count", "non_hospitalised_sub_person_yrs_fp", "non_hospitalised_sub_incidence_rate", "non_hospitalised_sub_incidence_rate_lower","non_hospitalised_sub_incidence_rate_upper")
names(table_2)[12:16] <- c("hospitalised_sub_event_count", "hospitalised_sub_person_yrs_fp", "hospitalised_sub_incidence_rate", "hospitalised_sub_incidence_rate_lower", "hospitalised_sub_incidence_rate_upper")
names(table_2)[17:21] <- c("total_event_count", "total_person_yrs", "overall_incidence_rate", "overall_incidence_rate_lower", "overall_incidence_rate_upper")
}
# Low number suppression --------------------------------------------------
# change to "NA" if event count lower than or equal to 5
table_2[which(table_2$no_infection_sub_event_count <= 5), c(2,4,5,6)] = c("<=5", "NA", "NA", "NA")
table_2[which(table_2$non_hospitalised_sub_event_count <= 5),c(7,9,10,11)] = c("<=5", "NA", "NA", "NA")
table_2[which(table_2$hospitalised_sub_event_count <= 5),c(12,14,15,16)] = c("<=5", "NA", "NA", "NA")
table_2[which(table_2$total_event_count <= 5),c(17,19,20,21)] = c("<=5", "NA", "NA", "NA")
table_2[which(table_2$no_infection_sub_event_count == "<=5" | table_2$non_hospitalised_sub_event_count == "<=5" | table_2$hospitalised_sub_event_count == "<=5" ),c(17,19,20,21)] = c("<=5", "NA","NA","NA")
# OUTPUT ------------------------------------------------------------------
# add suffix to out file name using active analyses (diabetes or mental health)
out_group <- active_analyses %>% filter(active == TRUE) %>% distinct(outcome_group) %>% pull(outcome_group)
# save
write.csv(table_2, file= paste0("output/", "table2_",out_group,".csv"), row.names = F)
# END
View(table_2)
library(magrittr)
library(tidyverse)
# Define parameters ------------------------------------------------------------
## Study start date
study_start <- "2020-01-01"
## Load dataset
df <- arrow::read_feather(file = "output/input.feather")
# Format columns -----------------------------------------------------
# dates, numerics, factors, logicals
df <- df %>%
rename(tmp_out_max_hba1c_mmol_mol_date = tmp_out_num_max_hba1c_mmol_mol_date) %>%
mutate(across(contains('_date'), ~ as.Date(as.character(.)))) %>%
mutate(across(contains('_birth_year'), ~ format(as.Date(.), "%Y"))) %>%
mutate(across(contains('_num'), ~ as.numeric(.))) %>%
mutate(across(contains('_cat'), ~ as.factor(.))) %>%
mutate(across(contains('_bin'), ~ as.logical(.)))
# Define COVID-19 severity --------------------------------------------------------------
df <- df %>%
mutate(sub_cat_covid19_hospital =
ifelse(!is.na(exp_date_covid19_confirmed) &
!is.na(sub_date_covid19_hospital) &
sub_date_covid19_hospital - exp_date_covid19_confirmed >= 0 &
sub_date_covid19_hospital - exp_date_covid19_confirmed < 29, "hospitalised",
ifelse(!is.na(exp_date_covid19_confirmed), "non_hospitalised",
ifelse(is.na(exp_date_covid19_confirmed), "no_infection", NA)))) %>%
mutate(across(sub_cat_covid19_hospital, factor))
# Define diabetes outcome (using Sophie Eastwood algorithm) ----------------------------
# define variables needed for diabetes algorithm
df <- df %>% mutate(tmp_out_date_first_diabetes_diag = format(tmp_out_date_first_diabetes_diag,"%Y")) %>%
mutate(tmp_out_date_first_diabetes_diag = as.integer(tmp_out_date_first_diabetes_diag),
age_1st_diag = tmp_out_date_first_diabetes_diag - qa_num_birth_year) %>%
mutate(age_1st_diag = replace(age_1st_diag, which(age_1st_diag < 0), NA)) %>% # assign negative ages to NA)
mutate(age_under_35_30_1st_diag = ifelse(!is.na(age_1st_diag) &
(age_1st_diag < 35 &
(cov_cat_ethnicity == 1 | cov_cat_ethnicity == 2  | cov_cat_ethnicity == 5)) |
(age_1st_diag < 30), "Yes", "No"),
over5_pocc = ifelse(!is.na(tmp_out_count_poccdm_snomed) &
(tmp_out_count_poccdm_snomed > 5), "Yes", "No"))
summary(df$tmp_out_num_max_hba1c_mmol_mol)
df2 <- df %>% filter(tmp_out_num_max_hba1c_mmol_mol >= 47.5)
table(df$tmp_out_count_poccdm_snomed)
libraries <- c("readr", "dplyr", "stringr", "tidyverse", "DiagrammeR", "DiagrammeRsvg", "rsvg")
lapply(libraries, require, character.only=T)
# Load Stage 1 dataset
diabetes_df <-read_rds("output/input_stage1.rds")
###############################################
# 1. Construct flowchart -------------------- #
###############################################
# Define boxes for flow chart within a list of values using algorithm steps created in preprocess_data.R.
values <- list(
# Diabetes diagnostic code / medication / care process code plus ethnicity code in primary or secondary care
a = nrow(diabetes_df),
# Step 1 any gestational diabetes code
b = sum(diabetes_df$step_1 == "Yes", na.rm = T),
b2 = sum(diabetes_df$step_1 == "No", na.rm = T),
# Step 1a Any type 1 / type 2 code
c = sum(diabetes_df$step_1a == "Yes", na.rm = T),
c2 = sum(diabetes_df$step_1a == "No", na.rm = T),
# GESTATIONAL DIABETES
d = sum(diabetes_df$out_cat_diabetes == "GDM", na.rm = T),
# Step 2 non-metformin oral antidiabetic
e = sum(diabetes_df$step_2 == "Yes", na.rm = T),
e2 = sum(diabetes_df$step_2 == "No", na.rm = T),
# TYPE 2 DIABETES
f = sum(diabetes_df$out_cat_diabetes == "T2DM", na.rm = T),
# Step 3 Type 1 code but no Type 2 code
g = sum(diabetes_df$step_3 == "Yes", na.rm = T),
g2 = sum(diabetes_df$step_3 == "No", na.rm = T),
# TYPE 1 DIABETES
h = sum(diabetes_df$out_cat_diabetes == "T1DM", na.rm = T),
# Step 4 Type 2 code and no type 1 code
i = sum(diabetes_df$step_4 == "Yes", na.rm = T),
i2 = sum(diabetes_df$step_4 == "No", na.rm = T),
# Step 5 Aged <35 yrs (30 yrs for South Asians and African descent) at first diagnostic code)
j = sum(diabetes_df$step_5 == "Yes", na.rm = T),
j2 = sum(diabetes_df$step_5 == "No", na.rm = T),
# Step 6 Type 1 and Type 2 codes present
k = sum(diabetes_df$step_6 == "Yes", na.rm = T),
k2 = sum(diabetes_df$step_6 == "No", na.rm = T),
# Step 6a Type 1 only recorded in primary care
l = sum(diabetes_df$step_6a == "Yes", na.rm = T),
l2 = sum(diabetes_df$step_6a == "No", na.rm = T),
# Step 6b Type 2 only recorded in primary care
m = sum(diabetes_df$step_6b == "Yes", na.rm = T),
m2 = sum(diabetes_df$step_6b == "No", na.rm = T),
# Step 6c N Type 1 > N Type 2 codes
n = sum(diabetes_df$step_6c == "Yes", na.rm = T),
n2 = sum(diabetes_df$step_6c == "No", na.rm = T),
# Step 6d N Type 2 > N Type 1 codes
o = sum(diabetes_df$step_6d == "Yes", na.rm = T),
o2 = sum(diabetes_df$step_6d == "No", na.rm = T),
# Step 6e Type 2 code most recent
p = sum(diabetes_df$step_6e == "Yes", na.rm = T),
p2 = sum(diabetes_df$step_6e == "No", na.rm = T),
# Step 7 Diabetes medication OR >= 5 care process codes OR HBA1c >= 47.5mmol)
q = sum(diabetes_df$step_7 == "Yes", na.rm = T),
q2 = sum(diabetes_df$step_7 == "No", na.rm = T),
# DIABETES UNSPECIFIED TYPE
r = sum(diabetes_df$out_cat_diabetes == "DM unspecified", na.rm = T),
# DIABETES UNLIKELY
s = sum(diabetes_df$out_cat_diabetes == "DM unlikely", na.rm = T))
flow <- DiagrammeR::grViz("
digraph graph2 {
graph [layout = dot]
# NODE DEFINITIONS AND SUBSTITUTED TEXT
node [shape = rectangle, width = 4, fillcolor = Biege]
a [label = '@@1', fontname = 'Arial Rounded MT']
b [label = '@@2', fontname = 'Arial Rounded MT']
c [label = '@@3', fontname = 'Arial Rounded MT']
e [label = '@@5', fontname = 'Arial Rounded MT']
g [label = '@@7', fontname = 'Arial Rounded MT']
i [label = '@@9', fontname = 'Arial Rounded MT']
j [label = '@@10', fontname = 'Arial Rounded MT']
k [label = '@@11', fontname = 'Arial Rounded MT']
l [label = '@@12', fontname = 'Arial Rounded MT']
m [label = '@@13', fontname = 'Arial Rounded MT']
n [label = '@@14', fontname = 'Arial Rounded MT']
o [label = '@@15', fontname = 'Arial Rounded MT']
p [label = '@@16', fontname = 'Arial Rounded MT']
q [label = '@@17', fontname = 'Arial Rounded MT']
node [shape = oval, width = 4, style = filled]
d [label = '@@4', fillcolor = red, fontname = 'Arial Rounded MT Bold']
f [label = '@@6', fillcolor = red, fontname = 'Arial Rounded MT Bold']
h [label = '@@8', fillcolor = red, fontname = 'Arial Rounded MT Bold']
r [label = '@@18', fillcolor = red, fontname = 'Arial Rounded MT Bold']
s [label = '@@19', fillcolor = red, fontname = 'Arial Rounded MT Bold']
# DRAW FLOW CHART AND LABELS
a -> b
b -> c [label = 'Yes']
b -> e [label = 'No']
c -> d [label = 'No']
c -> e [label = 'Yes']
e -> f [label = 'Yes']
e -> g [label = 'No']
g -> h [label = 'Yes']
g -> i [label = 'No']
i -> f [label = 'Yes']
i -> j [label = 'No']
j -> h [label = 'Yes']
j -> k [label = 'No']
k -> l [label = 'Yes']
l -> h [label = 'Yes']
l -> m [label = 'No']
m -> f [label = 'Yes']
m -> n [label = 'No']
n -> h [label = 'Yes']
n -> o [label = 'No']
o -> f [label = 'Yes']
o -> p [label = 'No']
p -> f [label = 'Yes']
p -> h [label = 'No']
k -> q [label = 'No']
q -> r [label = 'Yes']
q -> s [label = 'No']
}
# WRITE LABELS TO BE USED ABOVE
[1]: paste0('Study population (N = ', values$a, ')')
[2]: paste0('1. Any gestational diabetes code (N Yes = ', values$b, ', N No = ', values$b2, ')')
[3]: paste0('1a. Any type 1 / type 2 codes (N Yes = ', values$c, ', N No = ', values$c2, ')')
[4]: paste0('Gestational diabetes (N = ', values$d, ')')
[5]: paste0('2. Non-metformin oral anti-diabetic (N Yes = ', values$e, ', N No = ', values$e2, ')')
[6]: paste0('Type 2 Diabetes (N = ', values$f, ')')
[7]: paste0('3. Type 1 code and no Type 2 code (N Yes = ', values$g, ', N No = ', values$g2, ')')
[8]: paste0('Type 1 Diabetes (N = ', values$h, ')')
[9]: paste0('4. Type 2 code and no Type 1 code (N Yes = ', values$i, ', N No = ', values$i2, ')')
[10]: paste0('5. Aged < 35 yrs (<30 yrs if South Asian / African) at first diagnostic code (N Yes = ', values$j, ', N No = ', values$j2, ')')
[11]: paste0('6. Type 1 and Type 2 codes present (N Yes = ', values$k, ', N No = ', values$k2, ')')
[12]: paste0('6a. Type 1 only recorded in primary care (N Yes = ', values$l, ', N No = ', values$l2, ')')
[13]: paste0('6b. Type 2 only recorded in primary care (N Yes = ', values$m, ', N No = ', values$m2, ')')
[14]: paste0('6c. N Type 1 > N Type 2 codes (N Yes = ', values$n, ', N No = ', values$n2, ')')
[15]: paste0('6d. N Type 2 > N Type 1 codes (N Yes = ', values$o, ', N No = ', values$o2, ')')
[16]: paste0('6e. Type 2 code most recent (N Yes = ', values$p, ', N No = ', values$p2, ')')
[17]: paste0('7. Diabetes medication OR >= 5 process codes OR HbA1c >= 47.5mmol (N Yes = ', values$q, ', N No = ', values$q2, ')')
[18]: paste0('Diabetes unspecified type (N = ', values$r, ')')
[19]: paste0('Diabetes unlikely (N = ', values$s, ')')
")
###############################################
# 2. Output  -------------------- #
###############################################
flow %>%
export_svg() %>%
charToRaw %>%
rsvg_png(file.path("output", "diabetes_flow.png"))
# END
summary(df$tmp_out_num_max_hba1c_mmol_mol)
df3 <- df %>% filter(tmp_out_num_max_hba1c_mmol_mol >= 47.5)
## Load dataset
df <- arrow::read_feather(file = "output/input.feather")
# Format columns -----------------------------------------------------
# dates, numerics, factors, logicals
df <- df %>%
rename(tmp_out_max_hba1c_mmol_mol_date = tmp_out_num_max_hba1c_mmol_mol_date) %>%
mutate(across(contains('_date'), ~ as.Date(as.character(.)))) %>%
mutate(across(contains('_birth_year'), ~ format(as.Date(.), "%Y"))) %>%
mutate(across(contains('_num'), ~ as.numeric(.))) %>%
mutate(across(contains('_cat'), ~ as.factor(.))) %>%
mutate(across(contains('_bin'), ~ as.logical(.)))
# Define COVID-19 severity --------------------------------------------------------------
df <- df %>%
mutate(sub_cat_covid19_hospital =
ifelse(!is.na(exp_date_covid19_confirmed) &
!is.na(sub_date_covid19_hospital) &
sub_date_covid19_hospital - exp_date_covid19_confirmed >= 0 &
sub_date_covid19_hospital - exp_date_covid19_confirmed < 29, "hospitalised",
ifelse(!is.na(exp_date_covid19_confirmed), "non_hospitalised",
ifelse(is.na(exp_date_covid19_confirmed), "no_infection", NA)))) %>%
mutate(across(sub_cat_covid19_hospital, factor))
# Define diabetes outcome (using Sophie Eastwood algorithm) ----------------------------
# define variables needed for diabetes algorithm
df <- df %>% mutate(tmp_out_date_first_diabetes_diag = format(tmp_out_date_first_diabetes_diag,"%Y")) %>%
mutate(tmp_out_date_first_diabetes_diag = as.integer(tmp_out_date_first_diabetes_diag),
age_1st_diag = tmp_out_date_first_diabetes_diag - qa_num_birth_year) %>%
mutate(age_1st_diag = replace(age_1st_diag, which(age_1st_diag < 0), NA)) %>% # assign negative ages to NA)
mutate(age_under_35_30_1st_diag = ifelse(!is.na(age_1st_diag) &
(age_1st_diag < 35 &
(cov_cat_ethnicity == 1 | cov_cat_ethnicity == 2  | cov_cat_ethnicity == 5)) |
(age_1st_diag < 30), "Yes", "No"),
over5_pocc = ifelse(!is.na(tmp_out_count_poccdm_snomed) &
(tmp_out_count_poccdm_snomed > 5), "Yes", "No"))
# Diabetes adjudication algorithm
df3 <- df %>% filter(tmp_out_num_max_hba1c_mmol_mol >= 47.5)
