cov_cat_ethnicity == 5 ~ "Other")) %>%
mutate(cov_cat_ethnicity = ordered(cov_cat_ethnicity, levels = c("White","Mixed","South Asian","Black","Other","Missing")),
# smoking
cov_cat_smoking_status = case_when(cov_cat_smoking_status == "E" ~ "Ever smoker",
cov_cat_smoking_status == "M" ~ "Missing",
cov_cat_smoking_status == "N" ~ "Never smoker",
cov_cat_smoking_status == "S" ~ "Current smoker")) %>%
mutate(cov_cat_smoking_status = ordered(cov_cat_smoking_status, levels = c("Never smoker","Ever smoker","Current smoker","Missing")),
# region
cov_cat_region = relevel(cov_cat_region, ref = "London"),
# sex
cov_cat_sex = case_when(cov_cat_sex == "F" ~ "Female",
cov_cat_sex == "M" ~ "Male")) %>%
mutate(cov_cat_sex = relevel(factor(cov_cat_sex), ref = "Female"),
# cat jcvi group
vax_cat_jcvi_group = ordered(vax_cat_jcvi_group, levels = c("12","11","10","09","08","07","06","05","04","03","02","01","99"))) %>%
# deprivation: First - most deprived; fifth -least deprived
mutate(cov_cat_deprivation = ifelse(cov_cat_deprivation == 1 | cov_cat_deprivation == 2, "1-2 (most deprived)",
ifelse(cov_cat_deprivation == 3 | cov_cat_deprivation == 4, "3-4",
ifelse(cov_cat_deprivation == 5 | cov_cat_deprivation == 6, "5-6",
ifelse(cov_cat_deprivation == 7 | cov_cat_deprivation == 8, "7-8",
ifelse(cov_cat_deprivation == 9 | cov_cat_deprivation == 10, "9-10 (least deprived)", NA)))))) %>%
mutate_at(vars(cov_cat_deprivation), as.factor) %>%
mutate(cov_cat_deprivation = ordered(cov_cat_deprivation, levels = c("1-2 (most deprived)","3-4","5-6","7-8","9-10 (least deprived)")))
# Save meta data
describe_vars <- tidyselect::vars_select(names(input), contains(c('_cat_', 'cov_bin','cov_cat','qa_bin','exp_cat','vax_cat'), ignore.case = TRUE))
meta_data_factors <- lapply(input[,describe_vars], table)
sink(file = file.path("output", paste0("meta_data_factors2.csv")))
print(meta_data_factors)
sink()
#####################
# 2. Apply QA rules #
#####################
input <- input %>%
# Rule 1: Year of birth is after year of death or patient only has year of death
mutate(rule1 = ifelse((qa_num_birth_year > (format(death_date, format="%Y")) &
! is.na(qa_num_birth_year) &
! is.na(death_date) | is.na(qa_num_birth_year) &
! is.na(death_date)), TRUE, FALSE),
# Rule 2: Year of birth predates NHS established year or year of birth exceeds current date
rule2 = ifelse((qa_num_birth_year < 1793 | (qa_num_birth_year > format(Sys.Date(),"%Y"))) & ! is.na(qa_num_birth_year), TRUE, FALSE),
# Rule 3: Date of death is NULL or invalid (on or before 1/1/1900 or after current date)
rule3 = ifelse((death_date <= "1900-01-01" | death_date > format(Sys.Date(),"%Y-%m-%d")) & ! is.na(death_date), TRUE, FALSE),
# Rule 4: Pregnancy/birth codes for men
rule4 = ifelse(qa_bin_pregnancy == TRUE & cov_cat_sex=="Male", TRUE, FALSE),
# Rule 5: HRT or COCP meds for men
rule5 = ifelse(cov_cat_sex=="Male" & cov_bin_hormone_replacement_therapy==TRUE | cov_cat_sex=="Male" & cov_bin_combined_oral_contraceptive_pill == TRUE, TRUE, FALSE),
# Rule 6: Prostate cancer codes for women
rule6 = ifelse(qa_bin_prostate_cancer == TRUE & cov_cat_sex=="Female", TRUE, FALSE))
# Rule 7: Check index_date (from new 2022 datasets)
input$rule7=NA
input$rule7= (is.na(start_date)==TRUE)
# Remove rows that are TRUE for at least one rule
input_QA <- input %>% filter(rule1 == FALSE & rule2 == FALSE & rule3 == FALSE & rule4 == FALSE & rule5 == FALSE & rule6 == FALSE & rule7 == FALSE)
# Produce QA summary
QA_summary <- data.frame(matrix(ncol = 2))
colnames(QA_summary) <- c('Rule', 'N rule TRUE')
QA_summary[1:8, 1] <- c("Rule 1", "Rule 2", "Rule 3", "Rule 4", "Rule 5", "Rule 6", "Rule 7", "Total excluded from QA")
QA_summary[1,2]=nrow(input%>%filter(rule1==T))
QA_summary[2,2]=nrow(input%>%filter(rule2==T))
QA_summary[3,2]=nrow(input%>%filter(rule3==T))
QA_summary[4,2]=nrow(input%>%filter(rule4==T))
QA_summary[5,2]=nrow(input%>%filter(rule5==T))
QA_summary[6,2]=nrow(input%>%filter(rule6==T))
QA_summary[7,2]=nrow(input%>%filter(rule7==T))
QA_summary[8,2]=nrow(input)-nrow(input_QA)
#Save QA summary as .csv
write.csv(QA_summary, file = file.path("output", paste0("QA_summary_.csv")) , row.names=F)
# Remove QA variables from dataset
input <- input_QA %>%
select(-c(rule1,rule2,rule3,rule4,rule5,rule6,rule7,
qa_num_birth_year, qa_bin_pregnancy, qa_bin_prostate_cancer))
#########################################
# 3. Apply exclusion/inclusion criteria #
#########################################
# Define the cohort flow
cohort_flow <- data.frame(N = numeric(),
Description = character(),
stringsAsFactors = FALSE)
cohort_flow[nrow(cohort_flow)+1,] <- c(nrow(input),"Study defined sample size")
input <- input %>%
mutate(start_alive = ifelse(death_date < index_date, 0, 1)) %>%
mutate(start_alive = replace_na(start_alive, 1))
# NOTE: This code output are 3 .csv files and 1 R dataset
##       Output files have a specific name to reflect either the Vaccinated
##       or Electively unvaccinated cohort
##
## =============================================================================
###############################################
# 0. Load relevant libraries and read in data #
###############################################
library(readr)
library(dplyr)
library(stringr)
library(tidyverse)
# Input dataset
input <-read_rds("output/input.rds")
# Define general start date and end date
start_date = as.Date("2020-01-01")
end_date = as.Date("2021-06-18") # General End date: 2021-06-18 (date last JCVI group eligible for vaccination - Decision on Jan 18th 2022)
input <- input %>%
mutate(index_date = as.Date(start_date),
end_date = as.Date(end_date))
# NOTE: no censoring of end date for death/event at this stage
######################################################
# 1. Prepare all variables (re-factoring, re-typing) #
######################################################
# Get the names of variables which are factors
factor_names <- tidyselect::vars_select(names(input), contains(c('_cat_'), ignore.case = TRUE))
input <- input %>%
# handle missing values
mutate(cov_cat_smoking_status = replace_na(cov_cat_smoking_status, "M"),
# Replace " " with "_"
cov_cat_region = gsub(" ", "_", cov_cat_region)) %>%
# Set the variables that should be factor variables as factor
mutate(across(any_of(factor_names), function(x) factor(x, ordered = FALSE))) %>%
# Re-code vars and specify references
mutate(sub_cat_covid19_hospital = ordered(sub_cat_covid19_hospital, levels = c("non_hospitalised","hospitalised","no_infection")),
# ethnicity
cov_cat_ethnicity = case_when(cov_cat_ethnicity == 0 ~ "Missing",
cov_cat_ethnicity == 1 ~ "White",
cov_cat_ethnicity == 2 ~ "Mixed",
cov_cat_ethnicity == 3 ~ "South Asian",
cov_cat_ethnicity == 4 ~ "Black",
cov_cat_ethnicity == 5 ~ "Other")) %>%
mutate(cov_cat_ethnicity = ordered(cov_cat_ethnicity, levels = c("White","Mixed","South Asian","Black","Other","Missing")),
# smoking
cov_cat_smoking_status = case_when(cov_cat_smoking_status == "E" ~ "Ever smoker",
cov_cat_smoking_status == "M" ~ "Missing",
cov_cat_smoking_status == "N" ~ "Never smoker",
cov_cat_smoking_status == "S" ~ "Current smoker")) %>%
mutate(cov_cat_smoking_status = ordered(cov_cat_smoking_status, levels = c("Never smoker","Ever smoker","Current smoker","Missing")),
# region
cov_cat_region = relevel(cov_cat_region, ref = "London"),
# sex
cov_cat_sex = case_when(cov_cat_sex == "F" ~ "Female",
cov_cat_sex == "M" ~ "Male")) %>%
mutate(cov_cat_sex = relevel(factor(cov_cat_sex), ref = "Female"),
# cat jcvi group
vax_cat_jcvi_group = ordered(vax_cat_jcvi_group, levels = c("12","11","10","09","08","07","06","05","04","03","02","01","99"))) %>%
# deprivation: First - most deprived; fifth -least deprived
mutate(cov_cat_deprivation = ifelse(cov_cat_deprivation == 1 | cov_cat_deprivation == 2, "1-2 (most deprived)",
ifelse(cov_cat_deprivation == 3 | cov_cat_deprivation == 4, "3-4",
ifelse(cov_cat_deprivation == 5 | cov_cat_deprivation == 6, "5-6",
ifelse(cov_cat_deprivation == 7 | cov_cat_deprivation == 8, "7-8",
ifelse(cov_cat_deprivation == 9 | cov_cat_deprivation == 10, "9-10 (least deprived)", NA)))))) %>%
mutate_at(vars(cov_cat_deprivation), as.factor) %>%
mutate(cov_cat_deprivation = ordered(cov_cat_deprivation, levels = c("1-2 (most deprived)","3-4","5-6","7-8","9-10 (least deprived)")))
# Save meta data
describe_vars <- tidyselect::vars_select(names(input), contains(c('_cat_', 'cov_bin','cov_cat','qa_bin','exp_cat','vax_cat'), ignore.case = TRUE))
meta_data_factors <- lapply(input[,describe_vars], table)
sink(file = file.path("output", paste0("meta_data_factors2.csv")))
print(meta_data_factors)
sink()
#####################
# 2. Apply QA rules #
#####################
input <- input %>%
# Rule 1: Year of birth is after year of death or patient only has year of death
mutate(rule1 = ifelse((qa_num_birth_year > (format(death_date, format="%Y")) &
! is.na(qa_num_birth_year) &
! is.na(death_date) | is.na(qa_num_birth_year) &
! is.na(death_date)), TRUE, FALSE),
# Rule 2: Year of birth predates NHS established year or year of birth exceeds current date
rule2 = ifelse((qa_num_birth_year < 1793 | (qa_num_birth_year > format(Sys.Date(),"%Y"))) & ! is.na(qa_num_birth_year), TRUE, FALSE),
# Rule 3: Date of death is NULL or invalid (on or before 1/1/1900 or after current date)
rule3 = ifelse((death_date <= "1900-01-01" | death_date > format(Sys.Date(),"%Y-%m-%d")) & ! is.na(death_date), TRUE, FALSE),
# Rule 4: Pregnancy/birth codes for men
rule4 = ifelse(qa_bin_pregnancy == TRUE & cov_cat_sex=="Male", TRUE, FALSE),
# Rule 5: HRT or COCP meds for men
rule5 = ifelse(cov_cat_sex=="Male" & cov_bin_hormone_replacement_therapy==TRUE | cov_cat_sex=="Male" & cov_bin_combined_oral_contraceptive_pill == TRUE, TRUE, FALSE),
# Rule 6: Prostate cancer codes for women
rule6 = ifelse(qa_bin_prostate_cancer == TRUE & cov_cat_sex=="Female", TRUE, FALSE))
# Rule 7: Check index_date (from new 2022 datasets)
input$rule7=NA
input$rule7= (is.na(start_date)==TRUE)
# Remove rows that are TRUE for at least one rule
input_QA <- input %>% filter(rule1 == FALSE & rule2 == FALSE & rule3 == FALSE & rule4 == FALSE & rule5 == FALSE & rule6 == FALSE & rule7 == FALSE)
# Produce QA summary
QA_summary <- data.frame(matrix(ncol = 2))
colnames(QA_summary) <- c('Rule', 'N rule TRUE')
QA_summary[1:8, 1] <- c("Rule 1", "Rule 2", "Rule 3", "Rule 4", "Rule 5", "Rule 6", "Rule 7", "Total excluded from QA")
QA_summary[1,2]=nrow(input%>%filter(rule1==T))
QA_summary[2,2]=nrow(input%>%filter(rule2==T))
QA_summary[3,2]=nrow(input%>%filter(rule3==T))
QA_summary[4,2]=nrow(input%>%filter(rule4==T))
QA_summary[5,2]=nrow(input%>%filter(rule5==T))
QA_summary[6,2]=nrow(input%>%filter(rule6==T))
QA_summary[7,2]=nrow(input%>%filter(rule7==T))
QA_summary[8,2]=nrow(input)-nrow(input_QA)
#Save QA summary as .csv
write.csv(QA_summary, file = file.path("output", paste0("QA_summary_.csv")) , row.names=F)
# Remove QA variables from dataset
input <- input_QA %>%
select(-c(rule1,rule2,rule3,rule4,rule5,rule6,rule7,
qa_num_birth_year, qa_bin_pregnancy, qa_bin_prostate_cancer))
#########################################
# 3. Apply exclusion/inclusion criteria #
#########################################
# Define the cohort flow
cohort_flow <- data.frame(N = numeric(),
Description = character(),
stringsAsFactors = FALSE)
cohort_flow[nrow(cohort_flow)+1,] <- c(nrow(input),"Study defined sample size")
#----------------------------------------------------------------#
# 3.ba. Apply the 6 common criteria applicable to both sub-cohort #
#----------------------------------------------------------------#
# Inclusion criteria 1: Alive on the first day of follow up
input <- input %>%
mutate(start_alive = ifelse(death_date < index_date, 0, 1)) %>%
mutate(start_alive = replace_na(start_alive, 1))
table(input$start_alive)
input <- input %>%
mutate(start_alive = ifelse(death_date < index_date, 0, 1))
table(input$start_alive)
class(input$death_date)
class(input$index_date)
summary(input$death_date)
summary(input$start_alive)
input <- input %>%
mutate(start_alive = ifelse(death_date < index_date, 0, 1)) %>%
mutate(start_alive = replace_na(start_alive, 1))
summary(input$start_alive)
table(input$start_alive)
View(input)
library(readr)
library(dplyr)
library(stringr)
library(tidyverse)
# Input dataset
input <-read_rds("output/input.rds")
# Define general start date and end date
start_date = as.Date("2020-02-02")
end_date = as.Date("2021-06-18") # General End date: 2021-06-18 (date last JCVI group eligible for vaccination - Decision on Jan 18th 2022)
input <- input %>%
mutate(index_date = as.Date(start_date),
end_date = as.Date(end_date))
# NOTE: no censoring of end date for death/event at this stage
######################################################
# 1. Prepare all variables (re-factoring, re-typing) #
######################################################
# Get the names of variables which are factors
factor_names <- tidyselect::vars_select(names(input), contains(c('_cat_'), ignore.case = TRUE))
input <- input %>%
# handle missing values
mutate(cov_cat_smoking_status = replace_na(cov_cat_smoking_status, "M"),
# Replace " " with "_"
cov_cat_region = gsub(" ", "_", cov_cat_region)) %>%
# Set the variables that should be factor variables as factor
mutate(across(any_of(factor_names), function(x) factor(x, ordered = FALSE))) %>%
# Re-code vars and specify references
mutate(sub_cat_covid19_hospital = ordered(sub_cat_covid19_hospital, levels = c("non_hospitalised","hospitalised","no_infection")),
# ethnicity
cov_cat_ethnicity = case_when(cov_cat_ethnicity == 0 ~ "Missing",
cov_cat_ethnicity == 1 ~ "White",
cov_cat_ethnicity == 2 ~ "Mixed",
cov_cat_ethnicity == 3 ~ "South Asian",
cov_cat_ethnicity == 4 ~ "Black",
cov_cat_ethnicity == 5 ~ "Other")) %>%
mutate(cov_cat_ethnicity = ordered(cov_cat_ethnicity, levels = c("White","Mixed","South Asian","Black","Other","Missing")),
# smoking
cov_cat_smoking_status = case_when(cov_cat_smoking_status == "E" ~ "Ever smoker",
cov_cat_smoking_status == "M" ~ "Missing",
cov_cat_smoking_status == "N" ~ "Never smoker",
cov_cat_smoking_status == "S" ~ "Current smoker")) %>%
mutate(cov_cat_smoking_status = ordered(cov_cat_smoking_status, levels = c("Never smoker","Ever smoker","Current smoker","Missing")),
# region
cov_cat_region = relevel(cov_cat_region, ref = "London"),
# sex
cov_cat_sex = case_when(cov_cat_sex == "F" ~ "Female",
cov_cat_sex == "M" ~ "Male")) %>%
mutate(cov_cat_sex = relevel(factor(cov_cat_sex), ref = "Female"),
# cat jcvi group
vax_cat_jcvi_group = ordered(vax_cat_jcvi_group, levels = c("12","11","10","09","08","07","06","05","04","03","02","01","99"))) %>%
# deprivation: First - most deprived; fifth -least deprived
mutate(cov_cat_deprivation = ifelse(cov_cat_deprivation == 1 | cov_cat_deprivation == 2, "1-2 (most deprived)",
ifelse(cov_cat_deprivation == 3 | cov_cat_deprivation == 4, "3-4",
ifelse(cov_cat_deprivation == 5 | cov_cat_deprivation == 6, "5-6",
ifelse(cov_cat_deprivation == 7 | cov_cat_deprivation == 8, "7-8",
ifelse(cov_cat_deprivation == 9 | cov_cat_deprivation == 10, "9-10 (least deprived)", NA)))))) %>%
mutate_at(vars(cov_cat_deprivation), as.factor) %>%
mutate(cov_cat_deprivation = ordered(cov_cat_deprivation, levels = c("1-2 (most deprived)","3-4","5-6","7-8","9-10 (least deprived)")))
# Save meta data
describe_vars <- tidyselect::vars_select(names(input), contains(c('_cat_', 'cov_bin','cov_cat','qa_bin','exp_cat','vax_cat'), ignore.case = TRUE))
meta_data_factors <- lapply(input[,describe_vars], table)
sink(file = file.path("output", paste0("meta_data_factors2.csv")))
print(meta_data_factors)
sink()
#####################
# 2. Apply QA rules #
#####################
input <- input %>%
# Rule 1: Year of birth is after year of death or patient only has year of death
mutate(rule1 = ifelse((qa_num_birth_year > (format(death_date, format="%Y")) &
! is.na(qa_num_birth_year) &
! is.na(death_date) | is.na(qa_num_birth_year) &
! is.na(death_date)), TRUE, FALSE),
# Rule 2: Year of birth predates NHS established year or year of birth exceeds current date
rule2 = ifelse((qa_num_birth_year < 1793 | (qa_num_birth_year > format(Sys.Date(),"%Y"))) & ! is.na(qa_num_birth_year), TRUE, FALSE),
# Rule 3: Date of death is NULL or invalid (on or before 1/1/1900 or after current date)
rule3 = ifelse((death_date <= "1900-01-01" | death_date > format(Sys.Date(),"%Y-%m-%d")) & ! is.na(death_date), TRUE, FALSE),
# Rule 4: Pregnancy/birth codes for men
rule4 = ifelse(qa_bin_pregnancy == TRUE & cov_cat_sex=="Male", TRUE, FALSE),
# Rule 5: HRT or COCP meds for men
rule5 = ifelse(cov_cat_sex=="Male" & cov_bin_hormone_replacement_therapy==TRUE | cov_cat_sex=="Male" & cov_bin_combined_oral_contraceptive_pill == TRUE, TRUE, FALSE),
# Rule 6: Prostate cancer codes for women
rule6 = ifelse(qa_bin_prostate_cancer == TRUE & cov_cat_sex=="Female", TRUE, FALSE))
# Rule 7: Check index_date (from new 2022 datasets)
input$rule7=NA
input$rule7= (is.na(start_date)==TRUE)
# Remove rows that are TRUE for at least one rule
input_QA <- input %>% filter(rule1 == FALSE & rule2 == FALSE & rule3 == FALSE & rule4 == FALSE & rule5 == FALSE & rule6 == FALSE & rule7 == FALSE)
# Produce QA summary
QA_summary <- data.frame(matrix(ncol = 2))
colnames(QA_summary) <- c('Rule', 'N rule TRUE')
QA_summary[1:8, 1] <- c("Rule 1", "Rule 2", "Rule 3", "Rule 4", "Rule 5", "Rule 6", "Rule 7", "Total excluded from QA")
QA_summary[1,2]=nrow(input%>%filter(rule1==T))
QA_summary[2,2]=nrow(input%>%filter(rule2==T))
QA_summary[3,2]=nrow(input%>%filter(rule3==T))
QA_summary[4,2]=nrow(input%>%filter(rule4==T))
QA_summary[5,2]=nrow(input%>%filter(rule5==T))
QA_summary[6,2]=nrow(input%>%filter(rule6==T))
QA_summary[7,2]=nrow(input%>%filter(rule7==T))
QA_summary[8,2]=nrow(input)-nrow(input_QA)
#Save QA summary as .csv
write.csv(QA_summary, file = file.path("output", paste0("QA_summary_.csv")) , row.names=F)
# Remove QA variables from dataset
input <- input_QA %>%
select(-c(rule1,rule2,rule3,rule4,rule5,rule6,rule7,
qa_num_birth_year, qa_bin_pregnancy, qa_bin_prostate_cancer))
#########################################
# 3. Apply exclusion/inclusion criteria #
#########################################
# Define the cohort flow
cohort_flow <- data.frame(N = numeric(),
Description = character(),
stringsAsFactors = FALSE)
cohort_flow[nrow(cohort_flow)+1,] <- c(nrow(input),"Study defined sample size")
#----------------------------------------------------------------#
# 3.ba. Apply the 6 common criteria applicable to both sub-cohort #
#----------------------------------------------------------------#
# Inclusion cri
input <- input %>%
mutate(start_alive = ifelse(death_date < index_date, 0, 1)) %>%
mutate(start_alive = replace_na(start_alive, 1)) %>%
filter(start_alive == 1)
cohort_flow[nrow(cohort_flow)+1,] <- c(nrow(input),"Criteria 1 (Inclusion): Alive on the first day of follow up") # Feed into the cohort flow
View(cohort_flow)
table(input$cov_num_age)
cohort_flow[nrow(cohort_flow)+1,] <- c(nrow(input),"Criteria 2 (Inclusion): Known age between 18 and 110 on 01/06/2021") # Feed into the cohort flow
input <- input %>%
filter(cov_num_age >= 18 & cov_num_age <- 110)
input <- input %>%
filter(cov_num_age >= 18 && cov_num_age <- 110)
input <- input %>%
filter(cov_num_age >= 18 & cov_num_age <= 110)
cohort_flow[nrow(cohort_flow)+1,] <- c(nrow(input),"Criteria 2 (Inclusion): Known age between 18 and 110 on 01/06/2021") # Feed into the cohort flow
View(cohort_flow)
library(magrittr)
library(tidyverse)
# Define parameters ------------------------------------------------------------
## Study start date
study_start <- "2020-01-01"
## Load dataset
df <- arrow::read_feather(file = "output/input.feather")
# Format columns -----------------------------------------------------
# dates, numerics, factors, logicals
df <- df %>%
rename(tmp_out_max_hba1c_mmol_mol_date = tmp_out_num_max_hba1c_mmol_mol_date) %>%
mutate(across(contains('_date'), ~ as.Date(as.character(.)))) %>%
mutate(across(contains('_birth_year'), ~ format(as.Date(.), "%Y"))) %>%
mutate(across(contains('_num'), ~ as.numeric(.))) %>%
mutate(across(contains('_cat'), ~ as.factor(.))) %>%
mutate(across(contains('_bin'), ~ as.logical(.)))
# Define COVID-19 severity --------------------------------------------------------------
df <- df %>%
mutate(sub_cat_covid19_hospital =
ifelse(!is.na(exp_date_covid19_confirmed) &
!is.na(sub_date_covid19_hospital) &
sub_date_covid19_hospital - exp_date_covid19_confirmed >= 0 &
sub_date_covid19_hospital - exp_date_covid19_confirmed < 29, "hospitalised",
ifelse(!is.na(exp_date_covid19_confirmed), "non_hospitalised",
ifelse(is.na(exp_date_covid19_confirmed), "no_infection", NA)))) %>%
mutate(across(sub_cat_covid19_hospital, factor))
# Define diabetes outcome (using Sophie Eastwood algorithm) ----------------------------
# define variables needed for diabetes algorithm
df <- df %>% mutate(tmp_out_date_first_diabetes_diag = format(tmp_out_date_first_diabetes_diag,"%Y")) %>%
mutate(tmp_out_date_first_diabetes_diag = as.integer(tmp_out_date_first_diabetes_diag),
age_1st_diag = tmp_out_date_first_diabetes_diag - qa_num_birth_year,
age_under_35_30_1st_diag = ifelse(!is.na(age_1st_diag) &
(age_1st_diag < 35 &
(cov_cat_ethnicity == 1 | cov_cat_ethnicity == 5)) |
(age_1st_diag < 30 &
(cov_cat_ethnicity == 2 | cov_cat_ethnicity == 3 | cov_cat_ethnicity == 4)), "Yes", "No"),
over5_pocc = ifelse(!is.na(tmp_out_count_poccdm_snomed) &
(tmp_out_count_poccdm_snomed > 5), "Yes", "No"))
table(df$age_under_35_30_1st_diag)
df <- df %>% mutate(tmp_out_date_first_diabetes_diag = format(tmp_out_date_first_diabetes_diag,"%Y")) %>%
mutate(tmp_out_date_first_diabetes_diag = as.integer(tmp_out_date_first_diabetes_diag),
age_1st_diag = tmp_out_date_first_diabetes_diag - qa_num_birth_year,
age_under_35_30_1st_diag = ifelse(!is.na(age_1st_diag) &
(age_1st_diag < 35 &
(cov_cat_ethnicity == 1)) |
(age_1st_diag < 30 &
(cov_cat_ethnicity == 2 | cov_cat_ethnicity == 3 | cov_cat_ethnicity == 4)), "Yes", "No"),
over5_pocc = ifelse(!is.na(tmp_out_count_poccdm_snomed) &
(tmp_out_count_poccdm_snomed > 5), "Yes", "No"))
df <- df %>% mutate(tmp_out_date_first_diabetes_diag = format(tmp_out_date_first_diabetes_diag,"%Y")) %>%
mutate(tmp_out_date_first_diabetes_diag = as.integer(tmp_out_date_first_diabetes_diag),
age_1st_diag = tmp_out_date_first_diabetes_diag - qa_num_birth_year,
age_under_35_30_1st_diag = ifelse(!is.na(age_1st_diag) &
(age_1st_diag < 35 &
(cov_cat_ethnicity == 1 | cov_cat_ethnicity == 5)) |
(age_1st_diag < 30 &
(cov_cat_ethnicity == 2 | cov_cat_ethnicity == 3 | cov_cat_ethnicity == 4)), "Yes", "No"),
over5_pocc = ifelse(!is.na(tmp_out_count_poccdm_snomed) &
(tmp_out_count_poccdm_snomed > 5), "Yes", "No"))
library(magrittr)
library(tidyverse)
# Define parameters ------------------------------------------------------------
## Study start date
study_start <- "2020-01-01"
## Load dataset
df <- arrow::read_feather(file = "output/input.feather")
# Format columns -----------------------------------------------------
# dates, numerics, factors, logicals
df <- df %>%
rename(tmp_out_max_hba1c_mmol_mol_date = tmp_out_num_max_hba1c_mmol_mol_date) %>%
mutate(across(contains('_date'), ~ as.Date(as.character(.)))) %>%
mutate(across(contains('_birth_year'), ~ format(as.Date(.), "%Y"))) %>%
mutate(across(contains('_num'), ~ as.numeric(.))) %>%
mutate(across(contains('_cat'), ~ as.factor(.))) %>%
mutate(across(contains('_bin'), ~ as.logical(.)))
# Define COVID-19 severity --------------------------------------------------------------
df <- df %>%
mutate(sub_cat_covid19_hospital =
ifelse(!is.na(exp_date_covid19_confirmed) &
!is.na(sub_date_covid19_hospital) &
sub_date_covid19_hospital - exp_date_covid19_confirmed >= 0 &
sub_date_covid19_hospital - exp_date_covid19_confirmed < 29, "hospitalised",
ifelse(!is.na(exp_date_covid19_confirmed), "non_hospitalised",
ifelse(is.na(exp_date_covid19_confirmed), "no_infection", NA)))) %>%
mutate(across(sub_cat_covid19_hospital, factor))
# Define diabetes outcome (using Sophie Eastwood algorithm) ----------------------------
# define variables needed for diabetes algorithm
df <- df %>% mutate(tmp_out_date_first_diabetes_diag = format(tmp_out_date_first_diabetes_diag,"%Y")) %>%
mutate(tmp_out_date_first_diabetes_diag = as.integer(tmp_out_date_first_diabetes_diag),
age_1st_diag = tmp_out_date_first_diabetes_diag - qa_num_birth_year,
age_under_35_30_1st_diag = ifelse(!is.na(age_1st_diag) &
(age_1st_diag < 35 &
(cov_cat_ethnicity == 1 | cov_cat_ethnicity == 5)) |
(age_1st_diag < 30 &
(cov_cat_ethnicity == 2 | cov_cat_ethnicity == 3 | cov_cat_ethnicity == 4)), "Yes", "No"),
over5_pocc = ifelse(!is.na(tmp_out_count_poccdm_snomed) &
(tmp_out_count_poccdm_snomed > 5), "Yes", "No"))
df <- df %>% mutate(tmp_out_date_first_diabetes_diag = format(tmp_out_date_first_diabetes_diag,"%Y")) %>%
mutate(tmp_out_date_first_diabetes_diag = as.integer(tmp_out_date_first_diabetes_diag),
age_1st_diag = tmp_out_date_first_diabetes_diag - qa_num_birth_year,
age_under_35_30_1st_diag = ifelse(!is.na(age_1st_diag) &
age_1st_diag < 35 &
cov_cat_ethnicity == 1 | cov_cat_ethnicity == 5 |
age_1st_diag < 30 &
cov_cat_ethnicity == 2 | cov_cat_ethnicity == 3 | cov_cat_ethnicity == 4), "Yes", "No",
over5_pocc = ifelse(!is.na(tmp_out_count_poccdm_snomed) &
(tmp_out_count_poccdm_snomed > 5), "Yes", "No"))
summary(df$age_1st_diag)
df <- df %>% mutate(tmp_out_date_first_diabetes_diag = format(tmp_out_date_first_diabetes_diag,"%Y")) %>%
mutate(tmp_out_date_first_diabetes_diag = as.integer(tmp_out_date_first_diabetes_diag),
age_1st_diag = tmp_out_date_first_diabetes_diag - qa_num_birth_year,
age_under_35_30_1st_diag = ifelse(!is.na(age_1st_diag) &
(age_1st_diag < 35 &
(cov_cat_ethnicity == 1 | cov_cat_ethnicity == 5  | cov_cat_ethnicity == 4)) |
(age_1st_diag < 30 &
(cov_cat_ethnicity == 2 | cov_cat_ethnicity == 3)), "Yes", "No"),
over5_pocc = ifelse(!is.na(tmp_out_count_poccdm_snomed) &
(tmp_out_count_poccdm_snomed > 5), "Yes", "No"))
# Define parameters ------------------------------------------------------------
## Study start date
study_start <- "2020-01-01"
## Load dataset
df <- arrow::read_feather(file = "output/input.feather")
# Format columns -----------------------------------------------------
# dates, numerics, factors, logicals
df <- df %>%
rename(tmp_out_max_hba1c_mmol_mol_date = tmp_out_num_max_hba1c_mmol_mol_date) %>%
mutate(across(contains('_date'), ~ as.Date(as.character(.)))) %>%
mutate(across(contains('_birth_year'), ~ format(as.Date(.), "%Y"))) %>%
mutate(across(contains('_num'), ~ as.numeric(.))) %>%
mutate(across(contains('_cat'), ~ as.factor(.))) %>%
mutate(across(contains('_bin'), ~ as.logical(.)))
# Define COVID-19 severity --------------------------------------------------------------
df <- df %>%
mutate(sub_cat_covid19_hospital =
ifelse(!is.na(exp_date_covid19_confirmed) &
!is.na(sub_date_covid19_hospital) &
sub_date_covid19_hospital - exp_date_covid19_confirmed >= 0 &
sub_date_covid19_hospital - exp_date_covid19_confirmed < 29, "hospitalised",
ifelse(!is.na(exp_date_covid19_confirmed), "non_hospitalised",
ifelse(is.na(exp_date_covid19_confirmed), "no_infection", NA)))) %>%
mutate(across(sub_cat_covid19_hospital, factor))
# Define diabetes outcome (using Sophie Eastwood algorithm) ----------------------------
# define variables needed for diabetes algorithm
df <- df %>% mutate(tmp_out_date_first_diabetes_diag = format(tmp_out_date_first_diabetes_diag,"%Y")) %>%
mutate(tmp_out_date_first_diabetes_diag = as.integer(tmp_out_date_first_diabetes_diag),
age_1st_diag = tmp_out_date_first_diabetes_diag - qa_num_birth_year,
age_under_35_30_1st_diag = ifelse(!is.na(age_1st_diag) &
(age_1st_diag < 35 &
(cov_cat_ethnicity == 1 | cov_cat_ethnicity == 2  | cov_cat_ethnicity == 5)) |
(age_1st_diag < 30 &
(cov_cat_ethnicity == 3 | cov_cat_ethnicity == 4)), "Yes", "No"),
over5_pocc = ifelse(!is.na(tmp_out_count_poccdm_snomed) &
(tmp_out_count_poccdm_snomed > 5), "Yes", "No"))
