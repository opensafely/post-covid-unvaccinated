covid_pheno_non_hospitalised = character(),
agegp_18_39 = character(),
agegp_40_59 = character(),
agegp_60_79 = character(),
agegp_80_110 = character(),
sex_Male = character(),
sex_Female = character(),
ethnicity_White = character(),
ethnicity_Mixed = character(),
ethnicity_South_Asian = character(),
ethnicity_Black = character(),
ethnicity_Other = character(),
ethnicity_Missing = character(),
prior_history_TRUE = character(),
prior_history_FALSE = character(),
prior_history_var = character(),
venn = character(),
stringsAsFactors = FALSE)
# Add diabetes outcomes --------------------------------------------------------
outcomes <- c("type 1 diabetes",
"type 2 diabetes",
"other or non-specific diabetes",
"gestational diabetes")
outcome_group <- "diabetes"
outcomes_short <- c("t1dm","t2dm","otherdm","gestationaldm")
outcome_venn <- c(TRUE, TRUE, FALSE, FALSE)
for (i in 1:length(outcomes)) {
df[nrow(df)+1,] <- c(FALSE,
outcomes[i],
outcome_group,
paste0("out_date_",outcomes_short[i]),
"cov_cat_sex;cov_num_age;cov_cat_ethnicity;cov_cat_deprivation;cov_cat_region;cov_num_consulation_rate;cov_cat_smoking_status;cov_bin_ami;cov_bin_all_stroke;cov_bin_other_arterial_embolism;cov_bin_vte;cov_bin_hf;cov_bin_angina;cov_bin_dementia;cov_bin_liver_disease;cov_bin_chronic_kidney_disease;cov_bin_cancer;cov_bin_hypertension;cov_bin_depression;cov_bin_chronic_obstructive_pulmonary_disease;cov_bin_healthcare_worker;cov_bin_carehome_status;cov_num_tc_hdl_ratio;cov_cat_bmi_groups;cov_bin_prediabetes;cov_bin_diabetes_gestational",
rep("all",1),
rep(TRUE,3),
rep(FALSE,14),
"",
outcome_venn[i])
}
# change outcome group so that gestational diabetes has its own group
df <- df %>% mutate(outcome_group = case_when(outcome_variable == "out_date_gestationaldm" ~ "diabetes_gestational",
TRUE ~ as.character(outcome_group)))
# Remove sex as a covariate for gestational diabetes analysis
df <- df %>% mutate(covariates = case_when(outcome_variable == "out_date_gestationaldm" ~ "cov_num_age;cov_cat_ethnicity;cov_cat_deprivation;cov_cat_region;cov_num_consulation_rate;cov_cat_smoking_status;cov_bin_ami;cov_bin_all_stroke;cov_bin_other_arterial_embolism;cov_bin_vte;cov_bin_hf;cov_bin_angina;cov_bin_dementia;cov_bin_liver_disease;cov_bin_chronic_kidney_disease;cov_bin_cancer;cov_bin_hypertension;cov_bin_depression;cov_bin_chronic_obstructive_pulmonary_disease;cov_bin_healthcare_worker;cov_bin_carehome_status;cov_num_tc_hdl_ratio;cov_cat_bmi_groups;cov_bin_prediabetes;cov_bin_diabetes_gestational",
TRUE ~ as.character(covariates)))
# Add mental health outcomes --------------------------------------------------------
outcomes <- c("Depression",
"Anxiety - general",
"Anxiety - obsessive compulsive disorder",
"Anxiety - post traumatic stress disorder",
"Eating disorders",
"Serious mental illness",
"Self harm, aged >=10",
"Self harm, aged >=15",
"Suicide",
"Addiction")
outcome_group <- "mental_health"
outcomes_short <- c("depression",
"anxiety_general",
"anxiety_ocd",
"anxiety_ptsd",
"eating_disorders",
"serious_mental_illness",
"self_harm_10plus",
"self_harm_15plus",
"suicide",
"addiction")
out_venn <- c(TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE)
for (i in 1:length(outcomes)) {
df[nrow(df)+1,] <- c(TRUE,
outcomes[i],
outcome_group,
paste0("out_date_",outcomes_short[i]),
"cov_num_age;cov_cat_sex;cov_cat_ethnicity;cov_cat_deprivation;cov_cat_region;cov_cat_smoking_status;cov_bin_carehome_status;cov_num_consulation_rate;cov_bin_healthcare_worker;cov_bin_dementia;cov_bin_liver_disease;cov_bin_chronic_kidney_disease;cov_bin_cancer;cov_bin_hypertension;cov_bin_diabetes;cov_bin_obesity;cov_bin_chronic_obstructive_pulmonary_disease;cov_bin_ami;cov_bin_stroke_isch;cov_bin_recent_depression;cov_bin_history_depression;cov_bin_recent_anxiety;cov_bin_history_anxiety;cov_bin_recent_eating_disorders;cov_bin_history_eating_disorders;cov_bin_recent_serious_mental_illness;cov_bin_history_serious_mental_illness;cov_bin_recent_self_harm;cov_bin_history_self_harm",
rep("all",1),
rep(TRUE,1),
rep(FALSE,16),
"",
out_venn[i])
}
# df[6,1] <- TRUE
# Save active analyses list ----------------------------------------------------
saveRDS(df, file = "lib/active_analyses.rds")
## =============================================================================
## 1. Format the survival data for the cox model
## 2. Calculate pre/post exposure event counts
## =============================================================================
fit_get_data_surv <- function(event,subgroup, stratify_by_subgroup, stratify_by,mdl, survival_data,cuts_days_since_expo){
print(paste0("Starting survival data"))
#------------------ RANDOM SAMPLE NON-CASES for IP WEIGHING ------------------
set.seed(137)
#Replace event dates that lie outside of follow up time with NA
survival_data$event_date[survival_data$event_date<survival_data$follow_up_start | survival_data$event_date > survival_data$follow_up_end]=NA
if(startsWith(subgroup,"covid_pheno_")){
cases <- survival_data %>% filter((!is.na(event_date)) &
(
(event_date == follow_up_end) & (event_date < date_expo_censor | is.na(date_expo_censor))
))
}else{
cases <- survival_data %>% filter((!is.na(event_date)) &
(
event_date == follow_up_end
))
}
non_cases <- survival_data %>% filter(!patient_id %in% cases$patient_id)
if(nrow(cases)*10 < nrow(non_cases)){
non_cases <- non_cases[sample(1:nrow(non_cases), nrow(cases)*10,replace=FALSE), ]
}else if (nrow(cases)*10 >= nrow(non_cases)){
non_cases=non_cases
}
print(paste0("Number of cases: ", nrow(cases)))
print(paste0("Number of controls: ", nrow(non_cases)))
non_case_inverse_weight=(nrow(survival_data)-nrow(cases))/nrow(non_cases)
survival_data <- bind_rows(cases,non_cases)
survival_data$days_to_start <- as.numeric(survival_data$follow_up_start-cohort_start_date)
survival_data$days_to_end <- as.numeric(survival_data$follow_up_end-cohort_start_date)
if(startsWith(subgroup,"covid_pheno_")){
survival_data$days_to_end <- ifelse((!is.na(survival_data$date_expo_censor)) & (survival_data$follow_up_end == survival_data$date_expo_censor), survival_data$days_to_end, (survival_data$days_to_end +1 ))
}else{
survival_data$days_to_end <- (survival_data$days_to_end +1)
}
noncase_ids <- unique(non_cases$patient_id)
# ......................................
# Need to add 0.001 when days_to_end==0
#if (length(survival_data$days_to_end[survival_data$days_to_end==survival_data$days_to_start])>0){
#  survival_data$days_to_end <- ifelse(survival_data$days_to_end==survival_data$days_to_start, survival_data$days_to_end + 0.001, survival_data$days_to_end)
#}
#===============================================================================
#   CACHE some features
#-------------------------------------------------------------------------------
df_sex <- survival_data %>% dplyr::select(patient_id, sex)
df_age_region_ethnicity <- survival_data %>% dplyr::select(patient_id, AGE_AT_COHORT_START, region_name, ethnicity) %>% dplyr::rename(age = AGE_AT_COHORT_START)
df_age_region_ethnicity$age_sq <- df_age_region_ethnicity$age^2
#===============================================================================
# WITH COVID
#-------------------------------------------------------------------------------
with_expo <- survival_data %>% filter(!is.na(expo_date))
# Check whether there are any people with COVID exposure
any_exposures <- nrow(with_expo)>0
# Check whether there are any people with post-expo events
any_exposed_events <- nrow(with_expo %>% filter(!is.na(event_date)))>0
if(any_exposures==T & any_exposed_events ==T ){
if(startsWith(subgroup,"covid_pheno_")==T){
with_expo <- with_expo %>%
dplyr::select(patient_id, expo_date, follow_up_end, event_date, days_to_start, days_to_end, DATE_OF_DEATH, date_expo_censor) %>%
mutate(event_status = if_else( (!is.na(event_date)) &
(
((event_date <= follow_up_end) & ((follow_up_end != date_expo_censor) | is.na(date_expo_censor ))) |
((event_date < follow_up_end) & (follow_up_end == date_expo_censor))
),
1, 0))
}else{
with_expo <- with_expo %>%
dplyr::select(patient_id, expo_date, follow_up_end, event_date, days_to_start, days_to_end, DATE_OF_DEATH) %>%
mutate(event_status = if_else( (!is.na(event_date))
, 1, 0))
}
# ......................................
# CHUNK UP FOLLOW-UP PERIOD by CHANGE OF STATE OF EXPOSURE
with_expo$day_to_expo <- as.numeric(with_expo$expo_date - cohort_start_date)
d1 <- with_expo %>% dplyr::select(patient_id, expo_date, event_date, DATE_OF_DEATH)
d2 <- with_expo %>% dplyr::select(patient_id, days_to_start, day_to_expo, days_to_end, event_status)
with_expo <- tmerge(data1=d1, data2=d2, id=patient_id,
event=event(days_to_end, event_status), tstart=days_to_start, tstop = days_to_end,
expo=tdc(day_to_expo))
# with_expo <- with_expo %>% dplyr::select(!id)
with_expo$id <- NULL
rm(list=c("d1", "d2", "non_cases", "cases"))
# ----------------------- SPLIT POST-COVID TIME------------------------------
with_expo_postexpo <- with_expo %>% filter(expo==1)
with_expo_postexpo <- with_expo_postexpo %>% rename(t0=tstart, t=tstop) %>% mutate(tstart=0, tstop=t-t0)
with_expo_postexpo <- survSplit(Surv(tstop, event)~.,
with_expo_postexpo,
cut=cuts_days_since_expo,
episode="days_cat"
)
with_expo_postexpo <- with_expo_postexpo %>% mutate(tstart=tstart+t0, tstop=tstop+t0) %>% dplyr::select(-c(t0,t))
# ................... CONCAT BACK PRE-COVID TIME...................
with_expo_preexpo <- with_expo %>% filter(expo==0)
with_expo_preexpo$days_cat <- 0
ls_with_expo <- list(with_expo_preexpo, with_expo_postexpo)
with_expo <- do.call(rbind, lapply(ls_with_expo, function(x) x[match(names(ls_with_expo[[1]]), names(x))]))
rm(list=c("ls_with_expo", "with_expo_preexpo", "with_expo_postexpo"))
with_expo  <- with_expo %>%
group_by(patient_id) %>% arrange(days_cat) %>% mutate(last_step = ifelse(row_number()==n(),1,0))
with_expo$event  <- with_expo$event * with_expo$last_step
}
#===============================================================================
#-   WITHOUT COVID
#-------------------------------------------------------------------------------
without_expo <- survival_data %>%filter(is.na(expo_date))
any_no_expo <- nrow(with_expo)>0
if(any_no_expo == T & any_exposures== T & any_exposed_events == T ){
if(startsWith(subgroup,"covid_pheno_")==T){
without_expo <- without_expo %>%
dplyr::select(patient_id, expo_date, follow_up_end, event_date, days_to_start, days_to_end, DATE_OF_DEATH, date_expo_censor) %>%
mutate(event = if_else( (!is.na(event_date)) &
(
((event_date <= follow_up_end) & ((follow_up_end != date_expo_censor) | is.na(date_expo_censor ))) |
((event_date < follow_up_end) & (follow_up_end == date_expo_censor))
),
1, 0))
}else{
without_expo <- without_expo %>%
dplyr::select(patient_id, expo_date, follow_up_end, event_date, days_to_start, days_to_end, DATE_OF_DEATH) %>%
mutate(event = if_else( (!is.na(event_date)),
1, 0))
}
# ......................................
without_expo$tstart<- without_expo$days_to_start
without_expo$tstop <- without_expo$days_to_end
without_expo$expo<- c(0)
without_expo$days_cat <- c(0)
#===============================================================================
#-   RBIND WITH & WITHOUT COVID
#-------------------------------------------------------------------------------
common_cols <- intersect(colnames(without_expo), colnames(with_expo))
without_expo <- without_expo %>% dplyr::select(all_of(common_cols))
with_expo <- with_expo %>% dplyr::select(all_of(common_cols))
data_surv <-rbind(without_expo, with_expo)
#===============================================================================
#   PIVOT WIDE for WEEKS_SINCE_COVID
#-------------------------------------------------------------------------------
#data_surv$days_to_expo <- as.numeric(data_surv$expo_date - as.Date(cohort_start_date))
interval_names <- mapply(function(x, y) ifelse(x == y, paste0("days", x), paste0("days", x, "_", y)),
lag(cuts_days_since_expo, default = 0),
cuts_days_since_expo,
SIMPLIFY = FALSE)
intervals <- mapply(c, lag(cuts_days_since_expo, default = 0), cuts_days_since_expo, SIMPLIFY = F)
i<-0
for (ls in mapply(list, interval_names, intervals, SIMPLIFY = F)){
i <- i+1
data_surv[[ls[[1]]]] <- if_else(data_surv$days_cat==i, 1, 0)
}
#===============================================================================
# FINALIZE age, region, data_surv
#-------------------------------------------------------------------------------
data_surv <- data_surv %>% left_join(df_age_region_ethnicity)
data_surv <- data_surv %>% left_join(df_sex)
print(paste0("Finished survival data"))
# ============================= EVENTS COUNT =================================
which_days_since_covid <- function(row_data_surv, interval_names){
days_cols <- row_data_surv %>% dplyr::select(all_of(interval_names))
expo_day_period <- names(days_cols)[which(days_cols == 1)]
row_data_surv$expo_days <- ifelse(length(expo_day_period)==0, NA,expo_day_period )
#row_data_surv$expo_days <- names(days_cols)[which(days_cols == 1)]
row_data_surv$expo_days <- ifelse(is.na(row_data_surv$expo_days),"pre expo", row_data_surv$expo_days)
return(row_data_surv)
}
get_tbl_event_count <- function(data_surv, interval_names){
df_events <- data_surv %>% filter(event==1)
ls_data_surv <- split(df_events, 1:nrow(df_events))
ls_data_surv <- lapply(ls_data_surv, which_days_since_covid, unlist(interval_names))
ls_data_surv <- do.call("rbind", ls_data_surv)
tbl_event_count <- aggregate(event ~ expo_days, ls_data_surv, sum)
tbl_event_count[nrow(tbl_event_count) + 1,] = c("all post expo", sum(head(tbl_event_count$event, (nrow(tbl_event_count)-1)))  )
return(tbl_event_count)
}
tbl_event_count_all <- get_tbl_event_count(data_surv, interval_names)
tbl_event_count <- list(tbl_event_count_all) %>% reduce(left_join, by = "expo_days")
event_count_levels <- c("pre expo", unlist(interval_names), "all post expo")
tbl_event_count_levels <- data.frame(event_count_levels)
names(tbl_event_count_levels) <- c("expo_days")
tbl_event_count <- merge(tbl_event_count_levels, tbl_event_count, all.x = TRUE)
tbl_event_count[is.na(tbl_event_count)] <- 0
tbl_event_count <- tbl_event_count %>%
arrange(factor(expo_days,
levels = event_count_levels),
expo_days)
names(tbl_event_count) <- c("expo_week", "events_total")
tbl_event_count$event=event
tbl_event_count$subgroup <- subgroup
tbl_event_count$model <- mdl
tbl_event_count$events_total <- as.numeric(tbl_event_count$events_total)
#Any time periods with <=5 events? If yes, will reduce time periods
ind_any_zeroeventperiod <- any((tbl_event_count$events_total <= 5) & (!identical(cuts_days_since_expo, c(28, 535))))
#Are there <50 post expo events? If yes, won't run analysis
less_than_50_events = any((as.numeric(tbl_event_count$events_total) < 50) & (tbl_event_count$expo_week=="all post expo"))
# If ind_any_zeroeventperiod==TRUE then this script will re-run again with reduced time periods and
# we only want to save the final event count file. For reduced time periods, ind_any_zeroeventperiod will
# always be FALSE
# Save events counts if less than 50 events as this script will not re-run with reduced time periods
if(ind_any_zeroeventperiod==FALSE | less_than_50_events==TRUE){
write.csv(tbl_event_count, paste0(output_dir,"/tbl_event_count_" ,event,"_", subgroup,"_",mdl,".csv"), row.names = T)
print(paste0("Event counts saved: ", output_dir,"/tbl_event_count_" ,event,"_", subgroup,"_",mdl,".csv"))
}
return(list(data_surv, noncase_ids, interval_names, ind_any_zeroeventperiod, non_case_inverse_weight, less_than_50_events))
}else{
analyses_not_run[nrow(analyses_not_run)+1,]<- c(event,subgroup,mdl,any_exposures,any_exposed_events,any_no_expo,"FALSE")
return(list(analyses_not_run))
}
}
library(tidyverse)
library(yaml)
library(here)
library(glue)
library(readr)
#library(dplyr)
###########################
# Load information to use #
###########################
## defaults ----
defaults_list <- list(
version = "3.0",
expectations= list(population_size=100000L)
)
active_analyses <- read_rds("lib/active_analyses.rds")
active_analyses_table <- subset(active_analyses, active_analyses$active =="TRUE")
outcomes_model <- active_analyses_table$outcome_variable %>% str_replace("out_date_", "")
cohort_to_run <- c("")
# create action functions ----
############################
## generic action function #
############################
action <- function(
name,
run,
dummy_data_file=NULL,
arguments=NULL,
needs=NULL,
highly_sensitive=NULL,
moderately_sensitive=NULL
){
outputs <- list(
moderately_sensitive = moderately_sensitive,
highly_sensitive = highly_sensitive
)
outputs[sapply(outputs, is.null)] <- NULL
action <- list(
run = paste(c(run, arguments), collapse=" "),
dummy_data_file = dummy_data_file,
needs = needs,
outputs = outputs
)
action[sapply(action, is.null)] <- NULL
action_list <- list(name = action)
names(action_list) <- name
action_list
}
## create comment function ----
comment <- function(...){
list_comments <- list(...)
comments <- map(list_comments, ~paste0("## ", ., " ##"))
comments
}
## create function to convert comment "actions" in a yaml string into proper comments
convert_comment_actions <-function(yaml.txt){
yaml.txt %>%
str_replace_all("\\\n(\\s*)\\'\\'\\:(\\s*)\\'", "\n\\1")  %>%
#str_replace_all("\\\n(\\s*)\\'", "\n\\1") %>%
str_replace_all("([^\\'])\\\n(\\s*)\\#\\#", "\\1\n\n\\2\\#\\#") %>%
str_replace_all("\\#\\#\\'\\\n", "\n")
}
#################################################
## Function for typical actions to analyse data #
#################################################
# Updated to a typical action running Cox models for one outcome
apply_model_function <- function(outcome){
splice(
comment(glue("Apply cox model for {outcome}")),
action(
name = glue("Analysis_cox_{outcome}"),
run = "r:latest analysis/model/01_cox_pipeline.R",
arguments = c(outcome),
needs = list("stage1_data_cleaning", glue("stage1_end_date_table")),
moderately_sensitive = list(
analyses_not_run = glue("output/review/model/analyses_not_run_{outcome}.csv"),
compiled_hrs_csv = glue("output/review/model/suppressed_compiled_HR_results_{outcome}.csv"),
compiled_hrs_csv_to_release = glue("output/review/model/suppressed_compiled_HR_results_{outcome}_to_release.csv"),
compiled_event_counts_csv = glue("output/review/model/suppressed_compiled_event_counts_{outcome}.csv")
),
highly_sensitive = list(
compiled_hrs = glue("output/review/model/compiled_HR_results_{outcome}.csv"),
compiled_event_counts = glue("output/review/model/compiled_event_counts_{outcome}.csv")
)
)
)
}
table2 <- function(cohort){
splice(
comment(glue("Stage 4 - Table 2")),
action(
name = glue("stage4_table_2"),
run = "r:latest analysis/descriptives/table_2.R",
arguments = c(cohort),
needs = list("stage1_data_cleaning",glue("stage1_end_date_table")),
moderately_sensitive = list(
input_table_2 = glue("output/review/descriptives/table2*.csv")
)
)
)
}
##########################################################
## Define and combine all actions into a list of actions #
##########################################################
actions_list <- splice(
comment("# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
"DO NOT EDIT project.yaml DIRECTLY",
"This file is created by create_project_actions.R",
"Edit and run create_project_actions.R to update the project.yaml",
"# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #"
),
#comment("Generate vaccination eligibility information"),
action(
name = glue("vax_eligibility_inputs"),
run = "r:latest analysis/vax_eligibility_inputs.R",
highly_sensitive = list(
vax_study_dates_json = glue("output/vax_study_dates.json"),
vax_jcvi_groups= glue("output/vax_jcvi_groups.csv"),
vax_eligible_dates= ("output/vax_eligible_dates.csv")
)
),
#comment("Generate dummy data for study_definition"),
action(
name = "generate_study_population",
run = "cohortextractor:latest generate_cohort --study-definition study_definition --output-format feather",
needs = list("vax_eligibility_inputs"),
highly_sensitive = list(
cohort = glue("output/input.feather")
)
),
#comment("Preprocess data"),
action(
name = "preprocess_data",
run = "r:latest analysis/preprocess/preprocess_data.R",
needs = list("generate_study_population"),
moderately_sensitive = list(
describe = glue("output/not-for-review/describe_input_stage0.txt")),
highly_sensitive = list(
cohort = glue("output/input.rds"),
venn = glue("output/venn.rds")
)
),
#comment("Stage 1 - Data cleaning"),
action(
name = "stage1_data_cleaning",
run = "r:latest analysis/preprocess/Stage1_data_cleaning.R",
needs = list("preprocess_data"),
moderately_sensitive = list(
QA_rules = glue("output/review/descriptives/QA_summary.csv"),
refactoring = glue("output/not-for-review/meta_data_factors.csv"),
IE_criteria = glue("output/review/descriptives/cohort_flow*.csv"),
histograms = glue("output/not-for-review/numeric_histograms_*.svg")
),
highly_sensitive = list(
cohort = glue("output/input_stage1*.rds")
)
),
#comment("Stage 1 - End date table"),
action(
name = "stage1_end_date_table",
run = "r:latest analysis/preprocess/create_follow_up_end_date.R",
needs = list("preprocess_data","stage1_data_cleaning"),
highly_sensitive = list(
end_date_table = glue("output/follow_up_end_dates*.rds")
)
),
#comment("Stage 2 - Missing - Table 1"),
action(
name = "stage2_missing_table1",
run = "r:latest analysis/descriptives/Stage2_Missing_Table1.R",
needs = list("stage1_data_cleaning"),
moderately_sensitive = list(
Missing_RangeChecks = glue("output/not-for-review/Check_missing_range*.csv"),
DateChecks = glue("output/not-for-review/Check_dates_range*.csv"),
Descriptive_Table = glue("output/review/descriptives/Table1*.csv")
)
),
#comment("Stage 3 - Diabetes flow"),
action(
name = "stage3_diabetes_flow",
run = "r:latest analysis/descriptives/diabetes_flowchart.R",
needs = list("stage1_data_cleaning"),
moderately_sensitive = list(
flow_df = glue("output/review/figure-data/diabetes_flow_values*.csv")
# flow_fig = glue("output/diabetes_flow.png"),
),
),
#comment("Stage 4 - Create input for table2"),
splice(
# over outcomes
unlist(lapply(cohort_to_run, function(x) table2(cohort = x)), recursive = FALSE)
),
#comment("Stage 4 - Venn diagrams"),
action(
name = "stage4_venn_diagram",
run = "r:latest analysis/descriptives/venn_diagram.R",
needs = list("preprocess_data", "stage1_data_cleaning", "stage1_end_date_table"),
moderately_sensitive = list(
venn_diagram = glue("output/review/venn-diagrams/venn_diagram_*.svg"),
venn_diagram_number_check = glue("output/review/venn-diagrams/venn_diagram_number_check*.csv")
)
),
#comment("Stage 5 - Apply models"),
splice(
# over outcomes
unlist(lapply(outcomes_model, function(x) splice(unlist(lapply(cohort_to_run, function(y) apply_model_function(outcome = x)), recursive = FALSE))
),recursive = FALSE)))
## combine everything ----
project_list <- splice(
defaults_list,
list(actions = actions_list)
)
#####################################################################################
## convert list to yaml, reformat comments and white space, and output a .yaml file #
#####################################################################################
as.yaml(project_list, indent=2) %>%
# convert comment actions to comments
convert_comment_actions() %>%
# add one blank line before level 1 and level 2 keys
str_replace_all("\\\n(\\w)", "\n\n\\1") %>%
str_replace_all("\\\n\\s\\s(\\w)", "\n\n  \\1") %>%
writeLines("project.yaml")
