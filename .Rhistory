mutate(step_6 = ifelse(step_5 == "No" &
!is.na(out_date_t1dm) &
!is.na(out_date_t2dm), "Yes",
ifelse(step_5 == "No" &
(is.na(out_date_t1dm) |
is.na(out_date_t2dm)), "No", NA))) %>%
# Step 6a. Type 1 only reported in primary care. denominator for step 6: no to step 6
mutate(step_6a = ifelse(step_6 == "Yes" &
!is.na(tmp_out_date_t1dm_snomed) &
is.na(tmp_out_date_t2dm_snomed), "Yes",
ifelse(step_6 == "Yes", "No", NA))) %>%
# Step 6b. Type 2 only reported in primary care. denominator for step 6: no to step 6
mutate(step_6b = ifelse(step_6a == "No" &
is.na(tmp_out_date_t1dm_snomed) &
!is.na(tmp_out_date_t2dm_snomed), "Yes",
ifelse(step_6a == "No", "No", NA))) %>%
# Step 6c. Number of type 1 codes>number of type 2 codes? denominator for step 6c: no to step 6b
mutate(step_6c = ifelse(step_6b == "No" &
tmp_out_count_t1dm > tmp_out_count_t2dm, "Yes",
ifelse(step_6b == "No" &
tmp_out_count_t1dm <= tmp_out_count_t2dm, "No", NA))) %>%
# Step 6d. Number of type 2 codes>number of type 1 codes denominator for step 6d: no to step 6c
mutate(step_6d = ifelse(step_6c == "No" &
tmp_out_count_t2dm > tmp_out_count_t1dm, "Yes",
ifelse(step_6c == "No" &
tmp_out_count_t2dm <= tmp_out_count_t1dm, "No", NA))) %>%
# Step 6e. Type 2 code most recent? denominator for step 6e: no to step 6d
mutate(step_6e = ifelse(step_6d == "No" &
out_date_t2dm > out_date_t1dm, "Yes",
ifelse(step_6d == "No" &
out_date_t2dm < out_date_t1dm, "No", NA))) %>%
# Step 7. Diabetes medication or >5 process of care codes or HbA1c>=6.5? denominator for step 7: no to step 6
mutate(step_7 = ifelse(step_6 == "No" &
((!is.na(tmp_out_date_diabetes_medication)) |
(tmp_out_num_max_hba1c_mmol_mol >= 47.5) |
(tmp_out_count_poccdm_snomed >= 5)), "Yes",
ifelse(step_6=="No" , "No", NA))) %>%
# Create Diabetes Variable
mutate(out_cat_diabetes = ifelse(step_1 == "No" & step_2 == "No" & step_3 == "No" & step_4 == "No" &
step_5 == "No" & step_6 == "No" & step_7 == "No" |
step_1 == "Yes" & step_1a == "Yes" & step_2 == "No" & step_3 == "No" & step_4 == "No" &
step_5 == "No" & step_6 == "No" & step_7 == "No" ,
"DM unlikely",
ifelse(step_1 == "No" & step_2 == "No" & step_3 == "No" & step_4 == "No" &
step_5 == "No" & step_6 == "No" & step_7 == "Yes" |
step_1 == "Yes" & step_1a == "Yes" & step_2 == "No" & step_3 == "No" & step_4 == "No" &
step_5 == "No" & step_6 == "No" & step_7 == "Yes",
"DM_other",
ifelse(step_1 == "No" & step_2 == "Yes" |
step_1 == "Yes" & step_1a == "Yes" & step_2 == "Yes" |
step_1 == "No" & step_2 == "No" & step_3 == "No" & step_4 == "Yes" |
step_1 == "Yes" & step_1a == "Yes" & step_2 == "No" & step_3 == "No" & step_4 == "Yes" |
step_1 == "No" & step_2 == "No" & step_3 == "No" & step_4 == "No" &
step_5 == "No" & step_6 == "Yes" & step_6a == "No" & step_6b=="Yes" |
step_1 == "Yes" & step_1a == "Yes" & step_2 == "No" & step_3 == "No" & step_4 == "No" &
step_5 == "No" & step_6 == "Yes" & step_6a == "No" & step_6b=="Yes" |
step_1 == "No" & step_2 == "No" & step_3 == "No" & step_4 == "No" &
step_5 == "No" & step_6 == "Yes" & step_6a == "No" & step_6b=="No" &
step_6c == "No" & step_6d == "Yes" |
step_1 == "Yes" & step_1a == "Yes" & step_2 == "No" & step_3 == "No" & step_4 == "No" &
step_5 == "No" & step_6 == "Yes" & step_6a == "No" & step_6b=="No" &
step_6c == "No" & step_6d == "Yes" |
step_1 == "No" & step_2 == "No" & step_3 == "No" & step_4 == "No" &
step_5 == "No" & step_6 == "Yes" & step_6a == "No" & step_6b=="No" &
step_6c == "No" & step_6d == "No" & step_6e == "Yes" |
step_1 == "Yes" & step_1a == "Yes" & step_2 == "No" & step_3 == "No" & step_4 == "No" &
step_5 == "No" & step_6 == "Yes" & step_6a == "No" & step_6b=="No" &
step_6c == "No" & step_6d == "No" & step_6e == "Yes",
"T2DM",
ifelse(step_1 == "No" & step_2 == "No" & step_3=="Yes" |
step_1 == "Yes" & step_1a == "Yes" & step_2 == "No" & step_3=="Yes" |
step_1 == "No" & step_2 == "No" & step_3 =="No" & step_4 == "No" & step_5 == "Yes" |
step_1 == "Yes" & step_1a == "Yes" & step_2 == "No" & step_3 =="No" & step_4 == "No" &
step_5 == "Yes" |
step_1 == "No" & step_2 == "No" & step_3 =="No" & step_4 == "No" & step_5 == "No" &
step_6 == "Yes" & step_6a == "Yes" |
step_1 == "Yes" & step_1a == "Yes" & step_2 == "No" & step_3 =="No" & step_4 == "No" &
step_5 == "No" &
step_6 == "Yes" & step_6a == "Yes" |
step_1 == "No" & step_2 == "No" & step_3 =="No" & step_4 == "No" & step_5 == "No" &
step_6 == "Yes" & step_6a == "No" & step_6b == "No" & step_6c == "Yes" |
step_1 == "Yes" & step_1a == "Yes" & step_2 == "No" & step_3 =="No" & step_4 == "No" &
step_5 == "No" &
step_6 == "Yes" & step_6a == "No" & step_6b == "No" & step_6c == "Yes" |
step_1 == "No" & step_2 == "No" & step_3 =="No" & step_4 == "No" & step_5 == "No" &
step_6 == "Yes" & step_6a == "No" & step_6b == "No" & step_6c == "No" &
step_6d == "No" & step_6e == "No" |
step_1 == "Yes" & step_1a == "Yes" & step_2 == "No" & step_3 =="No" & step_4 == "No" & step_5 == "No" &
step_6 == "Yes" & step_6a == "No" & step_6b == "No" & step_6c == "No" &
step_6d == "No" & step_6e == "No",
"T1DM",
ifelse(step_1 == "Yes" & step_1a == "No", "GDM", NA)))))) %>%
# replace NAs with None (no diabetes)
mutate_at(vars(out_cat_diabetes), ~replace_na(., "None"))
# Define incident diabetes date variables needed for cox analysis -------------------------
# Uses diabetes cateogory from algorithm above and date of first diabetes related code.
df <- df %>%
# remove old diabetes variables to avoid duplication / confusion - commented out for now
# dplyr::select(- out_date_t1dm, - out_date_t2dm, - out_date_otherdm, - out_date_gestationaldm) %>%
# GESTATIONAL
mutate(out_date_diabetes_gestational = as_date(case_when(out_cat_diabetes == "GDM" ~ tmp_out_date_first_diabetes_diag)),
# T2DM
out_date_diabetes_type2 = as_date(case_when(out_cat_diabetes == "T2DM" ~ tmp_out_date_first_diabetes_diag)),
# T1DM
out_date_diabetes_type1 = as_date(case_when(out_cat_diabetes == "T1DM" ~ tmp_out_date_first_diabetes_diag)),
# OTHER
out_date_diabetes_other = as_date(case_when(out_cat_diabetes == "DM_other" ~ pmin(hba1c_date_step7, over5_pocc_step7, na.rm = TRUE))))
# Restrict columns and save analysis dataset ---------------------------------
df1 <- df %>%
dplyr::select(- vax_jcvi_age_1, - vax_jcvi_age_2) %>% #  remove JCVI variables
# select patient id, death date and variables: subgroups, exposures, outcomes, covariates, quality assurance and vaccination
# need diabetes "step" variables for flowchart (diabetes_flowchart.R)
dplyr::select(patient_id, death_date,
contains(c("sub_", "exp_", "out_", "cov_", "qa_", "vax_", "step"))) %>%
dplyr::select(-contains("df_out_")) %>%
dplyr::select(-contains("tmp_"))
test <- df %>% dplyr::select(out_date_diabetes_gestational, out_date_diabetes_type2, out_date_diabetes_type1, out_date_diabetes_other, tmp_out_date_first_diabetes_diag)
View(test)
test <- df %>% dplyr::select(out_date_diabetes_gestational, out_date_diabetes_type2, out_date_diabetes_type1, out_date_diabetes_other, tmp_out_date_first_diabetes_diag, out_cat_diabetes)
##################################################################################
#
# Description: This script reads in the input data and prepares it for data cleaning.
#
# Input: output/input.feather
# Output: output/
#
# Author(s): Rachel Denholm,  Kurt Taylor
#
# Date last updated:
#
##################################################################################
# Load libraries ---------------------------------------------------------------
library(magrittr)
library(tidyverse)
library(lubridate)
# Define parameters ------------------------------------------------------------
## Study start date
study_start <- "2020-01-01"
## Load dataset
df <- arrow::read_feather(file = "output/input.feather")
# create vars -------------------------------------------------------------
# vars could not be created in common vars file
df <- df %>% mutate(tmp_out_count_t2dm = tmp_out_count_t2dm_snomed + tmp_out_count_t2dm_hes,
tmp_out_count_t1dm = tmp_out_count_t1dm_snomed + tmp_out_count_t1dm_hes)
# Format columns -----------------------------------------------------
# dates, numerics, factors, logicals
df <- df %>%
rename(tmp_out_max_hba1c_mmol_mol_date = tmp_out_num_max_hba1c_date) %>%
mutate(across(contains('_date'), ~ as.Date(as.character(.)))) %>%
mutate(across(contains('_birth_year'), ~ format(as.Date(.), "%Y"))) %>%
mutate(across(contains('_num'), ~ as.numeric(.))) %>%
mutate(across(contains('_cat'), ~ as.factor(.))) %>%
mutate(across(contains('_bin'), ~ as.logical(.)))
# Define COVID-19 severity --------------------------------------------------------------
df <- df %>%
mutate(sub_cat_covid19_hospital =
ifelse(!is.na(exp_date_covid19_confirmed) &
!is.na(sub_date_covid19_hospital) &
sub_date_covid19_hospital - exp_date_covid19_confirmed >= 0 &
sub_date_covid19_hospital - exp_date_covid19_confirmed < 29, "hospitalised",
ifelse(!is.na(exp_date_covid19_confirmed), "non_hospitalised",
ifelse(is.na(exp_date_covid19_confirmed), "no_infection", NA)))) %>%
mutate(across(sub_cat_covid19_hospital, factor))
# Define diabetes outcome (using Sophie Eastwood algorithm) ----------------------------
# define variables needed for diabetes algorithm
df <- df %>%
mutate(tmp_out_year_first_diabetes_diag = format(tmp_out_date_first_diabetes_diag,"%Y")) %>%
mutate(tmp_out_year_first_diabetes_diag = as.integer(tmp_out_year_first_diabetes_diag),
age_1st_diag = tmp_out_year_first_diabetes_diag - qa_num_birth_year) %>%
mutate(age_1st_diag = replace(age_1st_diag, which(age_1st_diag < 0), NA)) %>% # assign negative ages to NA)
mutate(age_under_35_30_1st_diag = ifelse(!is.na(age_1st_diag) &
(age_1st_diag < 35 &
(cov_cat_ethnicity == 1 | cov_cat_ethnicity == 2  | cov_cat_ethnicity == 5)) |
(age_1st_diag < 30), "Yes", "No")) %>%
# HBA1C date var - earliest date for only those with >=47.5
mutate(hba1c_date_step7 = as_date(case_when(tmp_out_num_max_hba1c_mmol_mol >= 47.5 ~ pmin(tmp_out_max_hba1c_mmol_mol_date, na.rm = TRUE))),
# process codes - this is taking the first process code date in those individuals that have 5 or more process codes
over5_pocc_step7 = as_date(case_when(tmp_out_count_poccdm_snomed >= 5 ~ pmin(out_date_poccdm, na.rm = TRUE))))
# Diabetes adjudication algorithm
df <- df %>%
# Step 1. Any gestational diabetes code?
mutate(step_1 = ifelse(!is.na(out_date_gestationaldm), "Yes", "No")) %>%
# Step 1a. Any T1/ T2 diagnostic codes present? Denominator for step 1a is those with yes to step 1
mutate(step_1a = ifelse(step_1 == "Yes" &
(!is.na(out_date_t1dm) | !is.na(out_date_t2dm)), "Yes",
ifelse(step_1 == "Yes" &
is.na(out_date_t1dm) &
is.na(out_date_t2dm), "No", NA))) %>%
# Step 2. Non-metformin antidiabetic denominator for step 2: no to step 1 or yes to step 1a
mutate(step_2 = ifelse((step_1 == "No" | step_1a == "Yes" ) &
!is.na(tmp_out_date_nonmetform_drugs_snomed), "Yes",
ifelse((step_1 == "No" | step_1a == "Yes") &
is.na(tmp_out_date_nonmetform_drugs_snomed), "No", NA))) %>%
# Step 3. Type 1 code in the absence of type 2 code? denominator for step 3: no to step 2
mutate(step_3 = ifelse(step_2=="No" &
!is.na(out_date_t1dm) &
is.na(out_date_t2dm), "Yes",
ifelse(step_2 == "No", "No", NA))) %>%
# Step 4. Type 2 code in the absence of type 1 code denominator for step 3: no to step 3
mutate(step_4 = ifelse(step_3 == "No" &
is.na(out_date_t1dm) &
!is.na(out_date_t2dm), "Yes",
ifelse(step_3 == "No", "No", NA))) %>%
# Step 5. Aged <35yrs (or <30 yrs for SAs and AFCS) at first diagnostic code? denominator for step 5: no to step 4
mutate(step_5 = ifelse(step_4 == "No" &
age_under_35_30_1st_diag == "Yes", "Yes",
ifelse(step_4 == "No" &
age_under_35_30_1st_diag == "No", "No", NA))) %>%
mutate(step_5 = ifelse(step_5 == "No" |
is.na(step_5) & step_4 == "No", "No", "Yes")) %>%
# Step 6. Type 1 and type 2 codes present? denominator for step 6: no to step 5
mutate(step_6 = ifelse(step_5 == "No" &
!is.na(out_date_t1dm) &
!is.na(out_date_t2dm), "Yes",
ifelse(step_5 == "No" &
(is.na(out_date_t1dm) |
is.na(out_date_t2dm)), "No", NA))) %>%
# Step 6a. Type 1 only reported in primary care. denominator for step 6: no to step 6
mutate(step_6a = ifelse(step_6 == "Yes" &
!is.na(tmp_out_date_t1dm_snomed) &
is.na(tmp_out_date_t2dm_snomed), "Yes",
ifelse(step_6 == "Yes", "No", NA))) %>%
# Step 6b. Type 2 only reported in primary care. denominator for step 6: no to step 6
mutate(step_6b = ifelse(step_6a == "No" &
is.na(tmp_out_date_t1dm_snomed) &
!is.na(tmp_out_date_t2dm_snomed), "Yes",
ifelse(step_6a == "No", "No", NA))) %>%
# Step 6c. Number of type 1 codes>number of type 2 codes? denominator for step 6c: no to step 6b
mutate(step_6c = ifelse(step_6b == "No" &
tmp_out_count_t1dm > tmp_out_count_t2dm, "Yes",
ifelse(step_6b == "No" &
tmp_out_count_t1dm <= tmp_out_count_t2dm, "No", NA))) %>%
# Step 6d. Number of type 2 codes>number of type 1 codes denominator for step 6d: no to step 6c
mutate(step_6d = ifelse(step_6c == "No" &
tmp_out_count_t2dm > tmp_out_count_t1dm, "Yes",
ifelse(step_6c == "No" &
tmp_out_count_t2dm <= tmp_out_count_t1dm, "No", NA))) %>%
# Step 6e. Type 2 code most recent? denominator for step 6e: no to step 6d
mutate(step_6e = ifelse(step_6d == "No" &
out_date_t2dm > out_date_t1dm, "Yes",
ifelse(step_6d == "No" &
out_date_t2dm < out_date_t1dm, "No", NA))) %>%
# Step 7. Diabetes medication or >5 process of care codes or HbA1c>=6.5? denominator for step 7: no to step 6
mutate(step_7 = ifelse(step_6 == "No" &
((!is.na(tmp_out_date_diabetes_medication)) |
(tmp_out_num_max_hba1c_mmol_mol >= 47.5) |
(tmp_out_count_poccdm_snomed >= 5)), "Yes",
ifelse(step_6=="No" , "No", NA))) %>%
# Create Diabetes Variable
mutate(out_cat_diabetes = ifelse(step_1 == "No" & step_2 == "No" & step_3 == "No" & step_4 == "No" &
step_5 == "No" & step_6 == "No" & step_7 == "No" |
step_1 == "Yes" & step_1a == "Yes" & step_2 == "No" & step_3 == "No" & step_4 == "No" &
step_5 == "No" & step_6 == "No" & step_7 == "No" ,
"DM unlikely",
ifelse(step_1 == "No" & step_2 == "No" & step_3 == "No" & step_4 == "No" &
step_5 == "No" & step_6 == "No" & step_7 == "Yes" |
step_1 == "Yes" & step_1a == "Yes" & step_2 == "No" & step_3 == "No" & step_4 == "No" &
step_5 == "No" & step_6 == "No" & step_7 == "Yes",
"DM_other",
ifelse(step_1 == "No" & step_2 == "Yes" |
step_1 == "Yes" & step_1a == "Yes" & step_2 == "Yes" |
step_1 == "No" & step_2 == "No" & step_3 == "No" & step_4 == "Yes" |
step_1 == "Yes" & step_1a == "Yes" & step_2 == "No" & step_3 == "No" & step_4 == "Yes" |
step_1 == "No" & step_2 == "No" & step_3 == "No" & step_4 == "No" &
step_5 == "No" & step_6 == "Yes" & step_6a == "No" & step_6b=="Yes" |
step_1 == "Yes" & step_1a == "Yes" & step_2 == "No" & step_3 == "No" & step_4 == "No" &
step_5 == "No" & step_6 == "Yes" & step_6a == "No" & step_6b=="Yes" |
step_1 == "No" & step_2 == "No" & step_3 == "No" & step_4 == "No" &
step_5 == "No" & step_6 == "Yes" & step_6a == "No" & step_6b=="No" &
step_6c == "No" & step_6d == "Yes" |
step_1 == "Yes" & step_1a == "Yes" & step_2 == "No" & step_3 == "No" & step_4 == "No" &
step_5 == "No" & step_6 == "Yes" & step_6a == "No" & step_6b=="No" &
step_6c == "No" & step_6d == "Yes" |
step_1 == "No" & step_2 == "No" & step_3 == "No" & step_4 == "No" &
step_5 == "No" & step_6 == "Yes" & step_6a == "No" & step_6b=="No" &
step_6c == "No" & step_6d == "No" & step_6e == "Yes" |
step_1 == "Yes" & step_1a == "Yes" & step_2 == "No" & step_3 == "No" & step_4 == "No" &
step_5 == "No" & step_6 == "Yes" & step_6a == "No" & step_6b=="No" &
step_6c == "No" & step_6d == "No" & step_6e == "Yes",
"T2DM",
ifelse(step_1 == "No" & step_2 == "No" & step_3=="Yes" |
step_1 == "Yes" & step_1a == "Yes" & step_2 == "No" & step_3=="Yes" |
step_1 == "No" & step_2 == "No" & step_3 =="No" & step_4 == "No" & step_5 == "Yes" |
step_1 == "Yes" & step_1a == "Yes" & step_2 == "No" & step_3 =="No" & step_4 == "No" &
step_5 == "Yes" |
step_1 == "No" & step_2 == "No" & step_3 =="No" & step_4 == "No" & step_5 == "No" &
step_6 == "Yes" & step_6a == "Yes" |
step_1 == "Yes" & step_1a == "Yes" & step_2 == "No" & step_3 =="No" & step_4 == "No" &
step_5 == "No" &
step_6 == "Yes" & step_6a == "Yes" |
step_1 == "No" & step_2 == "No" & step_3 =="No" & step_4 == "No" & step_5 == "No" &
step_6 == "Yes" & step_6a == "No" & step_6b == "No" & step_6c == "Yes" |
step_1 == "Yes" & step_1a == "Yes" & step_2 == "No" & step_3 =="No" & step_4 == "No" &
step_5 == "No" &
step_6 == "Yes" & step_6a == "No" & step_6b == "No" & step_6c == "Yes" |
step_1 == "No" & step_2 == "No" & step_3 =="No" & step_4 == "No" & step_5 == "No" &
step_6 == "Yes" & step_6a == "No" & step_6b == "No" & step_6c == "No" &
step_6d == "No" & step_6e == "No" |
step_1 == "Yes" & step_1a == "Yes" & step_2 == "No" & step_3 =="No" & step_4 == "No" & step_5 == "No" &
step_6 == "Yes" & step_6a == "No" & step_6b == "No" & step_6c == "No" &
step_6d == "No" & step_6e == "No",
"T1DM",
ifelse(step_1 == "Yes" & step_1a == "No", "GDM", NA)))))) %>%
# replace NAs with None (no diabetes)
mutate_at(vars(out_cat_diabetes), ~replace_na(., "None"))
# Define incident diabetes date variables needed for cox analysis -------------------------
# Uses diabetes cateogory from algorithm above and date of first diabetes related code.
df <- df %>%
# remove old diabetes variables to avoid duplication / confusion - commented out for now
# dplyr::select(- out_date_t1dm, - out_date_t2dm, - out_date_otherdm, - out_date_gestationaldm) %>%
# GESTATIONAL
mutate(out_date_diabetes_gestational = as_date(case_when(out_cat_diabetes == "GDM" ~ tmp_out_date_first_diabetes_diag)),
# T2DM
out_date_diabetes_type2 = as_date(case_when(out_cat_diabetes == "T2DM" ~ tmp_out_date_first_diabetes_diag)),
# T1DM
out_date_diabetes_type1 = as_date(case_when(out_cat_diabetes == "T1DM" ~ tmp_out_date_first_diabetes_diag)),
# OTHER
out_date_diabetes_other = as_date(case_when(out_cat_diabetes == "DM_other" ~ pmin(hba1c_date_step7, over5_pocc_step7, na.rm = TRUE))))
# Restrict columns and save analysis dataset ---------------------------------
df1 <- df %>%
dplyr::select(- vax_jcvi_age_1, - vax_jcvi_age_2) %>% #  remove JCVI variables
# select patient id, death date and variables: subgroups, exposures, outcomes, covariates, quality assurance and vaccination
# need diabetes "step" variables for flowchart (diabetes_flowchart.R)
dplyr::select(patient_id, death_date,
contains(c("sub_", "exp_", "out_", "cov_", "qa_", "vax_", "step"))) %>%
dplyr::select(-contains("df_out_")) %>%
dplyr::select(-contains("tmp_"))
# SAVE
saveRDS(df1, file = paste0("output/input.rds"))
# Restrict columns and save Venn diagram input dataset -----------------------
df2 <- df %>%
dplyr::select(patient_id,
starts_with(c("out_")))
# SAVE
saveRDS(df2, file = paste0("output/venn.rds"))
# END
## =============================================================================
## Project:     Post covid unvaccinated project
##
## Purpose:  Apply stage 1. Data cleaning
##  - Prepare variables
##  - Apply QA rules
##  - Apply inclusion exclusion criteria
##  - Create cleaned dataset
##
## Authors: Kurt Taylor
## Reviewer: Rochelle Knight
##
## Content:
## 0. Load relevant libraries and read data/arguments
## 1. Prepare all variables (re-factoring, re-typing)
## 2. Apply QA rules
## 3. Apply exclusion/inclusion criteria
## 4. Output flowchart CSV and create the final stage 1 dataset
## =============================================================================
###############################################
# 0. Load relevant libraries and read in data #
###############################################
library(readr)
library(dplyr)
library(stringr)
library(tidyverse)
# Input dataset
input <-read_rds("output/input.rds")
# Define general start date and end date
start_date = as.Date("2020-01-01")
end_date = as.Date("2021-06-18") # General End date: 2021-06-18 (date last JCVI group eligible for vaccination - Decision on Jan 18th 2022)
input <- input %>%
mutate(index_date = start_date,
end_date = end_date)
# NOTE: no censoring of end date for death/event at this stage
######################################################
# 1. Prepare all variables (re-factoring, re-typing) #
######################################################
# Get the names of variables which are factors
factor_names <- tidyselect::vars_select(names(input), contains(c('_cat_'), ignore.case = TRUE))
input <- input %>%
# handle missing smoking values
mutate(cov_cat_smoking_status = replace_na(cov_cat_smoking_status, "M"),
# Replace " " with "_"
cov_cat_region = gsub(" ", "_", cov_cat_region)) %>%
# handle missing region values
mutate(cov_cat_region = replace_na(cov_cat_region, "Missing")) %>%
# Set the variables that should be factor variables as factor
mutate(across(any_of(factor_names), function(x) factor(x, ordered = FALSE))) %>%
# Re-code vars and specify references
mutate(sub_cat_covid19_hospital = ordered(sub_cat_covid19_hospital, levels = c("non_hospitalised","hospitalised","no_infection")),
# ethnicity
cov_cat_ethnicity = case_when(cov_cat_ethnicity == 0 ~ "Missing",
cov_cat_ethnicity == 1 ~ "White",
cov_cat_ethnicity == 2 ~ "Mixed",
cov_cat_ethnicity == 3 ~ "South Asian",
cov_cat_ethnicity == 4 ~ "Black",
cov_cat_ethnicity == 5 ~ "Other")) %>%
mutate(cov_cat_ethnicity = ordered(cov_cat_ethnicity, levels = c("White","Mixed","South Asian","Black","Other","Missing")),
# smoking
cov_cat_smoking_status = case_when(cov_cat_smoking_status == "E" ~ "Ever smoker",
cov_cat_smoking_status == "M" ~ "Missing",
cov_cat_smoking_status == "N" ~ "Never smoker",
cov_cat_smoking_status == "S" ~ "Current smoker")) %>%
mutate(cov_cat_smoking_status = ordered(cov_cat_smoking_status, levels = c("Never smoker","Ever smoker","Current smoker","Missing")),
# region
cov_cat_region = relevel(cov_cat_region, ref = "London"),
# sex
cov_cat_sex = case_when(cov_cat_sex == "F" ~ "Female",
cov_cat_sex == "M" ~ "Male")) %>%
mutate(cov_cat_sex = relevel(factor(cov_cat_sex), ref = "Female"),
# cat jcvi group
vax_cat_jcvi_group = ordered(vax_cat_jcvi_group, levels = c("12","11","10","09","08","07","06","05","04","03","02","01","99"))) %>%
# deprivation: First - most deprived; fifth -least deprived
mutate(cov_cat_deprivation = ifelse(cov_cat_deprivation == 1 | cov_cat_deprivation == 2, "1-2 (most deprived)",
ifelse(cov_cat_deprivation == 3 | cov_cat_deprivation == 4, "3-4",
ifelse(cov_cat_deprivation == 5 | cov_cat_deprivation == 6, "5-6",
ifelse(cov_cat_deprivation == 7 | cov_cat_deprivation == 8, "7-8",
ifelse(cov_cat_deprivation == 9 | cov_cat_deprivation == 10, "9-10 (least deprived)", NA)))))) %>%
mutate_at(vars(cov_cat_deprivation), as.factor) %>%
mutate(cov_cat_deprivation = ordered(cov_cat_deprivation, levels = c("1-2 (most deprived)","3-4","5-6","7-8","9-10 (least deprived)")))
# Save meta data
describe_vars <- tidyselect::vars_select(names(input), contains(c('_cat_', 'cov_bin','cov_cat','qa_bin','exp_cat','vax_cat'), ignore.case = TRUE))
meta_data_factors <- lapply(input[,describe_vars], table)
sink(file = file.path("output", "meta_data_factors.csv"))
print(meta_data_factors)
sink()
#####################
# 2. Apply QA rules #
#####################
input <- input %>%
# Rule 1: Year of birth is after year of death or patient only has year of death
mutate(rule1 = ifelse((qa_num_birth_year > (format(death_date, format="%Y")) &
! is.na(qa_num_birth_year) &
! is.na(death_date) | is.na(qa_num_birth_year) &
! is.na(death_date)), TRUE, FALSE),
# Rule 2: Year of birth predates NHS established year or year of birth exceeds current date
rule2 = ifelse((qa_num_birth_year < 1793 | (qa_num_birth_year > format(Sys.Date(),"%Y"))) & ! is.na(qa_num_birth_year), TRUE, FALSE),
# Rule 3: Date of death is NULL or invalid (on or before 1/1/1900 or after current date)
rule3 = ifelse((death_date <= "1900-01-01" | death_date > format(Sys.Date(),"%Y-%m-%d")) & ! is.na(death_date), TRUE, FALSE),
# Rule 4: Pregnancy/birth codes for men
rule4 = ifelse(qa_bin_pregnancy == TRUE & cov_cat_sex=="Male", TRUE, FALSE),
# Rule 5: HRT or COCP meds for men
rule5 = ifelse(cov_cat_sex=="Male" & cov_bin_hormone_replacement_therapy==TRUE | cov_cat_sex=="Male" & cov_bin_combined_oral_contraceptive_pill == TRUE, TRUE, FALSE),
# Rule 6: Prostate cancer codes for women
rule6 = ifelse(qa_bin_prostate_cancer == TRUE & cov_cat_sex=="Female", TRUE, FALSE))
# Remove rows that are TRUE for at least one rule
input_QA <- input %>% filter(rule1 == FALSE & rule2 == FALSE & rule3 == FALSE & rule4 == FALSE & rule5 == FALSE & rule6 == FALSE)
# Produce QA summary
QA_summary <- data.frame(matrix(ncol = 2))
colnames(QA_summary) <- c('Rule', 'N rule TRUE')
QA_summary[1:7, 1] <- c("Rule 1", "Rule 2", "Rule 3", "Rule 4", "Rule 5", "Rule 6", "Total excluded from QA")
QA_summary[1,2]=nrow(input%>%filter(rule1==T))
QA_summary[2,2]=nrow(input%>%filter(rule2==T))
QA_summary[3,2]=nrow(input%>%filter(rule3==T))
QA_summary[4,2]=nrow(input%>%filter(rule4==T))
QA_summary[5,2]=nrow(input%>%filter(rule5==T))
QA_summary[6,2]=nrow(input%>%filter(rule6==T))
QA_summary[7,2]=nrow(input)-nrow(input_QA)
#Save QA summary as .csv
write.csv(QA_summary, file = file.path("output", "QA_summary.csv") , row.names=F)
# Remove QA variables from dataset
input <- input_QA %>%
select(-c(rule1,rule2,rule3,rule4,rule5,rule6,
qa_num_birth_year, qa_bin_pregnancy, qa_bin_prostate_cancer))
#########################################
# 3. Apply exclusion/inclusion criteria #
#########################################
# Define the cohort flow
cohort_flow <- data.frame(N = numeric(),
Description = character(),
stringsAsFactors = FALSE)
cohort_flow[nrow(cohort_flow)+1,] <- c(nrow(input),"Study defined sample size")
#---------------------------------------#
# Apply criteria listed in the protocol #
#---------------------------------------#
# Inclusion criteria 1: Alive on the first day of follow up
input <- input %>%
mutate(start_alive = ifelse(death_date < index_date, 0, 1)) %>%
mutate(start_alive = replace_na(start_alive, 1)) %>%
filter(start_alive == 1)
cohort_flow[nrow(cohort_flow)+1,] <- c(nrow(input),"Criteria 1 (Inclusion): Alive on the first day of follow up") # Feed into the cohort flow
# Inclusion criteria 2: Known age between 18 and 110 on 01/01/2020
input <- input %>%
filter(cov_num_age >= 18 & cov_num_age <= 110)
cohort_flow[nrow(cohort_flow)+1,] <- c(nrow(input),"Criteria 2 (Inclusion): Known age between 18 and 110 on 01/01/2020") # Feed into the cohort flow
# Inclusion criteria 3: Known sex
input <- input %>%
filter(cov_cat_sex == "Male" | cov_cat_sex == "Female")
cohort_flow[nrow(cohort_flow)+1,] <- c(nrow(input),"Criteria 3 (Inclusion): Known sex")
# Inclusion criteria 4: Known deprivation
input <- input %>%
drop_na(cov_cat_deprivation)
cohort_flow[nrow(cohort_flow)+1,] <- c(nrow(input),"Criteria 4 (Inclusion): Known deprivation")
# Inclusion criteria 5: Registered in an English GP with TPP software for at least 6 months prior to the study start date
# NOTE: Dealt with in Study definition
cohort_flow[nrow(cohort_flow)+1,] <- c(nrow(input),"Criteria 5 (Inclusion): Registered in an English GP with TPP software for at least 6 months prior to the study start date")
# Exclusion criteria: SARS-CoV-2 infection recorded prior to the start of follow-up
# No COVID cases prior to 1st Jan 2020
##############
# 4. Outputs #
##############
# Create csv file
write.csv(cohort_flow, file = file.path("output", "cohort_flow.csv"), row.names=F)
# Create the final stage 1 dataset
saveRDS(input, file = file.path("output", "input_stage1.rds"))
library(readr)
library(dplyr)
library(data.table)
library(tidyverse)
library(lubridate)
if(length(args)==0){
cohort_name <- "" # interactive testing
} else {
cohort_name <- args[[1]]
}
