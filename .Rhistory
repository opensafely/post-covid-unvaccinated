# Replace " " with "_"
covars$cov_cat_region <- gsub(" ", "_", covars$cov_cat_region)
#-------------------------------------#
# 1.a. Set factor variables as factor #
#-------------------------------------#
# Get the names of variables which are factors
factor_names <- tidyselect::vars_select(names(input), starts_with(c('cov_bin','cov_cat','qa_bin','exp_cat','vax_cat', 'sub_cat'), ignore.case = TRUE))
# Set the variables that should be factor variables as factor
covars <- covars %>%
mutate(across(contains(c('cov_bin','cov_cat','qa_bin','exp_cat','vax_cat', 'sub_cat')), ~ as.factor(.)))
# Sort factor level alphabetically
mk_factor_orderlevels <- function(covars, colname)
{
covars <- covars %>% mutate(
!!sym(colname) := factor(!!sym(colname), levels = str_sort(unique(covars[[colname]]), numeric = TRUE)))
return(covars)
}
for (colname in factor_names){
#print(colname)
covars <- mk_factor_orderlevels(covars, colname)
}
#----------------------------------------------------------------------#
# 1.b. Set the group with the highest frequency as the reference group #
#----------------------------------------------------------------------#
# Function to find mode in a factor variable
calculate_mode <- function(x) {
uniqx <- unique(na.omit(x))
uniqx[which.max(tabulate(match(x, uniqx)))]
}
# For the following variables, the first level (reference level) is not the one with the highest frequency
# Set the most frequently occurred level as the reference for a factor variable
covars <- covars %>%
mutate(cov_cat_ethnicity = relevel(covars$cov_cat_ethnicity, ref = as.character(calculate_mode(covars$cov_cat_ethnicity))),
cov_cat_smoking_status = relevel(covars$cov_cat_smoking_status, ref = as.character(calculate_mode(covars$cov_cat_smoking_status))),
cov_cat_region = relevel(covars$cov_cat_region, ref = as.character(calculate_mode(covars$cov_cat_region))),
sub_cat_covid19_hospital = relevel(covars$sub_cat_covid19_hospital, ref = as.character(calculate_mode(covars$sub_cat_covid19_hospital))),
vax_cat_jcvi_group = relevel(covars$vax_cat_jcvi_group, ref = as.character(calculate_mode(covars$vax_cat_jcvi_group)))) %>%
# Combine groups in deprivation: First - most deprived; fifth -least deprived
mutate(cov_cat_deprivation_tmp = ifelse(cov_cat_deprivation == 1 | cov_cat_deprivation == 2, "1-2 (most deprived)",
ifelse(cov_cat_deprivation == 3 | cov_cat_deprivation == 3, "3-4",
ifelse(cov_cat_deprivation == 5 | cov_cat_deprivation == 6, "5-6",
ifelse(cov_cat_deprivation == 7 | cov_cat_deprivation == 8, "7-8",
ifelse(cov_cat_deprivation == 9 | cov_cat_deprivation == 10, "9-10 (least deprived)", NA))))))
class(covars$cov_cat_deprivation_tmp)
class(covars$cov_cat_deprivation)
covars <- covars %>%
mutate(cov_cat_ethnicity = relevel(covars$cov_cat_ethnicity, ref = as.character(calculate_mode(covars$cov_cat_ethnicity))),
cov_cat_smoking_status = relevel(covars$cov_cat_smoking_status, ref = as.character(calculate_mode(covars$cov_cat_smoking_status))),
cov_cat_region = relevel(covars$cov_cat_region, ref = as.character(calculate_mode(covars$cov_cat_region))),
sub_cat_covid19_hospital = relevel(covars$sub_cat_covid19_hospital, ref = as.character(calculate_mode(covars$sub_cat_covid19_hospital))),
vax_cat_jcvi_group = relevel(covars$vax_cat_jcvi_group, ref = as.character(calculate_mode(covars$vax_cat_jcvi_group)))) %>%
# Combine groups in deprivation: First - most deprived; fifth -least deprived
mutate(cov_cat_deprivation_tmp = ifelse(cov_cat_deprivation == 1 | cov_cat_deprivation == 2, "1-2 (most deprived)",
ifelse(cov_cat_deprivation == 3 | cov_cat_deprivation == 3, "3-4",
ifelse(cov_cat_deprivation == 5 | cov_cat_deprivation == 6, "5-6",
ifelse(cov_cat_deprivation == 7 | cov_cat_deprivation == 8, "7-8",
ifelse(cov_cat_deprivation == 9 | cov_cat_deprivation == 10, "9-10 (least deprived)", NA))))),
cov_cat_deprivation_tmp = mutate(across(cov_cat_deprivation_tmp), factor))
covars <- covars %>%
mutate(cov_cat_ethnicity = relevel(covars$cov_cat_ethnicity, ref = as.character(calculate_mode(covars$cov_cat_ethnicity))),
cov_cat_smoking_status = relevel(covars$cov_cat_smoking_status, ref = as.character(calculate_mode(covars$cov_cat_smoking_status))),
cov_cat_region = relevel(covars$cov_cat_region, ref = as.character(calculate_mode(covars$cov_cat_region))),
sub_cat_covid19_hospital = relevel(covars$sub_cat_covid19_hospital, ref = as.character(calculate_mode(covars$sub_cat_covid19_hospital))),
vax_cat_jcvi_group = relevel(covars$vax_cat_jcvi_group, ref = as.character(calculate_mode(covars$vax_cat_jcvi_group)))) %>%
# Combine groups in deprivation: First - most deprived; fifth -least deprived
mutate(cov_cat_deprivation_tmp = ifelse(cov_cat_deprivation == 1 | cov_cat_deprivation == 2, "1-2 (most deprived)",
ifelse(cov_cat_deprivation == 3 | cov_cat_deprivation == 3, "3-4",
ifelse(cov_cat_deprivation == 5 | cov_cat_deprivation == 6, "5-6",
ifelse(cov_cat_deprivation == 7 | cov_cat_deprivation == 8, "7-8",
ifelse(cov_cat_deprivation == 9 | cov_cat_deprivation == 10, "9-10 (least deprived)", NA))))),
cov_cat_deprivation_tmp = mutate(cov_cat_deprivation_tmp), factor)
covars <- covars %>%
mutate(cov_cat_ethnicity = relevel(covars$cov_cat_ethnicity, ref = as.character(calculate_mode(covars$cov_cat_ethnicity))),
cov_cat_smoking_status = relevel(covars$cov_cat_smoking_status, ref = as.character(calculate_mode(covars$cov_cat_smoking_status))),
cov_cat_region = relevel(covars$cov_cat_region, ref = as.character(calculate_mode(covars$cov_cat_region))),
sub_cat_covid19_hospital = relevel(covars$sub_cat_covid19_hospital, ref = as.character(calculate_mode(covars$sub_cat_covid19_hospital))),
vax_cat_jcvi_group = relevel(covars$vax_cat_jcvi_group, ref = as.character(calculate_mode(covars$vax_cat_jcvi_group)))) %>%
# Combine groups in deprivation: First - most deprived; fifth -least deprived
mutate(cov_cat_deprivation_tmp = ifelse(cov_cat_deprivation == 1 | cov_cat_deprivation == 2, "1-2 (most deprived)",
ifelse(cov_cat_deprivation == 3 | cov_cat_deprivation == 3, "3-4",
ifelse(cov_cat_deprivation == 5 | cov_cat_deprivation == 6, "5-6",
ifelse(cov_cat_deprivation == 7 | cov_cat_deprivation == 8, "7-8",
ifelse(cov_cat_deprivation == 9 | cov_cat_deprivation == 10, "9-10 (least deprived)", NA))))),
cov_cat_deprivation_tmp = mutate(cov_cat_deprivation_tmp, factor))
covars <- covars %>%
mutate(cov_cat_ethnicity = relevel(covars$cov_cat_ethnicity, ref = as.character(calculate_mode(covars$cov_cat_ethnicity))),
cov_cat_smoking_status = relevel(covars$cov_cat_smoking_status, ref = as.character(calculate_mode(covars$cov_cat_smoking_status))),
cov_cat_region = relevel(covars$cov_cat_region, ref = as.character(calculate_mode(covars$cov_cat_region))),
sub_cat_covid19_hospital = relevel(covars$sub_cat_covid19_hospital, ref = as.character(calculate_mode(covars$sub_cat_covid19_hospital))),
vax_cat_jcvi_group = relevel(covars$vax_cat_jcvi_group, ref = as.character(calculate_mode(covars$vax_cat_jcvi_group)))) %>%
# Combine groups in deprivation: First - most deprived; fifth -least deprived
mutate(cov_cat_deprivation_tmp = ifelse(cov_cat_deprivation == 1 | cov_cat_deprivation == 2, "1-2 (most deprived)",
ifelse(cov_cat_deprivation == 3 | cov_cat_deprivation == 3, "3-4",
ifelse(cov_cat_deprivation == 5 | cov_cat_deprivation == 6, "5-6",
ifelse(cov_cat_deprivation == 7 | cov_cat_deprivation == 8, "7-8",
ifelse(cov_cat_deprivation == 9 | cov_cat_deprivation == 10, "9-10 (least deprived)", NA))))),
cov_cat_deprivation_tmp = mutate_at(cov_cat_deprivation_tmp, factor))
covars <- covars %>%
mutate(cov_cat_ethnicity = relevel(covars$cov_cat_ethnicity, ref = as.character(calculate_mode(covars$cov_cat_ethnicity))),
cov_cat_smoking_status = relevel(covars$cov_cat_smoking_status, ref = as.character(calculate_mode(covars$cov_cat_smoking_status))),
cov_cat_region = relevel(covars$cov_cat_region, ref = as.character(calculate_mode(covars$cov_cat_region))),
sub_cat_covid19_hospital = relevel(covars$sub_cat_covid19_hospital, ref = as.character(calculate_mode(covars$sub_cat_covid19_hospital))),
vax_cat_jcvi_group = relevel(covars$vax_cat_jcvi_group, ref = as.character(calculate_mode(covars$vax_cat_jcvi_group)))) %>%
# Combine groups in deprivation: First - most deprived; fifth -least deprived
mutate(cov_cat_deprivation_tmp = ifelse(cov_cat_deprivation == 1 | cov_cat_deprivation == 2, "1-2 (most deprived)",
ifelse(cov_cat_deprivation == 3 | cov_cat_deprivation == 3, "3-4",
ifelse(cov_cat_deprivation == 5 | cov_cat_deprivation == 6, "5-6",
ifelse(cov_cat_deprivation == 7 | cov_cat_deprivation == 8, "7-8",
ifelse(cov_cat_deprivation == 9 | cov_cat_deprivation == 10, "9-10 (least deprived)", NA))))),
cov_cat_deprivation_tmp = mutate_at(cov_cat_deprivation_tmp, as.factor))
calculate_mode <- function(x) {
uniqx <- unique(na.omit(x))
uniqx[which.max(tabulate(match(x, uniqx)))]
}
# For the following variables, the first level (reference level) is not the one with the highest frequency
# Set the most frequently occurred level as the reference for a factor variable
covars <- covars %>%
mutate(cov_cat_ethnicity = relevel(covars$cov_cat_ethnicity, ref = as.character(calculate_mode(covars$cov_cat_ethnicity))),
cov_cat_smoking_status = relevel(covars$cov_cat_smoking_status, ref = as.character(calculate_mode(covars$cov_cat_smoking_status))),
cov_cat_region = relevel(covars$cov_cat_region, ref = as.character(calculate_mode(covars$cov_cat_region))),
sub_cat_covid19_hospital = relevel(covars$sub_cat_covid19_hospital, ref = as.character(calculate_mode(covars$sub_cat_covid19_hospital))),
vax_cat_jcvi_group = relevel(covars$vax_cat_jcvi_group, ref = as.character(calculate_mode(covars$vax_cat_jcvi_group)))) %>%
# Combine groups in deprivation: First - most deprived; fifth -least deprived
mutate(cov_cat_deprivation_tmp = ifelse(cov_cat_deprivation == 1 | cov_cat_deprivation == 2, "1-2 (most deprived)",
ifelse(cov_cat_deprivation == 3 | cov_cat_deprivation == 3, "3-4",
ifelse(cov_cat_deprivation == 5 | cov_cat_deprivation == 6, "5-6",
ifelse(cov_cat_deprivation == 7 | cov_cat_deprivation == 8, "7-8",
ifelse(cov_cat_deprivation == 9 | cov_cat_deprivation == 10, "9-10 (least deprived)", NA))))),
cov_cat_deprivation_tmp = mutate_at(vars(cov_cat_deprivation_tmp), as.factor))
calculate_mode <- function(x) {
uniqx <- unique(na.omit(x))
uniqx[which.max(tabulate(match(x, uniqx)))]
}
# For the following variables, the first level (reference level) is not the one with the highest frequency
# Set the most frequently occurred level as the reference for a factor variable
covars <- covars %>%
mutate(cov_cat_ethnicity = relevel(covars$cov_cat_ethnicity, ref = as.character(calculate_mode(covars$cov_cat_ethnicity))),
cov_cat_smoking_status = relevel(covars$cov_cat_smoking_status, ref = as.character(calculate_mode(covars$cov_cat_smoking_status))),
cov_cat_region = relevel(covars$cov_cat_region, ref = as.character(calculate_mode(covars$cov_cat_region))),
sub_cat_covid19_hospital = relevel(covars$sub_cat_covid19_hospital, ref = as.character(calculate_mode(covars$sub_cat_covid19_hospital))),
vax_cat_jcvi_group = relevel(covars$vax_cat_jcvi_group, ref = as.character(calculate_mode(covars$vax_cat_jcvi_group)))) %>%
# Combine groups in deprivation: First - most deprived; fifth -least deprived
mutate(cov_cat_deprivation_tmp = ifelse(cov_cat_deprivation == 1 | cov_cat_deprivation == 2, "1-2 (most deprived)",
ifelse(cov_cat_deprivation == 3 | cov_cat_deprivation == 3, "3-4",
ifelse(cov_cat_deprivation == 5 | cov_cat_deprivation == 6, "5-6",
ifelse(cov_cat_deprivation == 7 | cov_cat_deprivation == 8, "7-8",
ifelse(cov_cat_deprivation == 9 | cov_cat_deprivation == 10, "9-10 (least deprived)", NA))))),
mutate_at(vars(cov_cat_deprivation_tmp), as.factor)) %>%
covars <- covars %>%
mutate(cov_cat_ethnicity = relevel(covars$cov_cat_ethnicity, ref = as.character(calculate_mode(covars$cov_cat_ethnicity))),
cov_cat_smoking_status = relevel(covars$cov_cat_smoking_status, ref = as.character(calculate_mode(covars$cov_cat_smoking_status))),
cov_cat_region = relevel(covars$cov_cat_region, ref = as.character(calculate_mode(covars$cov_cat_region))),
sub_cat_covid19_hospital = relevel(covars$sub_cat_covid19_hospital, ref = as.character(calculate_mode(covars$sub_cat_covid19_hospital))),
vax_cat_jcvi_group = relevel(covars$vax_cat_jcvi_group, ref = as.character(calculate_mode(covars$vax_cat_jcvi_group)))) %>%
# Combine groups in deprivation: First - most deprived; fifth -least deprived
mutate(cov_cat_deprivation_tmp = ifelse(cov_cat_deprivation == 1 | cov_cat_deprivation == 2, "1-2 (most deprived)",
ifelse(cov_cat_deprivation == 3 | cov_cat_deprivation == 3, "3-4",
ifelse(cov_cat_deprivation == 5 | cov_cat_deprivation == 6, "5-6",
ifelse(cov_cat_deprivation == 7 | cov_cat_deprivation == 8, "7-8",
ifelse(cov_cat_deprivation == 9 | cov_cat_deprivation == 10, "9-10 (least deprived)", NA))))),
mutate_at(vars(cov_cat_deprivation_tmp), as.factor)) %>%
# relevel deprivation
mutate(cov_cat_deprivation_tmp = relevel(covars$cov_cat_deprivation_tmp, ref = as.character(calculate_mode(covars$cov_cat_deprivation_tmp))))
# Function to find mode in a factor variable
calculate_mode <- function(x) {
uniqx <- unique(na.omit(x))
uniqx[which.max(tabulate(match(x, uniqx)))]
}
# For the following variables, the first level (reference level) is not the one with the highest frequency
# Set the most frequently occurred level as the reference for a factor variable
covars <- covars %>%
mutate(cov_cat_ethnicity = relevel(covars$cov_cat_ethnicity, ref = as.character(calculate_mode(covars$cov_cat_ethnicity))),
cov_cat_smoking_status = relevel(covars$cov_cat_smoking_status, ref = as.character(calculate_mode(covars$cov_cat_smoking_status))),
cov_cat_region = relevel(covars$cov_cat_region, ref = as.character(calculate_mode(covars$cov_cat_region))),
sub_cat_covid19_hospital = relevel(covars$sub_cat_covid19_hospital, ref = as.character(calculate_mode(covars$sub_cat_covid19_hospital))),
vax_cat_jcvi_group = relevel(covars$vax_cat_jcvi_group, ref = as.character(calculate_mode(covars$vax_cat_jcvi_group)))) %>%
# Combine groups in deprivation: First - most deprived; fifth -least deprived
mutate(cov_cat_deprivation_tmp = ifelse(cov_cat_deprivation == 1 | cov_cat_deprivation == 2, "1-2 (most deprived)",
ifelse(cov_cat_deprivation == 3 | cov_cat_deprivation == 3, "3-4",
ifelse(cov_cat_deprivation == 5 | cov_cat_deprivation == 6, "5-6",
ifelse(cov_cat_deprivation == 7 | cov_cat_deprivation == 8, "7-8",
ifelse(cov_cat_deprivation == 9 | cov_cat_deprivation == 10, "9-10 (least deprived)", NA))))),
mutate_at(vars(cov_cat_deprivation_tmp), as.factor))
# For the following variables, the first level (reference level) is not the one with the highest frequency
# Set the most frequently occurred level as the reference for a factor variable
covars <- covars %>%
mutate(cov_cat_ethnicity = relevel(covars$cov_cat_ethnicity, ref = as.character(calculate_mode(covars$cov_cat_ethnicity))),
cov_cat_smoking_status = relevel(covars$cov_cat_smoking_status, ref = as.character(calculate_mode(covars$cov_cat_smoking_status))),
cov_cat_region = relevel(covars$cov_cat_region, ref = as.character(calculate_mode(covars$cov_cat_region))),
sub_cat_covid19_hospital = relevel(covars$sub_cat_covid19_hospital, ref = as.character(calculate_mode(covars$sub_cat_covid19_hospital))),
vax_cat_jcvi_group = relevel(covars$vax_cat_jcvi_group, ref = as.character(calculate_mode(covars$vax_cat_jcvi_group)))) %>%
# Combine groups in deprivation: First - most deprived; fifth -least deprived
mutate(cov_cat_deprivation_tmp = ifelse(cov_cat_deprivation == 1 | cov_cat_deprivation == 2, "1-2 (most deprived)",
ifelse(cov_cat_deprivation == 3 | cov_cat_deprivation == 3, "3-4",
ifelse(cov_cat_deprivation == 5 | cov_cat_deprivation == 6, "5-6",
ifelse(cov_cat_deprivation == 7 | cov_cat_deprivation == 8, "7-8",
ifelse(cov_cat_deprivation == 9 | cov_cat_deprivation == 10, "9-10 (least deprived)", NA)))))) %>%
mutate_at(vars(cov_cat_deprivation_tmp), as.factor) %>%
covars <- covars %>%
mutate(cov_cat_ethnicity = relevel(covars$cov_cat_ethnicity, ref = as.character(calculate_mode(covars$cov_cat_ethnicity))),
cov_cat_smoking_status = relevel(covars$cov_cat_smoking_status, ref = as.character(calculate_mode(covars$cov_cat_smoking_status))),
cov_cat_region = relevel(covars$cov_cat_region, ref = as.character(calculate_mode(covars$cov_cat_region))),
sub_cat_covid19_hospital = relevel(covars$sub_cat_covid19_hospital, ref = as.character(calculate_mode(covars$sub_cat_covid19_hospital))),
vax_cat_jcvi_group = relevel(covars$vax_cat_jcvi_group, ref = as.character(calculate_mode(covars$vax_cat_jcvi_group)))) %>%
# Combine groups in deprivation: First - most deprived; fifth -least deprived
mutate(cov_cat_deprivation_tmp = ifelse(cov_cat_deprivation == 1 | cov_cat_deprivation == 2, "1-2 (most deprived)",
ifelse(cov_cat_deprivation == 3 | cov_cat_deprivation == 3, "3-4",
ifelse(cov_cat_deprivation == 5 | cov_cat_deprivation == 6, "5-6",
ifelse(cov_cat_deprivation == 7 | cov_cat_deprivation == 8, "7-8",
ifelse(cov_cat_deprivation == 9 | cov_cat_deprivation == 10, "9-10 (least deprived)", NA)))))) %>%
mutate_at(vars(cov_cat_deprivation_tmp), as.factor) %>%
# relevel deprivation
mutate(cov_cat_deprivation_tmp = relevel(covars$cov_cat_deprivation_tmp, ref = as.character(calculate_mode(covars$cov_cat_deprivation_tmp))))
covars <- covars %>%
mutate(cov_cat_ethnicity = relevel(covars$cov_cat_ethnicity, ref = as.character(calculate_mode(covars$cov_cat_ethnicity))),
cov_cat_smoking_status = relevel(covars$cov_cat_smoking_status, ref = as.character(calculate_mode(covars$cov_cat_smoking_status))),
cov_cat_region = relevel(covars$cov_cat_region, ref = as.character(calculate_mode(covars$cov_cat_region))),
sub_cat_covid19_hospital = relevel(covars$sub_cat_covid19_hospital, ref = as.character(calculate_mode(covars$sub_cat_covid19_hospital))),
vax_cat_jcvi_group = relevel(covars$vax_cat_jcvi_group, ref = as.character(calculate_mode(covars$vax_cat_jcvi_group)))) %>%
# Combine groups in deprivation: First - most deprived; fifth -least deprived
mutate(cov_cat_deprivation_tmp = ifelse(cov_cat_deprivation == 1 | cov_cat_deprivation == 2, "1-2 (most deprived)",
ifelse(cov_cat_deprivation == 3 | cov_cat_deprivation == 3, "3-4",
ifelse(cov_cat_deprivation == 5 | cov_cat_deprivation == 6, "5-6",
ifelse(cov_cat_deprivation == 7 | cov_cat_deprivation == 8, "7-8",
ifelse(cov_cat_deprivation == 9 | cov_cat_deprivation == 10, "9-10 (least deprived)", NA)))))) %>%
mutate_at(vars(cov_cat_deprivation_tmp), as.factor)
class(covars$cov_cat_deprivation)
class(covars$cov_cat_deprivation_tmp)
# For the following variables, the first level (reference level) is not the one with the highest frequency
# Set the most frequently occurred level as the reference for a factor variable
covars <- covars %>%
mutate(cov_cat_ethnicity = relevel(covars$cov_cat_ethnicity, ref = as.character(calculate_mode(covars$cov_cat_ethnicity))),
cov_cat_smoking_status = relevel(covars$cov_cat_smoking_status, ref = as.character(calculate_mode(covars$cov_cat_smoking_status))),
cov_cat_region = relevel(covars$cov_cat_region, ref = as.character(calculate_mode(covars$cov_cat_region))),
sub_cat_covid19_hospital = relevel(covars$sub_cat_covid19_hospital, ref = as.character(calculate_mode(covars$sub_cat_covid19_hospital))),
vax_cat_jcvi_group = relevel(covars$vax_cat_jcvi_group, ref = as.character(calculate_mode(covars$vax_cat_jcvi_group)))) %>%
# Combine groups in deprivation: First - most deprived; fifth -least deprived
mutate(cov_cat_deprivation_tmp = ifelse(cov_cat_deprivation == 1 | cov_cat_deprivation == 2, "1-2 (most deprived)",
ifelse(cov_cat_deprivation == 3 | cov_cat_deprivation == 3, "3-4",
ifelse(cov_cat_deprivation == 5 | cov_cat_deprivation == 6, "5-6",
ifelse(cov_cat_deprivation == 7 | cov_cat_deprivation == 8, "7-8",
ifelse(cov_cat_deprivation == 9 | cov_cat_deprivation == 10, "9-10 (least deprived)", NA)))))) %>%
mutate_at(vars(cov_cat_deprivation_tmp), as.factor) %>%
# relevel deprivation
mutate(cov_cat_deprivation_tmp = relevel(covars$cov_cat_deprivation_tmp, ref = as.character(calculate_mode(covars$cov_cat_deprivation_tmp))))
levels(covars$cov_cat_deprivation)[levels(covars$cov_cat_deprivation)==1 | levels(covars$cov_cat_deprivation)==2] <-"1-2 (most deprived)"
levels(covars$cov_cat_deprivation)[levels(covars$cov_cat_deprivation)==3 | levels(covars$cov_cat_deprivation)==4] <-"3-4"
levels(covars$cov_cat_deprivation)[levels(covars$cov_cat_deprivation)==5 | levels(covars$cov_cat_deprivation)==6] <-"5-6"
levels(covars$cov_cat_deprivation)[levels(covars$cov_cat_deprivation)==7 | levels(covars$cov_cat_deprivation)==8] <-"7-8"
levels(covars$cov_cat_deprivation)[levels(covars$cov_cat_deprivation)==9 | levels(covars$cov_cat_deprivation)==10] <-"9-10 (least deprived)"
covars$cov_cat_deprivation = relevel(covars$cov_cat_deprivation, ref = as.character(calculate_mode(covars$cov_cat_deprivation))) # added
table(covars$cov_cat_deprivation)
table(covars$cov_cat_deprivation_tmp)
## =============================================================================
## Project:     Post covid unvaccinated project
##
##
## Purpose:  Apply stage 1. Data cleaning
##  - Prepare variables
##  - Apply QA rules
##  - Apply inclusion exclusion criteria
##  - Create cleaned dataset
##
## Authors: Yinghui Wei, Renin Toms, Rochelle Knight, Genevieve Cezard, Rachel Denholm, Kurt Taylor
## Reviewer:
##
##
## Content:
## 0. Load relevant libraries and read data/arguments
## 1. Prepare all variables (re-factoring, re-typing)
##    1.a. Set factor variables as factor
##    1.b. Set the group with the highest frequency as the reference group
##    1.c. Check that continuous variables are defined as numeric variables
##    1.d. Check and specify date format for date variables
##    1.e. Apply changes in the input dataset
##    1.f. Derive diabetes outcomes using algorithm
## 2. Apply QA rules
## 3. Apply exclusion/inclusion criteria
##    (Differentiate criteria for the two sub-cohorts)
##    3.a. Define index start date and general end date
##    3.b. Apply the criteria
##    3.d. Create csv file
## 4. Create the final stage 1 dataset
##
## NOTE: This code output are 3 .csv files and 1 R dataset
##       Output files have a specific name to reflect either the Vaccinated
##       or Electively unvaccinated cohort
##
## =============================================================================
###############################################
# 0. Load relevant libraries and read in data #
###############################################
library(readr)
library(dplyr)
library(stringr)
library(tidyverse)
# Input dataset
input <-read_rds("output/input.rds")
# Define general start date and end date
start_date = as.Date("2020-01-01")
end_date = as.Date("2021-06-18") # General End date: 2021-06-18 (date last JCVI group eligible for vaccination - Decision on Jan 18th 2022)
# NOTE: no censoring of end date for death/event at this stage
######################################################
# 1. Prepare all variables (re-factoring, re-typing) #
######################################################
# handle missing values
input$cov_cat_smoking_status <- replace(input$cov_cat_smoking_status, is.na(input$cov_cat_smoking_status),"M")
# Extract names of variables
variable_names <- tidyselect::vars_select(names(input), starts_with(c('cov_','qa_','exp_cat','vax_cat', 'sub_cat'), ignore.case = TRUE))
# Create a data frame for all relevant variables
covars <- input[,variable_names] #View(covars)
# Replace " " with "_"
covars$cov_cat_region <- gsub(" ", "_", covars$cov_cat_region)
#-------------------------------------#
# 1.a. Set factor variables as factor #
#-------------------------------------#
# Get the names of variables which are factors
factor_names <- tidyselect::vars_select(names(input), starts_with(c('cov_bin','cov_cat','qa_bin','exp_cat','vax_cat', 'sub_cat'), ignore.case = TRUE))
# Set the variables that should be factor variables as factor
covars <- covars %>%
mutate(across(contains(c('cov_bin','cov_cat','qa_bin','exp_cat','vax_cat', 'sub_cat')), ~ as.factor(.)))
# Sort factor level alphabetically
mk_factor_orderlevels <- function(covars, colname)
{
covars <- covars %>% mutate(
!!sym(colname) := factor(!!sym(colname), levels = str_sort(unique(covars[[colname]]), numeric = TRUE)))
return(covars)
}
for (colname in factor_names){
#print(colname)
covars <- mk_factor_orderlevels(covars, colname)
}
#----------------------------------------------------------------------#
# 1.b. Set the group with the highest frequency as the reference group #
#----------------------------------------------------------------------#
# Function to find mode in a factor variable
calculate_mode <- function(x) {
uniqx <- unique(na.omit(x))
uniqx[which.max(tabulate(match(x, uniqx)))]
}
# For the following variables, the first level (reference level) is not the one with the highest frequency
# Set the most frequently occurred level as the reference for a factor variable
covars <- covars %>%
mutate(cov_cat_ethnicity = relevel(covars$cov_cat_ethnicity, ref = as.character(calculate_mode(covars$cov_cat_ethnicity))),
cov_cat_smoking_status = relevel(covars$cov_cat_smoking_status, ref = as.character(calculate_mode(covars$cov_cat_smoking_status))),
cov_cat_region = relevel(covars$cov_cat_region, ref = as.character(calculate_mode(covars$cov_cat_region))),
sub_cat_covid19_hospital = relevel(covars$sub_cat_covid19_hospital, ref = as.character(calculate_mode(covars$sub_cat_covid19_hospital))),
vax_cat_jcvi_group = relevel(covars$vax_cat_jcvi_group, ref = as.character(calculate_mode(covars$vax_cat_jcvi_group)))) %>%
# Combine groups in deprivation: First - most deprived; fifth -least deprived
mutate(cov_cat_deprivation_tmp = ifelse(cov_cat_deprivation == 1 | cov_cat_deprivation == 2, "1-2 (most deprived)",
ifelse(cov_cat_deprivation == 3 | cov_cat_deprivation == 4, "3-4",
ifelse(cov_cat_deprivation == 5 | cov_cat_deprivation == 6, "5-6",
ifelse(cov_cat_deprivation == 7 | cov_cat_deprivation == 8, "7-8",
ifelse(cov_cat_deprivation == 9 | cov_cat_deprivation == 10, "9-10 (least deprived)", NA)))))) %>%
mutate_at(vars(cov_cat_deprivation_tmp), as.factor) %>%
# relevel deprivation
mutate(cov_cat_deprivation_tmp = relevel(covars$cov_cat_deprivation_tmp, ref = as.character(calculate_mode(covars$cov_cat_deprivation_tmp))))
levels(covars$cov_cat_deprivation)[levels(covars$cov_cat_deprivation)==1 | levels(covars$cov_cat_deprivation)==2] <-"1-2 (most deprived)"
levels(covars$cov_cat_deprivation)[levels(covars$cov_cat_deprivation)==3 | levels(covars$cov_cat_deprivation)==4] <-"3-4"
levels(covars$cov_cat_deprivation)[levels(covars$cov_cat_deprivation)==5 | levels(covars$cov_cat_deprivation)==6] <-"5-6"
levels(covars$cov_cat_deprivation)[levels(covars$cov_cat_deprivation)==7 | levels(covars$cov_cat_deprivation)==8] <-"7-8"
levels(covars$cov_cat_deprivation)[levels(covars$cov_cat_deprivation)==9 | levels(covars$cov_cat_deprivation)==10] <-"9-10 (least deprived)"
covars$cov_cat_deprivation = relevel(covars$cov_cat_deprivation, ref = as.character(calculate_mode(covars$cov_cat_deprivation))) # added
# For the following variables, the first level (reference level) is not the one with the highest frequency
# Set the most frequently occurred level as the reference for a factor variable
covars <- covars %>%
mutate(cov_cat_ethnicity = relevel(covars$cov_cat_ethnicity, ref = as.character(calculate_mode(covars$cov_cat_ethnicity))),
cov_cat_smoking_status = relevel(covars$cov_cat_smoking_status, ref = as.character(calculate_mode(covars$cov_cat_smoking_status))),
cov_cat_region = relevel(covars$cov_cat_region, ref = as.character(calculate_mode(covars$cov_cat_region))),
sub_cat_covid19_hospital = relevel(covars$sub_cat_covid19_hospital, ref = as.character(calculate_mode(covars$sub_cat_covid19_hospital))),
vax_cat_jcvi_group = relevel(covars$vax_cat_jcvi_group, ref = as.character(calculate_mode(covars$vax_cat_jcvi_group)))) %>%
# Combine groups in deprivation: First - most deprived; fifth -least deprived
mutate(cov_cat_deprivation_tmp = ifelse(cov_cat_deprivation == 1 | cov_cat_deprivation == 2, "1-2 (most deprived)",
ifelse(cov_cat_deprivation == 3 | cov_cat_deprivation == 4, "3-4",
ifelse(cov_cat_deprivation == 5 | cov_cat_deprivation == 6, "5-6",
ifelse(cov_cat_deprivation == 7 | cov_cat_deprivation == 8, "7-8",
ifelse(cov_cat_deprivation == 9 | cov_cat_deprivation == 10, "9-10 (least deprived)", NA)))))) %>%
mutate_at(vars(cov_cat_deprivation_tmp), as.factor)
calculate_mode <- function(x) {
uniqx <- unique(na.omit(x))
uniqx[which.max(tabulate(match(x, uniqx)))]
}
# For the following variables, the first level (reference level) is not the one with the highest frequency
# Set the most frequently occurred level as the reference for a factor variable
covars <- covars %>%
mutate(cov_cat_ethnicity = relevel(covars$cov_cat_ethnicity, ref = as.character(calculate_mode(covars$cov_cat_ethnicity))),
cov_cat_smoking_status = relevel(covars$cov_cat_smoking_status, ref = as.character(calculate_mode(covars$cov_cat_smoking_status))),
cov_cat_region = relevel(covars$cov_cat_region, ref = as.character(calculate_mode(covars$cov_cat_region))),
sub_cat_covid19_hospital = relevel(covars$sub_cat_covid19_hospital, ref = as.character(calculate_mode(covars$sub_cat_covid19_hospital))),
vax_cat_jcvi_group = relevel(covars$vax_cat_jcvi_group, ref = as.character(calculate_mode(covars$vax_cat_jcvi_group)))) %>%
# Combine groups in deprivation: First - most deprived; fifth -least deprived
mutate(cov_cat_deprivation_tmp = ifelse(cov_cat_deprivation == 1 | cov_cat_deprivation == 2, "1-2 (most deprived)",
ifelse(cov_cat_deprivation == 3 | cov_cat_deprivation == 4, "3-4",
ifelse(cov_cat_deprivation == 5 | cov_cat_deprivation == 6, "5-6",
ifelse(cov_cat_deprivation == 7 | cov_cat_deprivation == 8, "7-8",
ifelse(cov_cat_deprivation == 9 | cov_cat_deprivation == 10, "9-10 (least deprived)", NA)))))) %>%
mutate_at(vars(cov_cat_deprivation_tmp), as.factor) %>%
# relevel deprivation
mutate(cov_cat_deprivation_tmp = relevel(covars$cov_cat_deprivation_tmp, ref = as.character(calculate_mode(covars$cov_cat_deprivation_tmp))))
levels(covars$cov_cat_deprivation)[levels(covars$cov_cat_deprivation)==1 | levels(covars$cov_cat_deprivation)==2] <-"1-2 (most deprived)"
levels(covars$cov_cat_deprivation)[levels(covars$cov_cat_deprivation)==3 | levels(covars$cov_cat_deprivation)==4] <-"3-4"
levels(covars$cov_cat_deprivation)[levels(covars$cov_cat_deprivation)==5 | levels(covars$cov_cat_deprivation)==6] <-"5-6"
levels(covars$cov_cat_deprivation)[levels(covars$cov_cat_deprivation)==7 | levels(covars$cov_cat_deprivation)==8] <-"7-8"
levels(covars$cov_cat_deprivation)[levels(covars$cov_cat_deprivation)==9 | levels(covars$cov_cat_deprivation)==10] <-"9-10 (least deprived)"
covars$cov_cat_deprivation = relevel(covars$cov_cat_deprivation, ref = as.character(calculate_mode(covars$cov_cat_deprivation))) # added
covars <- covars %>%
mutate(cov_cat_ethnicity = relevel(covars$cov_cat_ethnicity, ref = as.character(calculate_mode(covars$cov_cat_ethnicity))),
cov_cat_smoking_status = relevel(covars$cov_cat_smoking_status, ref = as.character(calculate_mode(covars$cov_cat_smoking_status))),
cov_cat_region = relevel(covars$cov_cat_region, ref = as.character(calculate_mode(covars$cov_cat_region))),
sub_cat_covid19_hospital = relevel(covars$sub_cat_covid19_hospital, ref = as.character(calculate_mode(covars$sub_cat_covid19_hospital))),
vax_cat_jcvi_group = relevel(covars$vax_cat_jcvi_group, ref = as.character(calculate_mode(covars$vax_cat_jcvi_group))))
covars <- covars %>%
mutate(cov_cat_ethnicity = relevel(cov_cat_ethnicity, ref = as.character(calculate_mode(cov_cat_ethnicity))),
cov_cat_smoking_status = relevel(covars$cov_cat_smoking_status, ref = as.character(calculate_mode(covars$cov_cat_smoking_status))),
cov_cat_region = relevel(covars$cov_cat_region, ref = as.character(calculate_mode(covars$cov_cat_region))),
sub_cat_covid19_hospital = relevel(covars$sub_cat_covid19_hospital, ref = as.character(calculate_mode(covars$sub_cat_covid19_hospital))),
vax_cat_jcvi_group = relevel(covars$vax_cat_jcvi_group, ref = as.character(calculate_mode(covars$vax_cat_jcvi_group))))
## 3. Apply exclusion/inclusion criteria
##    (Differentiate criteria for the two sub-cohorts)
##    3.a. Define index start date and general end date
##    3.b. Apply the criteria
##    3.d. Create csv file
## 4. Create the final stage 1 dataset
##
## NOTE: This code output are 3 .csv files and 1 R dataset
##       Output files have a specific name to reflect either the Vaccinated
##       or Electively unvaccinated cohort
##
## =============================================================================
###############################################
# 0. Load relevant libraries and read in data #
###############################################
library(readr)
library(dplyr)
library(stringr)
library(tidyverse)
# Input dataset
input <-read_rds("output/input.rds")
# Define general start date and end date
start_date = as.Date("2020-01-01")
end_date = as.Date("2021-06-18") # General End date: 2021-06-18 (date last JCVI group eligible for vaccination - Decision on Jan 18th 2022)
# NOTE: no censoring of end date for death/event at this stage
######################################################
# 1. Prepare all variables (re-factoring, re-typing) #
######################################################
# handle missing values
input$cov_cat_smoking_status <- replace(input$cov_cat_smoking_status, is.na(input$cov_cat_smoking_status),"M")
# Extract names of variables
variable_names <- tidyselect::vars_select(names(input), starts_with(c('cov_','qa_','exp_cat','vax_cat', 'sub_cat'), ignore.case = TRUE))
# Create a data frame for all relevant variables
covars <- input[,variable_names] #View(covars)
# Replace " " with "_"
covars$cov_cat_region <- gsub(" ", "_", covars$cov_cat_region)
#-------------------------------------#
# 1.a. Set factor variables as factor #
#-------------------------------------#
# Get the names of variables which are factors
factor_names <- tidyselect::vars_select(names(input), starts_with(c('cov_bin','cov_cat','qa_bin','exp_cat','vax_cat', 'sub_cat'), ignore.case = TRUE))
# Set the variables that should be factor variables as factor
covars <- covars %>%
mutate(across(contains(c('cov_bin','cov_cat','qa_bin','exp_cat','vax_cat', 'sub_cat')), ~ as.factor(.)))
# Sort factor level alphabetically
mk_factor_orderlevels <- function(covars, colname)
{
covars <- covars %>% mutate(
!!sym(colname) := factor(!!sym(colname), levels = str_sort(unique(covars[[colname]]), numeric = TRUE)))
return(covars)
}
for (colname in factor_names){
#print(colname)
covars <- mk_factor_orderlevels(covars, colname)
}
#----------------------------------------------------------------------#
# 1.b. Set the group with the highest frequency as the reference group #
#----------------------------------------------------------------------#
# Function to find mode in a factor variable
calculate_mode <- function(x) {
uniqx <- unique(na.omit(x))
uniqx[which.max(tabulate(match(x, uniqx)))]
}
# For the following variables, the first level (reference level) is not the one with the highest frequency
# Set the most frequently occurred level as the reference for a factor variable
covars <- covars %>%
mutate(cov_cat_ethnicity = relevel(cov_cat_ethnicity, ref = as.character(calculate_mode(cov_cat_ethnicity))),
cov_cat_smoking_status = relevel(cov_cat_smoking_status, ref = as.character(calculate_mode(cov_cat_smoking_status))),
cov_cat_region = relevel(cov_cat_region, ref = as.character(calculate_mode(cov_cat_region))),
sub_cat_covid19_hospital = relevel(sub_cat_covid19_hospital, ref = as.character(calculate_mode(sub_cat_covid19_hospital))),
vax_cat_jcvi_group = relevel(vax_cat_jcvi_group, ref = as.character(calculate_mode(vax_cat_jcvi_group)))) %>%
# Combine groups in deprivation: First - most deprived; fifth -least deprived
mutate(cov_cat_deprivation_tmp = ifelse(cov_cat_deprivation == 1 | cov_cat_deprivation == 2, "1-2 (most deprived)",
ifelse(cov_cat_deprivation == 3 | cov_cat_deprivation == 4, "3-4",
ifelse(cov_cat_deprivation == 5 | cov_cat_deprivation == 6, "5-6",
ifelse(cov_cat_deprivation == 7 | cov_cat_deprivation == 8, "7-8",
ifelse(cov_cat_deprivation == 9 | cov_cat_deprivation == 10, "9-10 (least deprived)", NA)))))) %>%
mutate_at(vars(cov_cat_deprivation_tmp), as.factor) %>%
# relevel deprivation
mutate(cov_cat_deprivation_tmp = relevel(cov_cat_deprivation_tmp, ref = as.character(calculate_mode(cov_cat_deprivation_tmp))))
levels(covars$cov_cat_deprivation)[levels(covars$cov_cat_deprivation)==1 | levels(covars$cov_cat_deprivation)==2] <-"1-2 (most deprived)"
levels(covars$cov_cat_deprivation)[levels(covars$cov_cat_deprivation)==3 | levels(covars$cov_cat_deprivation)==4] <-"3-4"
levels(covars$cov_cat_deprivation)[levels(covars$cov_cat_deprivation)==5 | levels(covars$cov_cat_deprivation)==6] <-"5-6"
levels(covars$cov_cat_deprivation)[levels(covars$cov_cat_deprivation)==7 | levels(covars$cov_cat_deprivation)==8] <-"7-8"
levels(covars$cov_cat_deprivation)[levels(covars$cov_cat_deprivation)==9 | levels(covars$cov_cat_deprivation)==10] <-"9-10 (least deprived)"
covars$cov_cat_deprivation = relevel(covars$cov_cat_deprivation, ref = as.character(calculate_mode(covars$cov_cat_deprivation))) # added
table(covars$cov_cat_deprivation)
table(covars$cov_cat_deprivation_tmp)
class(covars$cov_cat_deprivation_tmp)
class(covars$cov_cat_deprivation)
levels(covars$cov_cat_deprivation)
levels(covars$cov_cat_deprivation_tmp)
# A simple check if factor reference level has changed
lapply(covars[,c("cov_cat_ethnicity", "cov_cat_smoking_status", "cov_cat_region","cov_cat_deprivation","sub_cat_covid19_hospital","vax_cat_jcvi_group")], table)
meta_data_factors <- lapply(covars[,factor_names], table)
